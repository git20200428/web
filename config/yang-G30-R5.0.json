{
    "yang": {
        "ne": {
            "definition": {
                "jpath": {
                    "ne": {}
                },
                "namespace": "http://infinera.com/yang/ioa/ne",
                "yangType": "container",
                "description": "Top level entity of the model, represents the entire Network Element.",
                "user-class": "-w:NA,NE,TT -r:*",
                "system-managed": "true",
                "startup-created": "true"
            },
            "ne-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "config": "false",
                "description": "Unique identifier of the NE defined by the system.",
                "persistency": "true"
            },
            "ne-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User assigned name for this NE.",
                "default": "GX"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "ne-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Type of the NE.",
                "default": "G30",
                "persistency": "true"
            },
            "ne-vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Vendor name of the NE.",
                "persistency": "true"
            },
            "ne-site": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Name or CLLI of the site where this NE is located."
            },
            "ne-location": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Name of the location of this particular NE."
            },
            "ne-sub-location": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Name of the secondary location of this particular NE."
            },
            "clli": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..20",
                "description": "Common Language Location Identifier (CLLI) is a 20-character standardized geographic\n                         identifier that uniquely identifies the functional category of the equipment."
            },
            "node-controller-chassis-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Selects the chassis that has the role of the NE controller.\n                         Upon initial commissioning, setting this parameter automatically provisions\n                         the current chassis with the provided name.",
                "default": "1",
                "edit-condition": [
                    {
                        "error-message": "Chassis names need to match a number in range 1..32",
                        "value": "number(.) >= 1 and number(.) <= 32"
                    },
                    {
                        "error-message": "Can only initialize it once.",
                        "value": "oldvalue(.) = '' "
                    }
                ]
            },
            "altitude": {
                "yangType": "leaf",
                "type": "int16",
                "units": "meters",
                "description": "Altitude of the NE."
            },
            "latitude": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "16",
                "range": "-90 .. 90",
                "units": "degrees",
                "description": "Latitude of the NE."
            },
            "longitude": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "16",
                "range": "-180 .. 180",
                "units": "degrees",
                "description": "Longitude of the NE."
            },
            "equipment-discovery-ready": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "config": "false",
                "description": "Represents the current equipment discovery state.\n                         It will remain as 'false' until all equipment was discovered during startup.\n                         Equipment added after startup will not contribute to the update of this state."
            },
            "alarm-report-ready": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "config": "false",
                "description": "Represents the alarm monitoring state.\n                         After a system restart, alarms are kept persistent for a grace minute period, \n                         after which they will be cleared, unless they are reconfirmed.\n                         This state provides visibility whether that grace period has passed or not.\n                         When this state is true, there are no more cached alarms raised."
            },
            "contact": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "The administrator contact information for the system."
            },
            "recover-mode": {
                "yangType": "leaf",
                "type": "boolean",
                "config": "false",
                "description": "A system is in recover-mode to represent an error state that requires manual intervention.\n                Several specific sanity checks are done during system startup, and if any of them fail\n                the system will enter recover-mode.\n\n                While in recover mode, the following happens:\n                - the reason for the recover mode can be visualized in the ne recover-mode-reason attribute\n                - a system-wide alarm RECOVER-MODE is raised\n                - CLI sessions get an extra banner at login reminding the user the current system state\n                - connection to existing line cards is severed, effectively keeping previous hardware configuration untouched\n                - new configurations are accepted, but will not take effect until the recover mode is cleared\n\n                Recover mode can be resolved in multiple ways:\n                - simply confirming that current configuration is the desired one\n                - restoring a valid Database backup\n                In all cases, the recover mode requires an explicit command to be cleared.\n\n                Use command 'clear recover-mode' to confirm current configuration and return to normal system operation.\n\n                (!) Warning: clearing the recover mode may have traffic impact; please confirm settings before this action.",
                "persistency": "true",
                "when": " . = 'true'"
            },
            "original-recover-mode-reason": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "config": "false",
                "description": "Original reason for recover mode.\n                         Displays the original recover mode reason, available only when current reason has changed.",
                "persistency": "true",
                "when": "../recover-mode = 'true' and . != ../recover-mode-reason"
            },
            "recover-mode-reason": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "config": "false",
                "description": "Reason for recover mode.\n                         Available only when ne is in recover mode.",
                "persistency": "true",
                "when": "../recover-mode = 'true'"
            },
            "equipment": "container",
            "facilities": "container",
            "services": "container",
            "system": "container",
            "topology": "container",
            "system-capabilities": "container",
            "protection": "container",
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            }
        },
        "equipment": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "Container for all equipment related resources.",
                "user-class": "-w:NA,NE -r:*",
                "system-managed": "true"
            },
            "chassis": "list",
            "card": "list",
            "leds": "container",
            "equipment-policies": "container"
        },
        "chassis": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "name",
                "description": "Chassis configuration and state.",
                "create-condition": {
                    "error-message": "Currently GX only supports a single chassis.",
                    "description": "GX1.0 restriction: only one chassis.",
                    "value": "count(../chassis) = 1"
                },
                "delete-condition": {
                    "error-message": "Not possible to delete when only exists one chassis.",
                    "description": "Do not delete the unique existing chassis.",
                    "value": "count(/ne/equipment/chassis) > 1"
                },
                "user-class": "-w:NA,NE -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Chassis name."
            },
            "is-node-controller": {
                "yangType": "leaf",
                "type": "boolean",
                "config": "false",
                "description": "Tells if this chassis the the node controller of this NE.",
                "persistency": "true"
            },
            "alias-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "pattern": [
                    "[A-Za-z0-9_\\-/,\\.]*"
                ],
                "description": "User defined alias for this entity. Must be an alphanumeric string with dash or underscore."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "edit-condition": [
                    {
                        "error-message": "Not possible to set chassis to maintenance when any line card is not also in maintenance.",
                        "value": "if (. = 'maintenance') then\n                                        not (../../card[chassis-name=current()/../name]\n                                                       [category = 'line-card']\n                                                       [admin-state != 'maintenance'])\n                                    else true()"
                    },
                    {
                        "error-message": "Not possible to set Node Controller chassis to locked.",
                        "value": "if (. = 'lock') then\n                                        not(../is-node-controller)\n                                    else\n                                        true()"
                    },
                    {
                        "error-message": "Not possible to set chassis to locked when any line card is not also in locked.",
                        "value": "if (. = 'lock') then\n                                        not (../../card[chassis-name=current()/../name]\n                                                       [category = 'line-card']\n                                                       [admin-state != 'lock'])\n                                    else true()"
                    }
                ]
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "required-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "chassis",
                "mandatory": "true",
                "description": "Chassis type.",
                "set-on-create-only": "true"
            },
            "chassis-location": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "User defined location"
            },
            "rack-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "User defined rack name (withing the location)"
            },
            "position-in-rack": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Position of the chassis within the rack."
            },
            "expected-pem-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "DC": {
                            "value": "1",
                            "description": "DC PEM"
                        }
                    },
                    {
                        "AC-high-line": {
                            "value": "2",
                            "description": "High-line (220V) AC PEM"
                        }
                    },
                    {
                        "AC-low-line": {
                            "value": "3",
                            "description": "Low-line (110V) AC PEM"
                        }
                    },
                    {
                        "HV-DC": {
                            "value": "4",
                            "description": "High Voltage DC PEM"
                        }
                    }
                ],
                "default": "DC",
                "description": "Defines what is the expected type of PEMs that this chassis will have.\n                                 It is not possible to configure each PEM slot individually, as all PEMs need to be of the same type."
            },
            "expected-fan-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "single-rotar": {
                            "value": "1",
                            "description": "Standard FAN type."
                        }
                    },
                    {
                        "counter-rotating": {
                            "value": "2",
                            "description": "Counter rotating FAN type."
                        }
                    }
                ],
                "default": "counter-rotating",
                "description": "Defines what is the expected type of FANs that this chassis will have.\n                                 It is not possible to configure each FAN slot individually, this needs to be done at the chassis level.",
                "when": "../required-type != 'G31'"
            },
            "pem-under-voltage-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "volt",
                "description": "Under voltage threshold on PEM input feed.",
                "default": "$min-volt",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid pem-under-voltage-threshold value for $1 PEM (should be between $2 and $3 volt)."
                        },
                        "description": "Restriction for the range of PEM under-voltage threshold values.",
                        "value": "(if (../expected-pem-type = 'DC') then (. < 0) else (. > 0))\n                                        and\n                                        abs(.) >= abs($min-volt) and abs(.) <= abs($max-volt)"
                    },
                    {
                        "error-message": "pem-over-voltage-threshold must be larger than pem-under-voltage-threshold.",
                        "value": "abs($ov-threshold) >= abs(.)"
                    }
                ]
            },
            "pem-over-voltage-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "volt",
                "description": "Over voltage threshold on PEM input feed.",
                "default": "$max-volt",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid pem-over-voltage-threshold value for $1 PEM (should be between $2 and $3 volt)."
                        },
                        "description": "Restriction for the range of PEM over-voltage threshold values.",
                        "value": "(if (../expected-pem-type = 'DC') then (. < 0) else (. > 0))\n                                        and\n                                        abs(.) >= abs($min-volt) and abs(.) <= abs($max-volt)"
                    },
                    {
                        "error-message": "pem-over-voltage-threshold must be larger than pem-under-voltage-threshold.",
                        "value": " abs(.) >= abs($uv-threshold)"
                    }
                ]
            },
            "available-power": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "W",
                "config": "false",
                "description": "Available Power at the chassis based on the current provisioned equipment.",
                "when": "../required-type != 'G31'",
                "persistency": "true"
            },
            "configured-max-power-draw": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "W",
                "description": "User configured limit of power usable by this chassis.",
                "when": "../required-type != 'G31'",
                "default": "$net-pem-power",
                "edit-condition": {
                    "error-message": {
                        "value": "configured-max-power-draw must be between $1 and $2 W."
                    },
                    "description": "Range for configured-max-power-draw.",
                    "value": ". >= $minimum-power-draw and . <= $configured-pem-power"
                }
            },
            "current-estimated-power-draw": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "W",
                "config": "false",
                "description": "Total estimated power of both installed and pre-provisioned FRUs",
                "when": "../required-type != 'G31'",
                "persistency": "true"
            },
            "configured-ambient-temperature": {
                "yangType": "leaf",
                "type": "uint8",
                "units": "Celsius",
                "description": "Configured ambient temperature for the chassis, used to compute the FRU's power consumption.",
                "default": "55",
                "discover-values": "$supported-ambient-temperatures",
                "edit-condition": {
                    "error-message": {
                        "value": "Supported chassis ambient temperatures are $1."
                    },
                    "value": " . = $supported-ambient-temperatures"
                }
            },
            "power-redundancy": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "one-plus-one": {
                            "value": "1",
                            "description": "PEM is redundant within a bank of 2 PEMs."
                        }
                    },
                    {
                        "one-for-n": {
                            "value": "2",
                            "description": "PEM is redundant against any other PEM."
                        }
                    }
                ],
                "default": "one-plus-one",
                "description": "Configuration of the PEM redundancy mode.",
                "when": "../required-type != 'G31'",
                "edit-condition": {
                    "error-message": "Not possible to change power-redundancy mode due to insufficient available power.",
                    "value": "$available-power > 0"
                }
            },
            "no-switchover": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "description": "If enabled, the standby controller will be locked out from taking over the active card. This means no manual or autonomous switchovers will happen.",
                "when": "//supported-chassis[chassis-type = current()/../required-type]/controller-redundancy-supported = true()"
            },
            "active-controller-slot": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "1..64"
                    }
                ],
                "default": "5",
                "config": "false",
                "description": "Identifies the active controller slot name. A change to this attribute implies a switchover has happened.",
                "persistency": "true"
            },
            "inventory": "container",
            "slot": "list"
        },
        "slot": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "slot": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "name",
                "config": "false",
                "description": "Slot equipment holder details.",
                "logical-parent-type": "chassis",
                "persistency": "true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Slot name.",
                "separator": "-",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "supported-type": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "max-elements": "20",
                "description": "List of supported types in this equipment holder. \n                        If a specific type is provisioned, the list has only that type.",
                "persistency": "true"
            },
            "installed-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "description": "Currently installed type in this equipment holder. If empty, means no FRU is present."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "current-equipment": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../card/name",
                "description": "Name of the equipment that is currently required in this slot.",
                "persistency": "true",
                "config": "false"
            },
            "inventory": "container"
        },
        "chassis.inventory": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "inventory": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "config": "false",
                "description": "Inventory data for a present FRU.",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "hardware-version": {
                "yangType": "leaf",
                "type": "string",
                "description": "Hardware version of this FRU.",
                "config": "false"
            },
            "actual-type": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU type of actual equipment.",
                "config": "false"
            },
            "actual-subtype": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU subtype of actual equipment - only available if applicable.",
                "when": ". != ''",
                "config": "false"
            },
            "sw-support-revision": {
                "yangType": "leaf",
                "type": "uint16",
                "default": "0",
                "config": "false",
                "description": "Software revision currently installed.",
                "when": "request-info('internal') or not(. = (0, 255))"
            },
            "PON": {
                "yangType": "leaf",
                "type": "string",
                "description": "Current PON of the equipment.",
                "config": "false"
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Serial number of the equipment.",
                "config": "false"
            },
            "clei": {
                "yangType": "leaf",
                "type": "string",
                "description": "Common Language Equipment Identifier.",
                "config": "false"
            },
            "vendor": {
                "yangType": "leaf",
                "type": "string",
                "description": "Vendor of this equipment.",
                "config": "false"
            },
            "part-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Part number for this equipment.",
                "config": "false"
            },
            "manufacture-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Manufacture Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "insertion-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Insertion Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "number-of-lanes": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "When applicatible, provides number of supported optical lanes in this equipment.",
                "when": "false()",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0",
                            "description": "Card doesn't have upgradable firmware."
                        }
                    },
                    {
                        "current": {
                            "value": "1",
                            "description": "All components have current firmware."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "At least one component does not have current firmare."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on all firmware status is currently unavailable."
                        }
                    }
                ],
                "default": "not-applicable",
                "description": "Summary status for all the firmware for this card.",
                "config": "false"
            },
            "current-fw": "list"
        },
        "slot.inventory": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "slot": {
                                    "inventory": {},
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "config": "false",
                "description": "Inventory data for a present FRU.",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "hardware-version": {
                "yangType": "leaf",
                "type": "string",
                "description": "Hardware version of this FRU.",
                "config": "false"
            },
            "actual-type": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU type of actual equipment.",
                "config": "false"
            },
            "actual-subtype": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU subtype of actual equipment - only available if applicable.",
                "when": ". != '' ",
                "config": "false"
            },
            "sw-support-revision": {
                "yangType": "leaf",
                "type": "uint16",
                "default": "0",
                "config": "false",
                "description": "Software revision currently installed.",
                "when": "request-info('internal') or not(. = (0, 255))"
            },
            "PON": {
                "yangType": "leaf",
                "type": "string",
                "description": "Current PON of the equipment.",
                "config": "false"
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Serial number of the equipment.",
                "config": "false"
            },
            "clei": {
                "yangType": "leaf",
                "type": "string",
                "description": "Common Language Equipment Identifier.",
                "config": "false"
            },
            "vendor": {
                "yangType": "leaf",
                "type": "string",
                "description": "Vendor of this equipment.",
                "config": "false"
            },
            "part-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Part number for this equipment.",
                "config": "false"
            },
            "manufacture-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Manufacture Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "insertion-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Insertion Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "number-of-lanes": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "When applicatible, provides number of supported optical lanes in this equipment.",
                "when": "false()",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0",
                            "description": "Card doesn't have upgradable firmware."
                        }
                    },
                    {
                        "current": {
                            "value": "1",
                            "description": "All components have current firmware."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "At least one component does not have current firmare."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on all firmware status is currently unavailable."
                        }
                    }
                ],
                "default": "not-applicable",
                "description": "Summary status for all the firmware for this card.",
                "config": "false"
            },
            "current-fw": "list"
        },
        "chassis.inventory.current-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "inventory": {
                                    "current-fw": {
                                        "fw-name": ""
                                    }
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "fw-name",
                "description": "List of current firmware available in the card.",
                "config": "false",
                "user-class": "-w:NA,NE -r:*"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Current version of the firmware.",
                "config": "false"
            },
            "expected-fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Expected version of the firmware.",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "current": {
                            "value": "1",
                            "description": "Current firmware is up-to-date."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "Current firmware is not up-to-date against the expected one."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on firmware status is currently unavailable."
                        }
                    }
                ],
                "description": "Status for this particular firmware.",
                "config": "false"
            }
        },
        "slot.inventory.current-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "chassis": {
                                "slot": {
                                    "inventory": {
                                        "current-fw": {
                                            "fw-name": ""
                                        }
                                    },
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "fw-name",
                "description": "List of current firmware available in the card.",
                "config": "false",
                "user-class": "-w:NA,NE -r:*"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Current version of the firmware.",
                "config": "false"
            },
            "expected-fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Expected version of the firmware.",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "current": {
                            "value": "1",
                            "description": "Current firmware is up-to-date."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "Current firmware is not up-to-date against the expected one."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on firmware status is currently unavailable."
                        }
                    }
                ],
                "description": "Status for this particular firmware.",
                "config": "false"
            }
        },
        "card": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "name",
                "description": "Card base object.This object has parameters that are common to all existing card types (controller, fan, etc).",
                "delete-condition": [
                    {
                        "error-message": "Not possible to delete card due to the existence of low order ODUs.",
                        "value": "not(/ne/facilities/odu[supporting-card=current()/name]\n                                                            [class='low-order'])"
                    },
                    {
                        "error-message": "Not possible to delete card due to the existence of eth-zr traffic setup.",
                        "value": "if(/ne/facilities/ethernet[supporting-card=current()/name]/tx-mapping-mode = 'openZR+') then \n                                        /ne/facilities/ethernet[supporting-card=current()/name]/time-slots = '' else\n                                        true()"
                    },
                    {
                        "post-transaction": "true",
                        "error-message": "At least one controller card must exist per chassis.",
                        "description": "Can only delete a controller card if another controller card exists.",
                        "value": "category != 'controller' or \n                                  count(../card[category='controller'][chassis-name = current()/chassis-name]) >= 1"
                    },
                    {
                        "error-message": "Cannot delete active controller card since the existing standby controller card is not with ready-synchronized state.",
                        "description": "Can only delete the active controller card if standby controller card exists and it is in ready-synchronized state.",
                        "value": "category != 'controller' or\n                                  (current()/controller-card/redundancy-status != 'active' or\n                                   boolean(../card[chassis-name = current()/chassis-name]/controller-card[redundancy-status = 'standby' and redundancy-standby-status = 'ready-synchronized']))"
                    },
                    {
                        "error-message": "Cannot delete the last enabled power supply card in the chassis.",
                        "description": "There needs to be at least one power-supply card in the chassis.",
                        "value": "category != 'power-supply' or count(../card[chassis-name = current()/chassis-name][category = 'power-supply'][oper-state='enabled']) >= 1"
                    },
                    {
                        "error-message": "Not possible to delete card due to the existence of low order ODUs.",
                        "value": "not(/ne/facilities/odu[supporting-card=current()/name]\n                                                        [class='low-order'])"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be manually deleted."
                        },
                        "description": "Certain cards cannot be deleted by user.",
                        "value": "request-info('internal') or not($is-system-card)"
                    }
                ],
                "display": "sort chassis-name slot-name",
                "logical-parent-type": "slot",
                "create-condition": [
                    {
                        "error-message": "Invalid chassis name.",
                        "description": "Referenced chassis must exist.",
                        "value": "boolean(../chassis[name=current()/chassis-name])"
                    },
                    {
                        "error-message": "Invalid slot name.",
                        "description": "Referenced slot must exist.",
                        "value": "boolean($my-slot)"
                    },
                    {
                        "error-message": "Slot already occupied by another card.",
                        "description": "A card can only be created in an empty slot.",
                        "value": "not(../card[name != current()/name]\n                                             [chassis-name=current()/chassis-name]\n                                             [slot-name=current()/slot-name])"
                    },
                    {
                        "error-message": "This card cannot be manually provisioned.",
                        "value": "request-info('internal') or not($is-system-card)"
                    },
                    {
                        "error-message": {
                            "value": "Can not create card because slot $1 is already occupied."
                        },
                        "value": "$my-slot/reserved = 'false' and \n                         (if ($double-width-card) then\n                             $next-slot/reserved = 'false'\n                         else true())"
                    }
                ],
                "user-class": "-w:NA,NE -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Card identifier."
            },
            "required-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "card",
                "mandatory": "true",
                "description": "Required card type.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Unsupported card type for this slot.",
                    "value": ". = $possible-types"
                }
            },
            "required-subtype": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "The subtype of the card",
                "edit-condition": [
                    {
                        "error-message": "Not possible to edit PEM subtype on a per slot basis, needs to be configured at chassis level.",
                        "value": "if ($card-type = 'PEM') then \n                                             string(.) = get-pem-subtype(../chassis-name)\n                                        else \n                                            true()"
                    },
                    {
                        "error-message": "Invalid card subtype.",
                        "description": "If required-type is provided, allow subtypes supported by that required-type.\n                                 If required-type is not provided, allow any card subtypes.",
                        "value": "(not(newvalue(.)) and created()) or (string(newvalue(.)) = $possible-subtypes)\n                                    or (string(newvalue(.)) = '')"
                    }
                ],
                "discover-values": "seq($possible-subtypes)",
                "when": "count(seq($supported-card/supported-subtype)) > 0",
                "volatile-config": {
                    "when": "../category = ('fan', 'power-supply')"
                }
            },
            "category": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "controller": {
                            "value": "1"
                        }
                    },
                    {
                        "line-card": {
                            "value": "2"
                        }
                    },
                    {
                        "fan": {
                            "value": "3"
                        }
                    },
                    {
                        "power-supply": {
                            "value": "4"
                        }
                    },
                    {
                        "other": {
                            "value": "5"
                        }
                    }
                ],
                "config": "false",
                "description": "Card category.",
                "persistency": "true"
            },
            "chassis-name": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../chassis/name",
                "mandatory": "true",
                "description": "Chassis where this card is located.",
                "set-on-create-only": "true"
            },
            "slot-name": {
                "yangType": "leaf",
                "type": "string",
                "mandatory": "true",
                "description": "Slot where this card is located.",
                "discover-values": "/ne/equipment/chassis[name=current()/chassis-name]/slot[required-type='none'][count(seq(supported-type)) > 0]/name",
                "set-on-create-only": "true"
            },
            "max-power-draw": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "W",
                "config": "false",
                "description": "Maximum power draw for this card.",
                "persistency": "true",
                "when": "../category != 'power-supply'"
            },
            "last-reboot-reason": {
                "yangType": "leaf",
                "type": "string",
                "config": "false",
                "description": "Reason why the last reboot was done.",
                "persistency": "true",
                "when": "(../category = 'line-card') or (../category = 'controller')"
            },
            "alias-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "pattern": [
                    "[A-Za-z0-9_\\-/,\\.]*"
                ],
                "description": "User defined alias for this entity. Must be an alphanumeric string with dash or underscore."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "when": "not(../required-type = ('FAN', 'IOPANEL'))",
                "traffic-affecting": {
                    "when": "../category = 'line-card' and . = 'lock'"
                },
                "edit-condition": {
                    "error-message": "Not possible to lock an active controller card.",
                    "description": "Controller cards cannot be locked.",
                    "value": "if (../category = 'controller' and ../controller-card/redundancy-status = 'active') then\n                                        . != 'lock'\n                                    else\n                                        true()"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "controller-card": "container",
            "property": "list",
            "port": "list",
            "console": "container",
            "resources": "container",
            "capabilities": "container"
        },
        "controller-card": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "controller-card": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "Container of parameters related with controller cards.",
                "notify": "all-true",
                "system-managed": "true",
                "user-class": "-w:NA,NE -r:*"
            },
            "redundancy-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1"
                        }
                    },
                    {
                        "standby": {
                            "value": "2"
                        }
                    },
                    {
                        "not-in-service": {
                            "value": "3"
                        }
                    }
                ],
                "config": "false",
                "description": "Controller state.",
                "persistency": "true"
            },
            "redundancy-standby-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ready-synchronized": {
                            "value": "1",
                            "description": "Standby controller is sync and ready."
                        }
                    },
                    {
                        "not-ready-synchronizing": {
                            "value": "2",
                            "description": "Standby controller synchronizing data with active controller."
                        }
                    },
                    {
                        "not-ready-synchronize-fail": {
                            "value": "3",
                            "description": "Synchronization fail."
                        }
                    },
                    {
                        "lock-out": {
                            "value": "4",
                            "description": "Protection in lock-out state."
                        }
                    },
                    {
                        "card-not-present": {
                            "value": "5",
                            "description": "Standby card is not present"
                        }
                    }
                ],
                "default": "not-ready-synchronizing",
                "config": "false",
                "description": "State of the controller redundancy.",
                "when": "$supported-chassis/controller-redundancy-supported = true() and (../redundancy-status = 'standby' or ../redundancy-status = 'not-in-service')"
            },
            "number-of-switchover-events": {
                "yangType": "leaf",
                "type": "uint32",
                "config": "false",
                "description": "Number of times that an active controller card has switchover. Value only visibile on active controller card.",
                "persistency": "true",
                "when": "$supported-chassis/controller-redundancy-supported = true() and ../redundancy-status = 'active'"
            },
            "time-of-last-switchover": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "never": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    }
                ],
                "description": "Timestamp of the last controller switchover event. Value only visible on active controller card.",
                "config": "false",
                "persistency": "true",
                "when": "$supported-chassis/controller-redundancy-supported = true() and (../number-of-switchover-events > 0 or ../redundancy-status = 'active')"
            },
            "additional-details": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "config": "false",
                "description": "Additional details for synchronization status.",
                "when": "$supported-chassis/controller-redundancy-supported = true() and (../redundancy-standby-status = 'not-ready-synchronize-fail')"
            }
        },
        "property": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "property": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/common",
                "key": "name",
                "description": "Type specific property, auto instanciated by the system, but configurable by the user.",
                "system-managed": "true",
                "user-class": "-w:NA,NE -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "config": "false",
                "description": "Description of this property, including type restrictions."
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Name of the property."
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "description": "Value of the property. Will always be a 'string', even if it corresponds to a number or other type."
            }
        },
        "port": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "name",
                "description": "Generic card port.",
                "system-managed": "true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Port name.",
                "separator": "-"
            },
            "alias-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "pattern": [
                    "[A-Za-z0-9_\\-/,\\.]*"
                ],
                "description": "User defined alias for this entity. Must be an alphanumeric string with dash or underscore."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "requires-confirmation": {
                    "when": ". = 'lock' and ../name = 'ETH1'",
                    "description": "This operation will cause management traffic hit over this port! Are you sure you want to continue? [y/n] "
                },
                "edit-condition": {
                    "error-message": "This port does not support maintenance state.",
                    "value": "if (../port-type = 'usb' or ../port-type = 'comm') then\n                                            . != 'maintenance'\n                                        else\n                                            true()"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "port-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "line": {
                            "value": "1",
                            "description": "Refers to line-side 'colored' CWDM or DWDM optical module/transceiver."
                        }
                    },
                    {
                        "tributary": {
                            "value": "2",
                            "description": "Refers to standard 'grey' interfaces/transceivers to interface with other client equipment."
                        }
                    },
                    {
                        "usb": {
                            "value": "3",
                            "description": "USB port."
                        }
                    },
                    {
                        "comm": {
                            "value": "4",
                            "description": "Communication ports."
                        }
                    },
                    {
                        "uplink": {
                            "value": "5",
                            "description": "Refers to ports of an aggregation function that connect to an adjunct line function."
                        }
                    },
                    {
                        "tributary-subport": {
                            "value": "6",
                            "description": "Same as tributary, but for scenarios where the main tributary port is split into multiple subports."
                        }
                    }
                ],
                "config": "false",
                "description": "The port type. Each port type supports different features and services.",
                "persistency": "true"
            },
            "parent-port": {
                "yangType": "leaf",
                "when": "../port-type = 'tributary-subport'",
                "type": "leafref",
                "path": "../../port/name",
                "config": "false",
                "description": "Name of the parent port. Only applicable for sub-ports.",
                "persistency": "true"
            },
            "subport-list": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../port/name",
                "config": "false",
                "description": "List of sub-ports associated with this port. \n                                     Only applicable when this port is a parent port.",
                "when": "count(seq(.)) > 0",
                "persistency": "true"
            },
            "hosted-interface": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "config": "false",
                "description": "Top level interface hosted in this port.",
                "when": "../port-type = ('line', 'tributary', 'tributary-subport', 'comm', 'uplink') and ( . != /ne) ",
                "persistency": "true"
            },
            "supported-type": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "max-elements": "20",
                "description": "List of supported types in this equipment holder. \n                        If a specific type is provisioned, the list has only that type.",
                "persistency": "true",
                "when": "count(seq(.)) > 0"
            },
            "installed-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "description": "Currently installed type in this equipment holder. If empty, means no FRU is present.",
                "when": ". != ''"
            },
            "connected-to": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Indicate neighbour port entity to which the current port is connected to.\n                                     This is not validated by the NE and can be used by the customers (or NMS) for topology construction.\n                                     This parameter is available independently on any automated discovery mechanisms that may exist in the port."
            },
            "tom": "container",
            "usb": "container",
            "comm-eth": "container",
            "inventory": "container"
        },
        "tom": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "tom": {},
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "TOM (Transceiver Optical Module) pluggable information.",
                "create-condition": [
                    {
                        "error-message": "This client port group already reached the maximum capacity of 800G.",
                        "value": "boolean($bandwidth-inside-limit) or $is-openroadm"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: \r\n                            ETH(100G, 10G)  | OTU4 | OTU2 | OTU2e | (STM64, OC192)",
                        "value": "if ($in-utm2 and ../name = '3' and (current()/required-type = 'gx:QSFPPLUS') and \r\n                                              boolean(/ne/facilities/trib-ptp[supporting-card = current()/../../name][supporting-port = '4'])) then\r\n                            (/ne/facilities/trib-ptp[supporting-card = current()/../../name][supporting-port = '4']/service-type != 'OTU4')\r\n                        else if ($in-utm2 and ../name = '4' and (current()/required-type = 'gx:QSFPPLUS') and \r\n                                 boolean(/ne/facilities/trib-ptp[supporting-card = current()/../../name][supporting-port = '3'])) then\r\n                            (/ne/facilities/trib-ptp[supporting-card = current()/../../name][supporting-port = '3']/service-type != 'OTU4')\r\n                        else true()"
                    },
                    {
                        "error-message": "This port doesn't support TOMs.",
                        "value": "count(seq($possible-tom-types)) > 0"
                    }
                ],
                "delete-condition": [
                    {
                        "error-message": "Not possible to delete tom due to the existence of eth-zr traffic setup.",
                        "value": "if(../port-type = 'line' and /ne/facilities/ethernet[supporting-card=current()/../../name][line-port = string(current()/../name)]/tx-mapping-mode = 'openZR+') then \n                                                    /ne/facilities/ethernet[supporting-card=current()/../../name][line-port = string(current()/../name)]/time-slots = '' else\n                                              if(../port-type = 'tributary' and /ne/facilities/ethernet[supporting-card=current()/../../name][supporting-port = string(current()/../name)]/tx-mapping-mode = 'openZR+') then \n                                                    /ne/facilities/ethernet[supporting-card=current()/../../name][supporting-port = string(current()/../name)]/time-slots = '' else\n                                              true()"
                    },
                    {
                        "error-message": "Cannot delete TOM because it is in use by existing services.",
                        "value": "not(//facilities/*[. = (//xcon/source, //xcon/destination)][supporting-card=current()/../../name][supporting-port=current()/../name])"
                    },
                    {
                        "error-message": "Not possible to delete tom due to the existence of low order ODUs.",
                        "value": "not(/ne/facilities/odu[supporting-card=current()/../../name]\n                                                                [supporting-port=current()/../name]\n                                                                [class='low-order'])"
                    }
                ],
                "logical-parent-type": "port",
                "discover-values": "/ne/equipment/card/port[name=$allowed-ports]",
                "user-class": "-w:NA,NE -r:*"
            },
            "required-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "tom",
                "mandatory": "true",
                "description": "The type of the TOM.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Unsupported TOM type for this port",
                    "description": "The TOM required type must match the port possible-TOM-types.",
                    "value": ". = $possible-tom-types"
                }
            },
            "required-subtype": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "The subtype of the TOM.",
                "default": "if(boolean(../../inventory) and \n                                        concat('gx:', string(../../inventory/actual-type)) = ../required-type) then\n                                            string(../../inventory/actual-subtype)\n                                     else\n                                        ''",
                "discover-values": "$possible-tom-subtypes",
                "edit-condition": [
                    {
                        "description": "Check if the subtypes are supportable.",
                        "error-message": "Unsupported TOM subtype for this port.",
                        "value": ". = '' or string(.) = $possible-tom-subtypes"
                    },
                    {
                        "description": "Check if the current service-type is compatible with the new tom subtype.",
                        "error-message": "Current trib-ptp service-type is not compatible with the new tom subtype.",
                        "value": "if(not(created()) and ../../port-type != 'line') then\n                                                (get-allowed-service-types(\n                                                    current()/.., current(), $related-trib-ptp) = \n                                                        $related-trib-ptp/service-type)\n                                            else true()"
                    }
                ]
            },
            "phy-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GE": {
                            "value": "1",
                            "description": "100GE"
                        }
                    },
                    {
                        "200GE": {
                            "value": "2",
                            "description": "200GE"
                        }
                    },
                    {
                        "400GE": {
                            "value": "3",
                            "description": "400GE"
                        }
                    },
                    {
                        "4x100GE": {
                            "value": "4",
                            "description": "4x100GE"
                        }
                    },
                    {
                        "100G": {
                            "value": "5",
                            "description": "100G"
                        }
                    },
                    {
                        "4x10G": {
                            "value": "6",
                            "description": "4x10G"
                        }
                    },
                    {
                        "4x10GE": {
                            "value": "7",
                            "description": "4x10GE"
                        }
                    },
                    {
                        "1GE": {
                            "value": "8",
                            "description": "1GE"
                        }
                    },
                    {
                        "2G5": {
                            "value": "9",
                            "description": "2G5"
                        }
                    },
                    {
                        "10G": {
                            "value": "10",
                            "description": "10G"
                        }
                    },
                    {
                        "10GE": {
                            "value": "11",
                            "description": "10GE"
                        }
                    },
                    {
                        "2G5E": {
                            "value": "12",
                            "description": "2G5E"
                        }
                    },
                    {
                        "40GE": {
                            "value": "13",
                            "description": "40GE"
                        }
                    },
                    {
                        "40G": {
                            "value": "14",
                            "description": "40G"
                        }
                    },
                    {
                        "4x100G": {
                            "value": "15",
                            "description": "4x100G"
                        }
                    },
                    {
                        "200G": {
                            "value": "16",
                            "description": "200G"
                        }
                    }
                ],
                "description": "Configured Phy Mode.",
                "default": "$default-phy-mode",
                "edit-condition": {
                    "error-message": "tom does not support that phy-mode.",
                    "value": " . = $supported-phy-modes"
                }
            },
            "supported-phy-modes": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GE": {
                            "value": "1",
                            "description": "100GE"
                        }
                    },
                    {
                        "200GE": {
                            "value": "2",
                            "description": "200GE"
                        }
                    },
                    {
                        "400GE": {
                            "value": "3",
                            "description": "400GE"
                        }
                    },
                    {
                        "4x100GE": {
                            "value": "4",
                            "description": "4x100GE"
                        }
                    },
                    {
                        "100G": {
                            "value": "5",
                            "description": "100G"
                        }
                    },
                    {
                        "4x10G": {
                            "value": "6",
                            "description": "4x10G"
                        }
                    },
                    {
                        "4x10GE": {
                            "value": "7",
                            "description": "4x10GE"
                        }
                    },
                    {
                        "1GE": {
                            "value": "8",
                            "description": "1GE"
                        }
                    },
                    {
                        "2G5": {
                            "value": "9",
                            "description": "2G5"
                        }
                    },
                    {
                        "10G": {
                            "value": "10",
                            "description": "10G"
                        }
                    },
                    {
                        "10GE": {
                            "value": "11",
                            "description": "10GE"
                        }
                    },
                    {
                        "2G5E": {
                            "value": "12",
                            "description": "2G5E"
                        }
                    },
                    {
                        "40GE": {
                            "value": "13",
                            "description": "40GE"
                        }
                    },
                    {
                        "40G": {
                            "value": "14",
                            "description": "40G"
                        }
                    },
                    {
                        "4x100G": {
                            "value": "15",
                            "description": "4x100G"
                        }
                    },
                    {
                        "200G": {
                            "value": "16",
                            "description": "200G"
                        }
                    }
                ],
                "description": "List of supported Phy Modes by this TOM type.",
                "config": "false",
                "persistency": "true",
                "notify": "true"
            },
            "power-class-override": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Used to override the power class for 3rd party TOM.",
                "when": "../../../required-type != 'CHM6' or ../required-subtype = ('TOM-40G-Q', 'TOM-100G-Q', 'TOM-400G-Q')"
            },
            "upgrade-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "idle": {
                            "value": "1",
                            "description": "Upgrade status not available."
                        }
                    },
                    {
                        "in-progress": {
                            "value": "2",
                            "description": "Upgrade install is in progress."
                        }
                    },
                    {
                        "success": {
                            "value": "3",
                            "description": "Upgrade installed."
                        }
                    },
                    {
                        "failed": {
                            "value": "4",
                            "description": "Upgrade instalation failed."
                        }
                    },
                    {
                        "unknown": {
                            "value": "5",
                            "description": "Upgrade status not known."
                        }
                    }
                ],
                "default": "idle",
                "config": "false",
                "description": "Current upgrade status."
            },
            "alias-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "pattern": [
                    "[A-Za-z0-9_\\-/,\\.]*"
                ],
                "description": "User defined alias for this entity. Must be an alphanumeric string with dash or underscore."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "traffic-affecting": {
                    "when": ". = 'lock'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "enable-serdes": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Controls enabling/disabling of configuring TOM SerDes.",
                "when": "$is-generic-subtype"
            },
            "serdes": "list"
        },
        "serdes": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "tom": {
                                        "serdes": {
                                            "name": ""
                                        }
                                    },
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "when": "../enable-serdes = 'true'",
                "key": "name",
                "description": "The user configured (or overridden) set of serializer/desserializer.",
                "discover-values": "/ne/equipment/card/port/tom[enable-serdes = true()]",
                "user-class": "-w:NA,NE -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Name of the advanced parameter.",
                "discover-values": "seq($tom-ap-list)"
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "mandatory": "true",
                "description": "Value of the advanced parameter."
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "set": {
                            "value": "10",
                            "description": "Parameter set."
                        }
                    },
                    {
                        "unknown": {
                            "value": "20",
                            "description": "Parameter unknown."
                        }
                    },
                    {
                        "in-progress": {
                            "value": "30",
                            "description": "Parameter in progress."
                        }
                    },
                    {
                        "failed": {
                            "value": "40",
                            "description": "Parameter failed."
                        }
                    },
                    {
                        "not-supported": {
                            "value": "50",
                            "description": "Parameter not supported."
                        }
                    }
                ],
                "default": "unknown",
                "config": "false",
                "description": "State of the advanced parameter (as observable on the system) once it is configured."
            }
        },
        "usb": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "usb": {},
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "config": "false",
                "description": "Represents the USB function of this port.",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "storage": {
                            "value": "1",
                            "description": "USB port can be used for file storage, and supports associated file management operations."
                        }
                    },
                    {
                        "power-supply": {
                            "value": "2",
                            "description": "USB port can be used to power additional external equipment (for example, passive shelves)."
                        }
                    }
                ],
                "description": "The role that this usb port has.",
                "config": "false"
            },
            "present": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Describes the presence state of the USB connector.",
                "config": "false"
            },
            "available-space": {
                "yangType": "leaf",
                "when": "../type = 'storage' and ../present = 'true'",
                "type": "uint16",
                "units": "MB",
                "description": "The current available storage space in the file-system associated with this USB port.",
                "config": "false"
            },
            "total-space": {
                "yangType": "leaf",
                "when": "../type = 'storage' and ../present = 'true'",
                "type": "uint16",
                "units": "MB",
                "description": "The total storage space available in the file-system associated with this USB port.",
                "config": "false"
            },
            "usb-path": {
                "yangType": "leaf",
                "when": "../type = 'storage' and ../present = 'true'",
                "type": "string",
                "length": "0..32",
                "description": "Local filesystem path on where this USB file-system is mounted; this can be used as a target/source for file transfer operations.",
                "config": "false"
            }
        },
        "comm-eth": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "comm-eth": {},
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "Communication ethernet port.",
                "notify": "all-true",
                "system-managed": "true",
                "show": "./* | ../admin-state | ../oper-state",
                "edit-condition": {
                    "error-message": "Invalid Ethernet parameter: unknown.",
                    "description": "The 'unknown' value is for output only.  It cannot be configured.",
                    "value": "not(./duplex-mode  = 'unknown') and\n                                        not(./flow-control = 'unknown')"
                },
                "user-class": "-w:NA,NE -r:*"
            },
            "auto-negotiation": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Auto negotiation mode."
            },
            "mtu": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1280..1500",
                "units": "octets",
                "default": "1500",
                "description": "The maximum transmission unit size in octets for the physical Ethernet port."
            },
            "duplex-mode": {
                "yangType": "leaf",
                "when": "../auto-negotiation = 'disabled'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "description": "Link is currently disconnected or initializing."
                        }
                    },
                    {
                        "full": {
                            "description": "Full duplex."
                        }
                    },
                    {
                        "half": {
                            "description": "Half duplex."
                        }
                    }
                ],
                "description": "Duplex mode; only valid if auto-negotiation is disabled.",
                "default": "full",
                "edit-condition": {
                    "error-message": "Half duplex cannot be configured.",
                    "value": "if ($chassis-type = 'G31') then \n                                                    . =  'full' \n                                                else\n                                                    true()"
                }
            },
            "operational-duplex-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "description": "Link is currently disconnected or initializing."
                        }
                    },
                    {
                        "full": {
                            "description": "Full duplex."
                        }
                    },
                    {
                        "half": {
                            "description": "Half duplex."
                        }
                    }
                ],
                "description": "Operational duplex mode.",
                "default": "unknown",
                "config": "false"
            },
            "rate": {
                "yangType": "leaf",
                "when": "../auto-negotiation = 'disabled'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "0"
                        }
                    },
                    {
                        "1": {
                            "value": "1"
                        }
                    },
                    {
                        "10": {
                            "value": "10"
                        }
                    },
                    {
                        "100": {
                            "value": "100"
                        }
                    },
                    {
                        "1000": {
                            "value": "1000"
                        }
                    },
                    {
                        "10000": {
                            "value": "10000"
                        }
                    },
                    {
                        "maximum": {
                            "value": "2147483647"
                        }
                    }
                ],
                "units": "Mbit/s",
                "description": "Required Ethernet rate; only valid if auto-negotiation is disabled.",
                "default": "maximum",
                "edit-condition": [
                    {
                        "error-message": "This port does not support 10Mb/s.",
                        "value": "not($chassis-type = 'G31' and \n                                                    (contains(../../name, 'ETH1') or\n                                                     contains(../../name, 'ETH4')) and\n                                                    . = 10)"
                    },
                    {
                        "error-message": "Invalid rate: unknown.",
                        "description": "The 'unknown' value is for output only.  It cannot be configured.",
                        "value": ". != 'unknown'"
                    },
                    {
                        "error-message": "This rate cannot be configured.",
                        "description": "These rates can only be activated by auto-negotiation.",
                        "value": "not(. = ('1000', '10000'))"
                    }
                ]
            },
            "operational-rate": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "0"
                        }
                    },
                    {
                        "1": {
                            "value": "1"
                        }
                    },
                    {
                        "10": {
                            "value": "10"
                        }
                    },
                    {
                        "100": {
                            "value": "100"
                        }
                    },
                    {
                        "1000": {
                            "value": "1000"
                        }
                    },
                    {
                        "10000": {
                            "value": "10000"
                        }
                    },
                    {
                        "maximum": {
                            "value": "2147483647"
                        }
                    }
                ],
                "units": "Mbit/s",
                "description": "Operational Ethernet rate.",
                "default": "unknown",
                "config": "false"
            },
            "flow-control": {
                "yangType": "leaf",
                "when": "../auto-negotiation = 'disabled'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "description": "Link is currently disconnected or initializing."
                        }
                    },
                    {
                        "disabled": {
                            "description": "No pause frames are supported."
                        }
                    },
                    {
                        "bi-directional": {
                            "description": "Symmetric flow (transmit and receive)."
                        }
                    },
                    {
                        "egress-only": {
                            "description": "Transmit direction only."
                        }
                    },
                    {
                        "ingress-only": {
                            "description": "Receive direction only."
                        }
                    }
                ],
                "description": "Specifies the type of flow control to be supported.",
                "default": "disabled",
                "edit-condition": {
                    "error-message": "Flow control cannot be configured.",
                    "value": "if ($chassis-type = 'G31') then \n                                                    . =  'disabled'\n                                                else\n                                                    true()"
                }
            },
            "operational-flow-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "description": "Link is currently disconnected or initializing."
                        }
                    },
                    {
                        "disabled": {
                            "description": "No pause frames are supported."
                        }
                    },
                    {
                        "bi-directional": {
                            "description": "Symmetric flow (transmit and receive)."
                        }
                    },
                    {
                        "egress-only": {
                            "description": "Transmit direction only."
                        }
                    },
                    {
                        "ingress-only": {
                            "description": "Receive direction only."
                        }
                    }
                ],
                "description": "Operational flow control.",
                "default": "unknown",
                "config": "false"
            },
            "redundancy-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "No redundancy."
                        }
                    },
                    {
                        "active": {
                            "value": "1",
                            "description": "Port is active."
                        }
                    },
                    {
                        "standby": {
                            "value": "2",
                            "description": "Port is on standby."
                        }
                    }
                ],
                "default": "none",
                "config": "false",
                "description": "Redundancy state of the comm port.",
                "when": "not($chassis-type = 'G31')"
            },
            "mac-address": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}"
                ],
                "description": "MAC Address of the port.",
                "default": "00:00:00:00:00:00",
                "config": "false"
            }
        },
        "port.inventory": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "inventory": {},
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "config": "false",
                "description": "Inventory data for a present FRU.",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "hardware-version": {
                "yangType": "leaf",
                "type": "string",
                "description": "Hardware version of this FRU.",
                "config": "false"
            },
            "actual-type": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU type of actual equipment.",
                "config": "false"
            },
            "actual-subtype": {
                "yangType": "leaf",
                "type": "string",
                "description": "FRU subtype of actual equipment - only available if applicable.",
                "when": ". != ''",
                "config": "false"
            },
            "sw-support-revision": {
                "yangType": "leaf",
                "type": "uint16",
                "default": "0",
                "config": "false",
                "description": "Software revision currently installed."
            },
            "PON": {
                "yangType": "leaf",
                "type": "string",
                "description": "Current PON of the equipment.",
                "config": "false"
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Serial number of the equipment.",
                "config": "false"
            },
            "clei": {
                "yangType": "leaf",
                "type": "string",
                "description": "Common Language Equipment Identifier.",
                "config": "false"
            },
            "vendor": {
                "yangType": "leaf",
                "type": "string",
                "description": "Vendor of this equipment.",
                "config": "false"
            },
            "part-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Part number for this equipment.",
                "config": "false"
            },
            "manufacture-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Manufacture Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "insertion-date": {
                "yangType": "leaf",
                "type": "string",
                "description": "Insertion Date in a date-time format (YYYY-MM-DDThh:mm:ssZ) or 'NA' if not available.",
                "config": "false"
            },
            "number-of-lanes": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "When applicatible, provides number of supported optical lanes in this equipment.",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0",
                            "description": "Card doesn't have upgradable firmware."
                        }
                    },
                    {
                        "current": {
                            "value": "1",
                            "description": "All components have current firmware."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "At least one component does not have current firmare."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on all firmware status is currently unavailable."
                        }
                    }
                ],
                "default": "not-applicable",
                "description": "Summary status for all the firmware for this card.",
                "when": "name(..) = 'port'",
                "config": "false"
            },
            "current-fw": "list"
        },
        "port.inventory.current-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "port": {
                                    "inventory": {
                                        "current-fw": {
                                            "fw-name": ""
                                        }
                                    },
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "fw-name",
                "description": "List of current firmware available in the card.",
                "config": "false",
                "user-class": "-w:NA,NE -r:*"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Current version of the firmware.",
                "config": "false"
            },
            "expected-fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Expected version of the firmware.",
                "when": "name(../..) = 'port'",
                "config": "false"
            },
            "fw-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "current": {
                            "value": "1",
                            "description": "Current firmware is up-to-date."
                        }
                    },
                    {
                        "not-current": {
                            "value": "2",
                            "description": "Current firmware is not up-to-date against the expected one."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "3",
                            "description": "Information on firmware status is currently unavailable."
                        }
                    }
                ],
                "description": "Status for this particular firmware.",
                "when": "name(../..) = 'port'",
                "config": "false"
            }
        },
        "console": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "console": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "Parameters associated with this card's serial console port.",
                "system-managed": "true",
                "user-class": "-w:NA,NE -r:*"
            },
            "baud-rate": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "9600": {
                            "value": "6"
                        }
                    },
                    {
                        "19200": {
                            "value": "7"
                        }
                    },
                    {
                        "38400": {
                            "value": "8"
                        }
                    },
                    {
                        "57600": {
                            "value": "11"
                        }
                    },
                    {
                        "115200": {
                            "value": "12"
                        }
                    }
                ],
                "units": "baud",
                "description": "The baud rate of console port that is supported by the system.",
                "default": "9600"
            },
            "local-switch": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "use-global-switch": {
                            "value": "6",
                            "description": "Console switch is using the global switch configuration."
                        }
                    },
                    {
                        "force-enable": {
                            "value": "7",
                            "description": "Console switch is enabled."
                        }
                    },
                    {
                        "force-disable": {
                            "value": "8",
                            "description": "Console switch is disabled."
                        }
                    }
                ],
                "default": "use-global-switch",
                "description": "Defines the global access to all card's console port. Access can be overridden per console port at the card level."
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Current status of the console for this card.",
                "config": "false",
                "persistency": "true"
            }
        },
        "resources": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "resources": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/optical-common",
                "config": "false",
                "description": "Resources of this particular card. Resource details will differ with each card type.",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "supported-carriers": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "description": "Names of the carriers that are supported by this card.\n                             To be used upon super-channel creation.",
                "config": "false"
            },
            "unassigned-carriers": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "description": "Names of the carriers that are not yet assigned to a super-channel in this card.",
                "config": "false"
            },
            "supported-sub-components": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "description": "Names of sub-components present in this card, which can be addressed for certain operations like restart.",
                "config": "false"
            }
        },
        "capabilities": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "capabilities": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/optical-common",
                "config": "false",
                "description": "Generic card capabilities. Capabilities details will differ with each card type.",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "supported-advanced-parameter": "list",
            "supported-carrier-mode": "list"
        },
        "supported-advanced-parameter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "capabilities": {
                                    "supported-advanced-parameter": {
                                        "name": ""
                                    }
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "name",
                "config": "false",
                "description": "A set of all optical carrier advanced parameters discovered from the equipment.",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:NA,NE -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "A human readable description of this advanced parameter.",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "The name of the advanced parameter.",
                "config": "false"
            },
            "type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Indicates the data type of the advanced parameter.",
                "config": "false"
            },
            "supported-values": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "This list indicates the possible values that this parameter can take as input. It is a list of ranges. \n                            E.g.'1-4, 10-14' indicating two ranges from 1 to 4 and 10 to 14. Or it could be a list of discrete \n                            numbers like '10, 20, 30, 40'. Spaces are optional.",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "transmit": {
                            "value": "10"
                        }
                    },
                    {
                        "receive": {
                            "value": "20"
                        }
                    },
                    {
                        "transmit-and-receive": {
                            "value": "30"
                        }
                    }
                ],
                "description": "Advanced parameter is applicable to the specified direction.",
                "config": "false"
            },
            "multiplicity": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Identifies number of values user need to enter for this advanced parameter. \n                            Same range or allowed-values will apply for each entry.",
                "config": "false"
            },
            "configuration-impact": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "no-change": {
                            "value": "10"
                        }
                    },
                    {
                        "no-reacquire": {
                            "value": "20"
                        }
                    },
                    {
                        "reacquire": {
                            "value": "30"
                        }
                    },
                    {
                        "full-config-pll-change": {
                            "value": "40"
                        }
                    },
                    {
                        "full-config-no-pll-change": {
                            "value": "50"
                        }
                    }
                ],
                "config": "false",
                "description": "Identifies the configuration steps to apply the change."
            },
            "service-impact": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "service-affecting": {
                            "value": "10"
                        }
                    },
                    {
                        "non-service-affecting": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "Identifies if applying this parameter change causes service impact. If it is service impacting, user must perform admin lock/maintenance/ToDO operation."
            }
        },
        "supported-carrier-mode": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "card": {
                                "capabilities": {
                                    "supported-carrier-mode": {
                                        "carrier-mode": ""
                                    }
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "carrier-mode",
                "config": "false",
                "description": "List of supported carrier modes.",
                "persistency": "all-true",
                "notify": "all-true",
                "access-condition": "status = ('supported','candidate','deprecated')",
                "user-class": "-w:NA,NE -r:*"
            },
            "carrier-mode": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "An acronymized code (handle) that is indicative of the optical carrier line mode (4-tuple) combination. \n                         The format is as follows:\n                            <Capacity><ClientMode>.<Baud Rate><Application ID>\n                         Examples:\n                            - 600E.84P\n                            - 100X.73U\n                            - 325M.66P",
                "config": "false"
            },
            "capacity": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "Gbps",
                "config": "false",
                "description": "The net capacity of the optical carrier."
            },
            "client-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ethernet": {
                            "value": "10"
                        }
                    },
                    {
                        "ethernet-otn": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "This indicates digital client modes of the signal\n                         that is mapped into, and transported by the carriers within this\n                         superchannel."
            },
            "baud-rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "7",
                "units": "GBaud",
                "config": "false",
                "description": "The modulated symbol rate."
            },
            "application": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "The optical transport application ID this mode is optimized for.",
                "config": "false"
            },
            "compatibility-id": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "Identifies the compatible carrier modes that can be applied simultaneously",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "supported": {
                            "value": "1"
                        }
                    },
                    {
                        "candidate": {
                            "value": "2"
                        }
                    },
                    {
                        "experimental": {
                            "value": "3"
                        }
                    },
                    {
                        "deprecated": {
                            "value": "4"
                        }
                    },
                    {
                        "diagnostic": {
                            "value": "5"
                        }
                    }
                ],
                "description": "Describes carrier mode release status.",
                "config": "false"
            }
        },
        "leds": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "leds": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "config": "false",
                "description": "Container of all equipment LEDs.",
                "persistency": "true",
                "user-class": "-w:NA,NE -r:*"
            },
            "led": "list"
        },
        "led": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "leds": {
                                "led": {
                                    "location": "",
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "key": "location name",
                "description": "Representation of a LED in a FRU.\n                        Object exists even if FRU is not physically present.",
                "persistency": "true",
                "logical-parent-type": "port",
                "config": "false",
                "user-class": "-w:NA,NE -r:*"
            },
            "location": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "description": "AID of equipment location of the LED (may be a chassis, card or a port AID).",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..16",
                "description": "Name of the LED within the FRU.",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-available": {
                            "value": "0",
                            "description": "LED status not available."
                        }
                    },
                    {
                        "off": {
                            "value": "1",
                            "description": "LED is turned off and has no color."
                        }
                    },
                    {
                        "yellow": {
                            "value": "2",
                            "description": "LED is turned on with yellow color."
                        }
                    },
                    {
                        "flashing-yellow": {
                            "value": "3",
                            "description": "LED is flashing, alternating between off and yellow color."
                        }
                    },
                    {
                        "green": {
                            "value": "4",
                            "description": "LED is turned on with green color."
                        }
                    },
                    {
                        "flashing-green": {
                            "value": "5",
                            "description": "LED is flashing, alternating between off and green color."
                        }
                    },
                    {
                        "red": {
                            "value": "6",
                            "description": "LED is turned on with red color."
                        }
                    },
                    {
                        "flashing-red": {
                            "value": "7",
                            "description": "LED is flashing, alternating between off and red color."
                        }
                    },
                    {
                        "cycling-with-off": {
                            "value": "8",
                            "description": "LED is cycling between all supported colors, including off state."
                        }
                    },
                    {
                        "cycling": {
                            "value": "9",
                            "description": "LED is cycling between all supported colors (excluding off state) - used for lamp test."
                        }
                    },
                    {
                        "amber": {
                            "value": "10",
                            "description": "LED is turned on with amber color."
                        }
                    },
                    {
                        "flashing-amber": {
                            "value": "11",
                            "description": "LED is flashing, alternating between off and amber color."
                        }
                    }
                ],
                "default": "not-available",
                "description": "Current color status of the LED.",
                "config": "false"
            }
        },
        "equipment-policies": {
            "definition": {
                "jpath": {
                    "ne": {
                        "equipment": {
                            "equipment-policies": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/equipment",
                "description": "Container with all existing equipment policies.",
                "system-managed": "true",
                "user-class": "-w:NA,NE -r:*"
            },
            "tom-auto-migration": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Enables automatic update of tom subtype based on present equipment.\nThis update may have direct impact on existing configurations.\nNote: this has impact on tom subtype migration, but not for tom type migration (e.g. no update between QSFPDD and QSFP28)."
            }
        },
        "facilities": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/facilities",
                "description": "The top-level facility root node under which all other facilities are present.",
                "user-class": "-w:NA,PR,TT -r:*",
                "system-managed": "true"
            },
            "super-channel-group": "list",
            "super-channel": "list",
            "optical-carrier": "list",
            "optical-channel": "list",
            "otu": "list",
            "odu": "list",
            "ethernet": "list",
            "trib-ptp": "list",
            "comm-channel": "list",
            "line-ptp": "list",
            "flexo": "list",
            "flexo-group": "list",
            "eth-zr": "list",
            "oc": "list",
            "stm": "list"
        },
        "super-channel-group": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "super-channel-group": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/scg",
                "key": "name",
                "description": "Super-channel Group facility.",
                "system-managed": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "auto-in-service-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Auto-in-service switch for this facility."
            },
            "valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..7200",
                "units": "minutes",
                "description": "Configurable time that represents a detection of a valid signal.\n                         Used for auto-in-service mechanism.",
                "default": "480"
            },
            "remaining-valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..7200",
                "units": "minutes",
                "description": "Actual remaining time for this facility to be automatically enabled by the\n                         auto-in-service mechanism.",
                "config": "false"
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "line-system-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "openwave": {
                            "value": "1",
                            "description": "Infinera WDM channels over non-Infinera line system."
                        }
                    }
                ],
                "default": "openwave",
                "description": "Indicates the specific mode of power control configured\n                             on the L1 transponder, and specifically, on this particular SCG port within\n                             the L1 transponder. The attribute indicates the L1 <-> L0 local power controls\n                             to adjust the Tx power from the L1 transponder towards the L0 line-system\n                             card (such as a WSS or Mux or Amplifier)."
            },
            "openwave-contention-check": {
                "yangType": "leaf",
                "when": "../line-system-mode = 'openwave'",
                "type": "boolean",
                "default": "false",
                "description": "Enables DNA assisted contention control mechanism in openwave mode."
            },
            "expected-total-tx-power": {
                "yangType": "leaf",
                "when": "../line-system-mode = 'openwave'",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "Theoretical total TX power at Front Panel calculated based on per carrier Target TX power value.",
                "default": "-55.0",
                "config": "false"
            }
        },
        "super-channel": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "super-channel": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/sch",
                "key": "name",
                "description": "Unified channel of optical carriers. Can have many optical channels.",
                "system-managed": "true",
                "create-condition": {
                    "error-message": "access denied",
                    "value": "not($is-TT)"
                },
                "delete-condition": {
                    "error-message": "access denied",
                    "value": "not($is-TT)"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "carriers": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "min-elements": "1",
                "description": "A list of carriers that are bound to this superchannel.\n                             Possible values can be any card/resources/supported-carriers."
            },
            "carrier-mode": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "An acronymized code (handle) that is indicative of the optical carrier line mode (4-tuple) combination. \n                         The format is as follows:\n                            <Capacity><ClientMode>.<Baud Rate><Application ID>\n                         Examples:\n                            - 600E.84P\n                            - 100X.73U\n                            - 325M.66P",
                "mandatory": "true"
            },
            "capacity": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "Gbps",
                "config": "false",
                "description": "The net capacity of the optical carrier."
            },
            "client-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ethernet": {
                            "value": "10"
                        }
                    },
                    {
                        "ethernet-otn": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "This indicates digital client modes of the signal\n                         that is mapped into, and transported by the carriers within this\n                         superchannel."
            },
            "baud-rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "7",
                "units": "GBaud",
                "config": "false",
                "description": "The modulated symbol rate."
            },
            "application": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "The optical transport application ID this mode is optimized for.",
                "config": "false"
            },
            "spectral-bandwidth": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "5",
                "units": "GHz",
                "config": "false",
                "description": "Spectral bandwith associated with this carrier(s)."
            },
            "contention-check-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "pending": {
                            "value": "1",
                            "description": "Contention check is pending on DNA side."
                        }
                    },
                    {
                        "success": {
                            "value": "2",
                            "description": "Successful contention validation by DNA."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "Failed contention validation by DNA."
                        }
                    },
                    {
                        "overridden": {
                            "value": "4",
                            "description": "Explict user override of this function."
                        }
                    }
                ],
                "default": "pending",
                "description": "Contention Check state, set via DNA in openwave mode.\n                             Only applicable if openwave-contention-check is enabled at super-channel-group level."
            },
            "digital-trigger-registration": "container"
        },
        "digital-trigger-registration": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "super-channel": {
                                "digital-trigger-registration": {},
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/sch",
                "config": "false",
                "description": "Atttributes related to digital trigger fault registration from line system.",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "neighbor-id": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "/ne/topology/inci/inci-neighbor/neighbor-id",
                "description": "ID of provisioned neighbor. Local reference to the neighbor.",
                "config": "false"
            },
            "remote-node-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Remote NE Name.",
                "config": "false"
            },
            "remote-ne-ip": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "description": "IP address of the remote NE that has registered for DT fault updates. 0.0.0.0 means that no ip is set to remote-ne-ip.",
                "default": "0.0.0.0",
                "config": "false"
            },
            "remote-end-point": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Name of the remote end point that has registered for DT fault updates.",
                "config": "false"
            },
            "local-flow-id": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Flow ID assigned by GX node for this connection.",
                "config": "false"
            },
            "remote-flow-id": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Flow ID received from remote NE.",
                "config": "false"
            },
            "dt-encapsulation": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "gre": {
                            "value": "1",
                            "description": "Digital trigger encapsulation is Generic Routing Encapsulation."
                        }
                    },
                    {
                        "simple-ip": {
                            "value": "2",
                            "description": "Digital trigger encapsulation is Simple IP."
                        }
                    }
                ],
                "default": "gre",
                "description": "Encapsulation option.",
                "config": "false"
            },
            "last-update": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "never": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    }
                ],
                "description": "Time of last fault registration request.",
                "default": "never",
                "config": "false"
            }
        },
        "optical-carrier": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "optical-carrier": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/optical-carrier",
                "key": "name",
                "ordered-by": "system",
                "description": "Optical carrier facility.",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "line-ptp",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "traffic-affecting": {
                    "when": ". = 'lock'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "frequency": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "tunes-out-of-band": {
                                    "value": "1"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint64",
                        "range": "0 | 191275000..196125000",
                        "units": "MHz",
                        "description": "A super set for line and client side carrier frequency, specific sub-range is depend on application. 0 represents a non-initialized frequency."
                    }
                ],
                "description": "The center frequency this carrier is tuned to. Zero means 'not configured'.",
                "units": "MHz",
                "default": "0",
                "edit-condition": {
                    "error-message": "UTM2 carrier frequency must be in range 191.25~196.1THZ",
                    "value": "if (in-utm2(..)) then\r\n                                            . >= 191250000 and . <= 196100000\r\n                                        else true()"
                }
            },
            "frequency-offset": {
                "yangType": "leaf",
                "type": "int16",
                "range": "-6000..6000",
                "units": "MHz",
                "default": "0",
                "description": "A super set range for line and client side carrier, specific sub-range is depend on application. Frequency-offset can be used for bright tuning \n                             of the wavelengths.\n                             Once set, the frequency will slowly change (over 1-10s) without affecting service.",
                "when": "not(in-chm1r(..))"
            },
            "wavelength": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "nm",
                "description": "The wavelength of the optical carrier.",
                "config": "false"
            },
            "tx-power": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "The optical carrier's transmit power into the fiber from the transponder's optics.\n                             NOTE: The accuracy of the Tx Power can be adjusted in steps of 0.5 dBm.",
                "default": "1",
                "edit-condition": [
                    {
                        "error-message": "CHM1R carrier tx-power must be in range -10.00..1.00 dBm",
                        "value": "if (in-chm1r(..)) then \n                                            . >= -10 and . <= 1\n                                        else true()"
                    },
                    {
                        "error-message": "UTM2 carrier tx-power must be in range -15.00..0 dBm",
                        "value": "if (in-utm2(..)) then \r\n                                            . >= -15 and . <= 0\r\n                                        else true()"
                    }
                ]
            },
            "pre-fec-q-sig-deg-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "0|5.60..9.60",
                "units": "dB",
                "default": "6.0",
                "description": "The threshold based on which the PRE-FEC-Q-SIGNAL-DEGRADE alarm is raised. \n                             0 implies threshold crossing alarming disabled.\n                             Specific sub-range is per carrier use-case.",
                "when": "not(in-chm1r(..))"
            },
            "pre-fec-q-sig-deg-hysteresis": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "1",
                "range": "0.1..1.0",
                "units": "dB",
                "default": "0.5",
                "description": "Hysteresis to account for raising of the PRE-FEC-Q-SIGNAL-DEGRADE alarm.",
                "when": "not(in-chm1r(..))"
            },
            "carrier-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ICE6": {
                            "value": "1"
                        }
                    },
                    {
                        "ZR": {
                            "value": "2"
                        }
                    },
                    {
                        "ZR+": {
                            "value": "3"
                        }
                    },
                    {
                        "OTN": {
                            "value": "4"
                        }
                    }
                ],
                "config": "false",
                "description": "Intent is to differentiate the multiple CarierCTPs.",
                "default": "OTN"
            },
            "media-interface": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "400ZR-CFEC-DP-16QAM": {
                            "value": "1"
                        }
                    }
                ],
                "default": "400ZR-CFEC-DP-16QAM",
                "description": "Media interface type of ZR tom.",
                "when": "carrier-type = 'ZR'"
            },
            "capacity": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "Gbps",
                "config": "false",
                "description": "The net capacity of the optical carrier.",
                "when": "carrier-type = 'ZR'"
            },
            "baud-rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "7",
                "units": "GBaud",
                "config": "false",
                "description": "The modulated symbol rate.",
                "when": "carrier-type = 'ZR'"
            },
            "grid-spacing": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100": {
                            "value": "1"
                        }
                    },
                    {
                        "75": {
                            "value": "2"
                        }
                    },
                    {
                        "50": {
                            "value": "3"
                        }
                    },
                    {
                        "33": {
                            "value": "4"
                        }
                    },
                    {
                        "25": {
                            "value": "5"
                        }
                    },
                    {
                        "12.5": {
                            "value": "6"
                        }
                    },
                    {
                        "6.25": {
                            "value": "7"
                        }
                    },
                    {
                        "3.125": {
                            "value": "8"
                        }
                    }
                ],
                "units": "GHz",
                "default": "100",
                "description": "Fixed Grid tunability for new 3rd party TOM.",
                "when": "carrier-type = 'ZR'"
            },
            "spectral-bandwidth": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "5",
                "units": "GHz",
                "config": "false",
                "description": "Spectral bandwith associated with this carrier(s)."
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection."
            },
            "tx-cd": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-211000.00..211000.00",
                "units": "ps/nm",
                "default": "0.0",
                "description": "The configured transmit pre-compensation chromatic dispersion.",
                "when": [
                    "carrier-type != 'ZR'",
                    "not(in-chm1r(..))"
                ]
            },
            "dgd-high-threshold": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "180..350",
                "units": "ps",
                "default": "300",
                "description": "The threshold to raise the DGD-OORH alarm.",
                "when": [
                    "carrier-type != 'ZR'",
                    "not(in-chm1r(..))"
                ]
            },
            "post-fec-q-sig-deg-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "1",
                "range": "12.5..18.0",
                "units": "dB",
                "default": "18",
                "description": "The threshold based on which the POST-FEC-Q-SIGNAL-DEGRADE alarm is raised.",
                "when": [
                    "carrier-type != 'ZR'",
                    "not(in-chm1r(..))"
                ]
            },
            "post-fec-q-sig-deg-hysteresis": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "1",
                "range": "0.1..3.0",
                "units": "dB",
                "default": "2.5",
                "description": "Hysteresis to account for raising of the POST-FEC-Q-SIGNAL-DEGRADE alarm.",
                "when": [
                    "carrier-type != 'ZR'",
                    "not(in-chm1r(..))"
                ]
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "\n                Carried signal basic rate class. \n            ",
                "when": "carrier-type = 'OTN'",
                "edit-condition": {
                    "error-message": "rate cannot be modified in optical-carrier.",
                    "value": "not(in-chm1r(..)) or $is-openroadm"
                }
            },
            "modulation-format": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "DP-QPSK": {
                            "value": "1"
                        }
                    },
                    {
                        "DP-16QAM": {
                            "value": "2"
                        }
                    },
                    {
                        "DP-8QAM": {
                            "value": "3"
                        }
                    },
                    {
                        "BPSK": {
                            "value": "4"
                        }
                    },
                    {
                        "DP-16QAM-E": {
                            "value": "5"
                        }
                    }
                ],
                "description": "\n                Current modulation format.\n            ",
                "when": "carrier-type = 'OTN'",
                "edit-condition": {
                    "error-message": " modulation-format cannot be modified in optical-carrier.",
                    "value": "not(in-chm1r(..)) or $is-openroadm"
                }
            },
            "line-encoding": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "non-differential": {
                            "value": "1"
                        }
                    },
                    {
                        "differential": {
                            "value": "2"
                        }
                    }
                ],
                "default": "non-differential",
                "config": "false",
                "description": "\n                Currently line-encoding mode.\n            ",
                "when": "carrier-type = 'OTN'"
            },
            "actual-frequency": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "tunes-out-of-band": {
                                    "value": "1"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint64",
                        "range": "0 | 191275000..196125000",
                        "units": "MHz",
                        "description": "A super set for line and client side carrier frequency, specific sub-range is depend on application. 0 represents a non-initialized frequency."
                    }
                ],
                "description": "\n                The actual laser frequency.\n                If rx-frequency is 0, it reflects both Rx and Tx frequency for coherent interface.\n            ",
                "units": "MHz",
                "default": "0",
                "config": "false",
                "when": "carrier-type = 'OTN'"
            },
            "rx-frequency": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "tunes-out-of-band": {
                                    "value": "1"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint64",
                        "range": "0 | 191275000..196125000",
                        "units": "MHz",
                        "description": "A super set for line and client side carrier frequency, specific sub-range is depend on application. 0 represents a non-initialized frequency."
                    }
                ],
                "description": "\n                The rx laser frequency. Special for 0 means it is same as tx laser frequency.\n            ",
                "units": "MHz",
                "default": "0",
                "when": "carrier-type = 'OTN'"
            },
            "actual-rx-frequency": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "tunes-out-of-band": {
                                    "value": "1"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint64",
                        "range": "0 | 191275000..196125000",
                        "units": "MHz",
                        "description": "A super set for line and client side carrier frequency, specific sub-range is depend on application. 0 represents a non-initialized frequency."
                    }
                ],
                "description": "\n                The actual rx laser frequency for coherent interface with separating Lo laser from Tx.\n                0 means Lo and Tx share the same laser where 'frequency' attriute will indicate both Tx and Rx.\n            ",
                "units": "MHz",
                "default": "0",
                "config": "false",
                "when": "carrier-type = 'OTN'"
            },
            "rx-attenuation": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "0.0..10.0",
                "units": "dBm",
                "description": "\n                This is to support configurable optical attenuation at receiver side which is based on the hardware capability on the port.\n            ",
                "default": "0.0",
                "when": "carrier-type = 'OTN'"
            },
            "tx-filter-roll-off": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "0.01 .. 1.0",
                "default": "0.2",
                "description": "Transmitter filter roll off factor.",
                "when": "carrier-type = 'OTN'"
            },
            "preemphasis": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Preemphasis of transmitted signal.",
                "when": [
                    "carrier-type = 'OTN'",
                    "not(in-chm1r(..))"
                ]
            },
            "preemphasis-value": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "1",
                "range": "0.7..1.3",
                "default": "1.0",
                "description": "Preemphasis of transmitted signal.",
                "when": [
                    "carrier-type = 'OTN'",
                    "not(in-chm1r(..))"
                ]
            },
            "cd-range-low": {
                "yangType": "leaf",
                "type": "int32",
                "units": "ps/nm",
                "default": "-45000",
                "description": "Low value of chromatic dispersion search range.",
                "when": "carrier-type = 'OTN'",
                "edit-condition": {
                    "error-message": "CD range needs to be larger than or equal to 1000 ps/nm at least. Low value invalid.",
                    "value": "current() <= (../cd-range-high - 1000)"
                }
            },
            "cd-range-high": {
                "yangType": "leaf",
                "type": "int32",
                "units": "ps/nm",
                "default": "45000",
                "description": "high value of chromatic dispersion search range.",
                "when": "carrier-type = 'OTN'",
                "edit-condition": {
                    "error-message": "CD range needs to be larger than or equal to 1000 ps/nm at least. High value invalid",
                    "value": "current() >= (../cd-range-low + 1000)"
                }
            },
            "cd-compensation-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "auto": {
                            "value": "1",
                            "description": "CD auto search by system"
                        }
                    },
                    {
                        "manual": {
                            "value": "2",
                            "description": "CD manual setting by user"
                        }
                    }
                ],
                "default": "auto",
                "description": "chromatic dispersion compensation value source mode.",
                "when": [
                    "carrier-type = 'OTN'",
                    "not(in-chm1r(..))"
                ]
            },
            "cd-compensation-value": {
                "yangType": "leaf",
                "type": "int32",
                "units": "ps/nm",
                "description": "manual chromatic dispersion compensation value",
                "when": [
                    "carrier-type = 'OTN'",
                    "not(in-chm1r(..))"
                ]
            },
            "fast-sop-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Specify if enable fast SOP (state of polarization) change tracking; if enabled, the interface \n                            will tolerate very fast SOP and transient.",
                "when": "carrier-type = 'OTN'"
            },
            "BICHM": {
                "yangType": "leaf",
                "type": "int32",
                "range": "0..127",
                "default": "64",
                "description": "The BICHM (bit interleaved coded hybrid modulation) incremental step in 1/128 bits/symbol added to base modulation bits/symbol for the hybrid modes modulation-format. \n                         0: Base modulation format bits/symbol;\n                         1: 1/128 bits/symbol added to base modulation format bits/symbol;\n                         ...\n                         127: 127/128 bits/symbol added to base modulation format bits/symbol",
                "when": [
                    "carrier-type = 'OTN'",
                    "not(in-chm1r(..))"
                ]
            },
            "propagate-shutdown": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "When the attribute value is set to yes, the transmit laser will\n                be shutdown if the whole service of the direction has signal failure,\n                the function mainly used in regeneration node to propagate signal failure as LOS.",
                "when": "carrier-type = 'OTN'"
            },
            "propagate-shutdown-holdoff-timer": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..2000",
                "units": "milliseconds",
                "default": "0",
                "description": "The hold off time of propagate shutdown.",
                "when": "carrier-type = 'OTN'"
            },
            "enable-advanced-parameters": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Controls enabling/disabling of configuring advanced parameters for this object.",
                "when": "not(in-chm1r(..))"
            },
            "advanced-parameter": "list",
            "current-advanced-parameter": "list"
        },
        "advanced-parameter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "optical-carrier": {
                                "advanced-parameter": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/optical-carrier",
                "when": "../enable-advanced-parameters = 'true'",
                "key": "name",
                "description": "The user configured (or overridden) set of advanced parameters.",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Name of the advanced parameter."
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "mandatory": "true",
                "description": "Value of the advanced parameter."
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "set": {
                            "value": "10",
                            "description": "Parameter set."
                        }
                    },
                    {
                        "unknown": {
                            "value": "20",
                            "description": "Parameter unknown."
                        }
                    },
                    {
                        "in-progress": {
                            "value": "30",
                            "description": "Parameter in progress."
                        }
                    },
                    {
                        "failed": {
                            "value": "40",
                            "description": "Parameter failed."
                        }
                    },
                    {
                        "not-supported": {
                            "value": "50",
                            "description": "Parameter not supported."
                        }
                    }
                ],
                "default": "unknown",
                "config": "false",
                "description": "State of the advanced parameter (as observable on the system) once it is configured."
            }
        },
        "current-advanced-parameter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "optical-carrier": {
                                "current-advanced-parameter": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/common",
                "key": "name",
                "config": "false",
                "description": "The current value for a supported advanced parameter.",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Name of the advanced parameter.",
                "config": "false"
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Value of the advanced parameter.",
                "config": "false"
            }
        },
        "optical-channel": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "optical-channel": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/optical-channel",
                "key": "name",
                "description": "The OCh is a dummy, place-holder object merely\n                existing for the purposes of object model hierarchy. All\n                attributes of OCh are marked as read-only.",
                "system-managed": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            }
        },
        "otu": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "otu": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/otu",
                "key": "name",
                "description": "Facility describing the OTUCn/OTUk according with standard ITU-T G.709.",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "flexo",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "otu-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "OTUCn": {
                            "value": "1",
                            "description": "OTUCn protocol layer."
                        }
                    },
                    {
                        "OTUCni": {
                            "value": "2",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "OTUCni-M": {
                            "value": "3",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "OTU4": {
                            "value": "4",
                            "description": "OTU4 protocol layer."
                        }
                    },
                    {
                        "OTU2": {
                            "value": "5",
                            "description": "OTU2 protocol layer."
                        }
                    },
                    {
                        "OTU2e": {
                            "value": "6",
                            "description": "OTU2e protocol layer."
                        }
                    }
                ],
                "description": "The protocol type of the OTUk/OTUCn client.",
                "config": "false"
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "The speed/rate of the OTUk/OTUCn client interface.",
                "config": "false"
            },
            "otu-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "description": "A system-defined user friendly name for this otu, considering both the type and the rate.\n                             Examples: OTUC4, OTUC5i90"
            },
            "service-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "network-wrapper": {
                            "value": "20",
                            "description": "Map non-OTN signal into ODUs."
                        }
                    },
                    {
                        "adaptation": {
                            "value": "30",
                            "description": "Multiplexing scenarios."
                        }
                    },
                    {
                        "switching": {
                            "value": "40",
                            "description": "Map OTN signal (e.g. OTU) into ODUs."
                        }
                    },
                    {
                        "transport": {
                            "value": "50",
                            "description": "Transport OTN signal (e.g. OTU) into line side ODUs."
                        }
                    }
                ],
                "description": "This attribute is to align with legacy Infinera OTN virtualization attribute (SM). \n                             The 'service mode' attribute indicates the OTUk/OTUCn client's treatment/processing \n                             vis-a-vis the service type (OTN multiplexing, OTU transport, ...)",
                "default": "none",
                "config": "false",
                "when": "not(in-chm1r(..))"
            },
            "service-mode-qualifier": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "10"
                                }
                            },
                            {
                                "mux-demux": {
                                    "value": "20"
                                }
                            },
                            {
                                "nofec": {
                                    "value": "30"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "0..32"
                    }
                ],
                "description": "This attribute is to align with legacy Infinera OTN virtualization attribute (SMQ). \n                             The 'service mode qualifier' attribute further adds to the 'service mode' attribute \n                             to indicate the OTUk/OTUCn client's contained payload vis-a-vis the service type \n                             (OTN multiplexing, OTU transport, ...)",
                "default": "none",
                "config": "false",
                "when": "not(in-chm1r(..))"
            },
            "fec-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "The configured Forward Error Correction (FEC) mode on the OTUk/OTUCn client.",
                "when": "not(in-chm1r(..)) or not(../otu-type = 'OTUCn')",
                "edit-condition": {
                    "error-message": "Not possible to disable fec-mode.",
                    "value": " . = 'enabled'"
                }
            },
            "fec-generation-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "The configured FEC generation mode on the OTUk/OTUCn client towards the far-end receiver.",
                "when": "not(in-chm1r(..)) or not(../otu-type = 'OTUCn')",
                "edit-condition": {
                    "error-message": "Not possible to disable fec-generation-mode.",
                    "value": " . = 'enabled'"
                }
            },
            "fec-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "cfec": {
                            "value": "1"
                        }
                    },
                    {
                        "ofec": {
                            "value": "2"
                        }
                    },
                    {
                        "G709": {
                            "value": "3"
                        }
                    },
                    {
                        "noFEC": {
                            "value": "4"
                        }
                    },
                    {
                        "i4": {
                            "value": "5",
                            "description": "EFEC-I4"
                        }
                    },
                    {
                        "i7": {
                            "value": "6",
                            "description": "EFEC-I7"
                        }
                    },
                    {
                        "sdfec15": {
                            "value": "7",
                            "description": "15% SDFEC-Differential"
                        }
                    },
                    {
                        "sdfec15nd": {
                            "value": "8",
                            "description": "15% SDFEC-Non-Differential"
                        }
                    },
                    {
                        "staircase7": {
                            "value": "9",
                            "description": "7% HDFEC Staircase"
                        }
                    },
                    {
                        "ufec7": {
                            "value": "10",
                            "description": "%7 UFEC"
                        }
                    }
                ],
                "default": "not-applicable",
                "description": "The FEC type",
                "when": "not(in-chm1r(..)) or not(../otu-type = 'OTUCn')",
                "edit-condition": [
                    {
                        "error-message": "fec-type not supported.",
                        "value": "not(in-chm1r(..)) or ((. = 'ofec') and ($my-port/port-type = 'line')) or ((. = ('G709', 'noFEC')) and ($my-port/port-type = 'tributary'))"
                    },
                    {
                        "error-message": "fec-type not supported this OTU.",
                        "value": "((. = ('sdfec15','sdfec15nd','staircase7','ufec7','G709')) and (../otu-type = 'OTU4') and ($my-port/port-type = 'line')) or\r\n                                                   ((. = ('sdfec15nd')) and (../otu-type = 'OTUCn') ) or\r\n                                                   ((. = ('G709', 'noFEC')) and (../otu-type = 'OTU4') and ($my-port/port-type = 'tributary')) or\r\n                                                   ((. = ('G709', 'noFEC','i4','i7')) and (../otu-type  =('OTU2','OTU2e'))) or not(in-utm2(..))"
                    },
                    {
                        "error-message": "Not support i4 and i7 fec typ mix using in port 7,8",
                        "value": "(($my-card/required-type != 'UTM2') or not($my-port/name=('7','8'))) or  \r\n                                                 (((current() != 'i4') or ($card-otu-path[supporting-port=('7','8')]/fec-type != 'i7')) and \r\n                                                 ((current() != 'i7') or ($card-otu-path[supporting-port=('7','8')]/fec-type != 'i4')))"
                    },
                    {
                        "error-message": "Not support i4 and i7 fec typ mix using in port 9,10,11,12",
                        "value": "(($my-card/required-type != 'UTM2') or not($my-port/name=('9','10','11','12'))) or  \r\n                                               (((current() != 'i4') or ($card-otu-path[supporting-port=('9','10','11','12')]/fec-type != 'i7')) and \r\n                                               ((current() != 'i7') or ($card-otu-path[supporting-port=('9','10','11','12')]/fec-type != 'i4')))"
                    },
                    {
                        "error-message": "Not support i4 and i7 fec typ mix using in port 13, 14",
                        "value": "(($my-card/required-type != 'UTM2') or not($my-port/name=('13','14'))) or  \r\n                                                (((current() != 'i4') or ($card-otu-path[supporting-port=('13','14')]/fec-type != 'i7')) and \r\n                                                ((current() != 'i7') or ($card-otu-path[supporting-port=('13','14')]/fec-type != 'i4')))"
                    },
                    {
                        "error-message": "Not support i4 and i7 fec typ mix using in port 15,16,17,18",
                        "value": "(($my-card/required-type != 'UTM2') or not($my-port/name=('15','16','17','18'))) or  \r\n                                                (((current() != 'i4') or ($card-otu-path[supporting-port=('15','16','17','18')]/fec-type != 'i7')) and \r\n                                                ((current() != 'i7') or ($card-otu-path[supporting-port=('15','16','17','18')]/fec-type != 'i4')))"
                    }
                ]
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection."
            },
            "loopback-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "loopback": {
                            "value": "10",
                            "description": "loopback the signal, insert a maintenance signal"
                        }
                    },
                    {
                        "loopback-and-continue": {
                            "value": "20",
                            "description": "loopback the signal, insert a maintenance signal and bridge (continue) the signal downstream"
                        }
                    }
                ],
                "description": "Indicates loopback action for facility or terminal.",
                "when": "not(in-chm1r(..))"
            },
            "otu-diagnostics": "list"
        },
        "otu-diagnostics": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "otu": {
                                "otu-diagnostics": {
                                    "direction": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/otu",
                "key": "direction",
                "description": "Set of attributes associated with OTU diagnostics.Each direction has their own values.",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Diagnostics direction.Can be ingress or egress."
            },
            "monitoring-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unused": {
                            "value": "10"
                        }
                    },
                    {
                        "intrusive": {
                            "value": "20"
                        }
                    },
                    {
                        "non-intrusive": {
                            "value": "30"
                        }
                    },
                    {
                        "limited-non-intrusive": {
                            "value": "40"
                        }
                    }
                ],
                "description": "The monitoring mode on the ODU/OTU client.",
                "default": "intrusive"
            },
            "tti-style": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ITU-T-G709": {
                            "value": "10",
                            "description": "TTI is split into SAPI, DAPI and OPER bytes."
                        }
                    },
                    {
                        "proprietary": {
                            "value": "20",
                            "description": "TTI is a single 64 byte string."
                        }
                    }
                ],
                "default": "ITU-T-G709",
                "description": "The configured mode of the TTI for this OTU/ODU client.",
                "edit-condition": {
                    "error-message": "GX31 only supported for ITU-T-G709.",
                    "value": ". = 'ITU-T-G709' "
                }
            },
            "tti-mismatch-alarm-reporting": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0",
                            "description": "No TTI match checking"
                        }
                    },
                    {
                        "full-64-bytes": {
                            "value": "1",
                            "description": "Compares entire TTI 64 bytes (proprietary style)"
                        }
                    },
                    {
                        "SAPI": {
                            "value": "2",
                            "description": "Comparing SAPI only (ITU style)"
                        }
                    },
                    {
                        "DAPI": {
                            "value": "3",
                            "description": "Comparing DAPI only (ITU style)"
                        }
                    },
                    {
                        "OPER": {
                            "value": "4",
                            "description": "Comparing Operator Specific only (ITU style)"
                        }
                    },
                    {
                        "SAPI_DAPI": {
                            "value": "5",
                            "description": "Comparing SAPI + DAPI (ITU style)"
                        }
                    },
                    {
                        "SAPI_OPER": {
                            "value": "6",
                            "description": "Comparing SAPI + OPER (ITU style)"
                        }
                    },
                    {
                        "DAPI_OPER": {
                            "value": "7",
                            "description": "Comparing DAPI + OPER (ITU style)"
                        }
                    },
                    {
                        "SAPI_DAPI_OPER": {
                            "value": "8",
                            "description": "Comparing SAPI + DAPI + OPER (ITU style)"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Indicates if TTI-Mismatch (TIM) alarm is reported or masked.\n                         If it is to be reported, indicates the criteria based on with the TIM alarm is reported.",
                "edit-condition": {
                    "error-message": "This option is not applicable for the current TTI style.",
                    "value": "if (../tti-style = 'proprietary') then\n                                    . = ('full-64-bytes', 'disabled')\n                                else\n                                    . != 'full-64-bytes'"
                }
            },
            "tx-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Transmit TTI - Sent by this facility to the far-end remote facility.",
                "when": "tti-style = 'proprietary'",
                "default": ""
            },
            "rx-tti": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Receive TTI - Received by this facility from the far-end remote facility.",
                "length": "0..64",
                "config": "false",
                "when": "tti-style = 'proprietary'"
            },
            "rx-tti-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Receive TTI in HEX.",
                "length": "0..130",
                "config": "false",
                "when": "tti-style = 'proprietary'"
            },
            "expected-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Expected TTI - The TTI this facility expects to receive from the far-end remote facility.",
                "default": "",
                "when": "tti-style = 'proprietary'"
            },
            "expected-sapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The expected SAPI (Source Access Point Identifier).",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "expected-dapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The expected DAPI (Destination Access Point Identifier).",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "expected-operator": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..66"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..32"
                    }
                ],
                "description": "The expected operator specific bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-sapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The transmitted SAPI bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-dapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The transmitted DAPI bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-operator": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..66"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..32"
                    }
                ],
                "description": "The transmitted operator specific bytes.",
                "when": "tti-style = 'ITU-T-G709'",
                "default": ""
            },
            "rx-sapi": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received SAPI bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..15",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-sapi-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received SAPI in HEX.",
                "length": "0..32",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "rx-dapi": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received DAPI bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..15",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-dapi-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received DAPI in HEX.",
                "length": "0..32",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "rx-operator": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received operation specific bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..32",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-operator-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received operator in HEX.",
                "length": "0..66",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "tim-act-enabled": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Support configurable TIM action which decide if insert maintenance signal per TIM: enable or disable, default disable"
            },
            "degrade-interval": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "2..10",
                "units": "seconds",
                "default": "7",
                "description": "The consecutive number of 1s intervals with the number of detected block errors exceeding the block error \n                         threshold for each of those seconds for the purposes of SDBER detection."
            },
            "degrade-threshold": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "The threshold in percentage of block errors versus total blocks at which a degrade-interval number of seconds\n                         will be considered degraded for the purposes of SDBER detection.",
                "default": "30"
            }
        },
        "odu": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "odu": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/odu",
                "key": "name",
                "description": "ODUCni/ODUki facility, representing both line side and client side ODUs.\n                         Represents both Infinera proprietary line-side ODUki/ODUCni protocol, as well as ITU standard ODUk/OCUCn protocol\n                         Represents both high order and low order ODUs.",
                "system-managed": {
                    "when": "not($is-openroadm) or not(../class='low-order)"
                },
                "create-condition": [
                    {
                        "error-message": "Creation of LO-ODU requires parent-odu parameter.",
                        "value": "$is-openroadm or newvalue(parent-odu) or class='high-order'"
                    },
                    {
                        "error-message": "trib-port-number is mandatory for lower odu.",
                        "value": "$is-openroadm or newvalue(trib-port-number) or class='high-order'"
                    },
                    {
                        "error-message": "opucn-time-slots is mandatory for lower odu.",
                        "value": "not(in-chm1r(.)) or $is-openroadm or newvalue( opucn-time-slots) or class='high-order'"
                    },
                    {
                        "error-message": "lower odu cannot be created when its parent odu is in xcon.",
                        "value": "if($auto-create-facilities) then\n                                        not(../odu[name=parent-odu] = db-value(//xcon/source)) and not(../odu[name=parent-odu] = db-value(//xcon/destination))\n                                      else true()"
                    }
                ],
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "otu ethernet oc stm",
                "logical-parent": " if (class = 'low-order') then deref(parent-odu) else false()",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "user",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "parent-odu": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../odu/name",
                "description": "For low order ODUs, points to the the parent HO-ODU name.",
                "when": "../class='low-order'",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "lower odu cannot be created as its parent-odu type is not ODUCn.",
                    "value": "$is-openroadm or $ho-odu/odu-type = ('ODUC1', 'ODUC2', 'ODUC3', 'ODUC4','ODU2','ODUCn')"
                }
            },
            "odu-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ODUCn": {
                            "value": "1",
                            "description": "OTUCn protocol layer."
                        }
                    },
                    {
                        "ODUCni": {
                            "value": "2",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "ODUCni-M": {
                            "value": "3",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "ODU4": {
                            "value": "4",
                            "description": "ODU4 protocol layer."
                        }
                    },
                    {
                        "ODU4i": {
                            "value": "5",
                            "description": "Infinera proprietary ODU4i protocol layer."
                        }
                    },
                    {
                        "ODUflexi": {
                            "value": "6",
                            "description": "Infinera proprietary ODUflexi protocol layer."
                        }
                    },
                    {
                        "ODUflex": {
                            "value": "7",
                            "description": "ODU-flex protocol layer."
                        }
                    },
                    {
                        "ODU0": {
                            "value": "8",
                            "description": "ODU0 protocol layer."
                        }
                    },
                    {
                        "ODU1": {
                            "value": "9",
                            "description": "ODU1 protocol layer."
                        }
                    },
                    {
                        "ODU2": {
                            "value": "10",
                            "description": "ODU2 protocol layer."
                        }
                    },
                    {
                        "ODU2e": {
                            "value": "11",
                            "description": "ODU2e protocol layer."
                        }
                    }
                ],
                "description": "The protocol type of the ODUk/ODUCn client.",
                "mandatory": {
                    "when": "../class='low-order'",
                    "value": "true"
                },
                "edit-condition": {
                    "error-message": "Invalid odu-type.",
                    "value": "if($is-openroadm) then\n                                            true()\n                                        else \n                                            if (../class != 'high-order') then \n                                                . = ('ODU4','ODUflex')\n                                            else\n                                                true()"
                },
                "set-on-create-only": "true"
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "The speed/rate of the ODUk/ODUCn client interface.",
                "config": "false"
            },
            "odu-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "config": "false",
                "description": "A system-defined user friendly name for this odu, considering both the type and the rate.\n                             Examples: ODU4, ODUC8i"
            },
            "class": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "high-order": {
                            "value": "10",
                            "description": "Indicates all HO-ODUCn/HO-ODUk entities"
                        }
                    },
                    {
                        "low-order": {
                            "value": "20",
                            "description": "Indicates all LO-ODUCn/LO-ODUk/LO-ODUj entities"
                        }
                    },
                    {
                        "mapped": {
                            "value": "30",
                            "description": "Indicates a mapped non-OTN or OTN client signal, i.e. a terminated ODUk or and adapted ODUk acc. to the functional model."
                        }
                    }
                ],
                "default": "low-order",
                "config": "false",
                "description": "This attribute indicates the class/category of the ODUCn/ODUk entity. \n                             'High order' refers to the top-most ODUCn/ODUk entity that is created by the system. \n                             All other children ODUk/ODUj entites are categorized as 'low order' (i.e., supported \n                             by another high-order ODUCn/ODUk). This attribute is set by the system based on the order \n                             of creation of these entities (system created v/s user created)."
            },
            "service-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "network-wrapper": {
                            "value": "20",
                            "description": "Map non-OTN signal into ODUs."
                        }
                    },
                    {
                        "adaptation": {
                            "value": "30",
                            "description": "Multiplexing scenarios."
                        }
                    },
                    {
                        "switching": {
                            "value": "40",
                            "description": "Map OTN signal (e.g. OTU) into ODUs."
                        }
                    },
                    {
                        "transport": {
                            "value": "50",
                            "description": "Transport OTN signal (e.g. OTU) into line side ODUs."
                        }
                    }
                ],
                "description": "This attribute is to align with legacy Infinera OTN virtualization attribute (SM). \n                             The 'service mode' attribute indicates the ODUk/ODUCn client's treatment/processing \n                             vis-a-vis the service type (OTN multiplexing, OTU transport, ...)",
                "default": "none",
                "config": "false"
            },
            "service-mode-qualifier": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "10"
                                }
                            },
                            {
                                "mux-demux": {
                                    "value": "20"
                                }
                            },
                            {
                                "nofec": {
                                    "value": "30"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "0..32"
                    }
                ],
                "description": "This attribute is to align with legacy Infinera OTN virtualization attribute (SMQ). \n                             The 'service mode qualifier' attribute further adds to the 'service mode' attribute \n                             to indicate the ODUk/ODUCn client's contained payload vis-a-vis the service type \n                             (OTN multiplexing, OTU transport, ...)",
                "default": "none",
                "config": "false"
            },
            "trib-port-number": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "description": "Number of OPUk/OPUCn trib port that are part of this ODUk/ODUCn container.",
                "when": "$ho-odu",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "Trib-port-number already used.",
                        "value": "not(/ne/facilities/odu[parent-odu = ../parent-odu][trib-port-number = . ])"
                    },
                    {
                        "error-message": "Parent-odu must be exits.",
                        "value": "$ho-odu"
                    },
                    {
                        "error-message": "Trib-port-number bigger than the Max trib port.",
                        "value": "current()<=$trib-port-max"
                    }
                ]
            },
            "time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Time slots of the ODU.",
                "when": "not(in-chm1r(..))",
                "no-set-to-default": "true"
            },
            "opucn-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "((([0-9]+(\\.[0-9]+)?)+(\\.\\.([0-9]+(\\.[0-9]+)?))?)(,(([0-9]+(\\.[0-9]+)?)+(\\.\\.([0-9]+(\\.[0-9]+)?))?))*)"
                ],
                "description": "Opucn Time slots of the ODUCn.",
                "when": [
                    "$is-openroadm or ../class='low-order'",
                    "not(in-utm2(..))"
                ],
                "set-on-create-only": "true"
            },
            "instance-id": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "description": "Optional parameter on LO-ODU creation, identifies the ODU within the parent/high-order ODU.\n                             If not provided, it is automatically derived.\n                             Max value depends on capacity of the HO-ODU and of the odu-type.\n                             (ex: for creating an ODU4 in a HO ODUC8, instance can be between 1 and 8)",
                "when": " not(/ne/ne-type = 'G30') "
            },
            "total-time-slots": {
                "yangType": "leaf",
                "when": [
                    "../class = 'high-order'",
                    "../class='high-order' and not($is-trib-odu)",
                    "not ((../odu-type='ODUCn') and (in-utm2(..)))"
                ],
                "type": "uint16",
                "config": "false",
                "description": "Number of OPUk/OPUCn time slots that are part of this ODUk/ODUCn container."
            },
            "available-time-slots": {
                "yangType": "leaf",
                "when": [
                    "../class='high-order'",
                    "../class='high-order' and not($is-trib-odu)",
                    "not ((../odu-type='ODUCn') and (in-utm2(..)))"
                ],
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "A list of all OPUk/OPUCn time-slots that are available for provisioning new services.",
                "config": "false"
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection.",
                "when": " not(/ne/ne-type = 'G30') "
            },
            "loopback-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "loopback": {
                            "value": "10",
                            "description": "loopback the signal, insert a maintenance signal"
                        }
                    },
                    {
                        "loopback-and-continue": {
                            "value": "20",
                            "description": "loopback the signal, insert a maintenance signal and bridge (continue) the signal downstream"
                        }
                    }
                ],
                "description": "Indicates loopback action for facility or terminal.",
                "when": " not(/ne/ne-type = 'G30') "
            },
            "client-defect-indicator": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "local-degraded": {
                            "value": "1"
                        }
                    },
                    {
                        "remote-degraded": {
                            "value": "2"
                        }
                    },
                    {
                        "local-and-remote-degraded": {
                            "value": "3"
                        }
                    },
                    {
                        "none": {
                            "value": "4"
                        }
                    },
                    {
                        "unknown": {
                            "value": "5"
                        }
                    }
                ],
                "default": "none",
                "config": "false",
                "description": "Indicates current defect status on client side.",
                "when": "not(in-chm1r(..))"
            },
            "odu-diagnostics": "list",
            "rx-payload-type": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received payload-type of ODU.",
                "config": "false",
                "when": "$is-openroadm or (../class = ('high-order')) or (not($otn-service) and $fac-port-type = 'tributary')"
            },
            "tx-payload-type": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Transmitter payload-type of ODU",
                "when": "$is-openroadm or (../class = ('high-order')) or (not($otn-service) and $fac-port-type = 'tributary')",
                "default": "if (../odu-type = 'ODUCn') then\n                                    '0x22'\n                                else if (../odu-type = 'ODUflex' and not($fac-port-type = 'line')) then\n                                    '0x32'\n                                else if ($support-fac/tx-mapping-mode = 'GMP') then\n                                    '0x07'\n                                else if ($support-fac/tx-mapping-mode = 'BMP') then\n                                    '0x32'\n                                else\n                                    ''",
                "edit-condition": {
                    "error-message": "Deny changing tx-payload-type.",
                    "value": "if($is-openroadm) then \n                                            true() \n                                   else if (../odu-type = 'ODUCn') then\n                                            . = '0x22'\n                                   else if (../odu-type = 'ODUflex' and not($fac-port-type = 'line')) then\n                                            . = '0x32'\n                                   else if ($support-fac/tx-mapping-mode = 'GMP') then\n                                            . = '0x07'\n                                    else if ($support-fac/tx-mapping-mode = 'BMP') then\n                                            . = '0x32'\n                                    else\n                                        false()"
                }
            },
            "expected-payload-type": {
                "yangType": "leaf-list",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Expected payload-type of ODU",
                "max-elements": "2",
                "when": "$is-openroadm or (../class = ('high-order')) or (not($otn-service) and $fac-port-type = 'tributary')",
                "default": [
                    "if (../odu-type = 'ODUCn') then\n                                    '0x22'\n                                else if (../odu-type = 'ODUflex' and not($fac-port-type = 'line')) then\n                                    '0x32'\n                                else if ($support-fac/tx-mapping-mode = 'GMP') then\n                                    '0x07'\n                                else if ($support-fac/tx-mapping-mode = 'BMP') then\n                                    '0x32'\n                                else\n                                    ''",
                    "if (../odu-type = 'ODUCn') then\n                                    '0x22'\n                                else if (../odu-type = 'ODUflex' and not($fac-port-type = 'line')) then\n                                    '0x32'\n                                else if ($support-fac/tx-mapping-mode = 'GMP') then\n                                    '0x07'\n                                else if ($support-fac/tx-mapping-mode = 'BMP') then\n                                    '0x32'\n                                else\n                                    ''"
                ],
                "edit-condition": {
                    "error-message": "Deny change expected-payload-type.",
                    "value": "if($is-openroadm) then \n                                            true() \n                                   else if (../odu-type = 'ODUCn') then\n                                            . = '0x22'\n                                   else if (../odu-type = 'ODUflex' and not($fac-port-type = 'line')) then\n                                            . = '0x32'\n                                    else if ($support-fac/tx-mapping-mode = 'GMP') then\n                                            . = '0x07'\n                                    else if ($support-fac/tx-mapping-mode = 'BMP') then\n                                            . = '0x32'\n                                    else\n                                        false()"
                }
            },
            "delay-measurement-enable": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "The enable switching of delay-measurement function, when applicable.",
                "when": "(not(($otn-service) and ($my-port/port-type = 'tributary'))) \n                              and (not(../class='low-order'))"
            },
            "msim-config": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Specifies MSIM alarm reporting or not when msi value received not followed G.709 definition.",
                "when": [
                    "not(in-chm1r(..))",
                    "($fac-port-type = 'line' and not($ho-odu))"
                ]
            },
            "client-signal-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "200GBE": {
                            "value": "1"
                        }
                    },
                    {
                        "400GBE": {
                            "value": "2"
                        }
                    }
                ],
                "default": "400GBE",
                "description": "Client signal type for ODUflex  CBR client. \n                            Applied to 200/400 GBE client on CHM1R. \n                            It is set automatically for the client side ODU, \n                            and need to be configured by the user at line side ODUj. \n                            Used for rate matching and bandwidth validation in the odu cross connection.",
                "when": "(../class='low-order') and (../odu-type = 'ODUflex')",
                "edit-condition": {
                    "error-message": "client-signal-type can not be changed.",
                    "value": "$is-openroadm or not(in-chm1r(..)) or . = '400GBE'"
                }
            }
        },
        "odu-diagnostics": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "odu": {
                                "odu-diagnostics": {
                                    "direction": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/odu",
                "key": "direction",
                "description": "Set of attributes associated with ODU diagnostics.Each direction has their own values.",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Diagnostics direction.Can be ingress or egress."
            },
            "monitoring-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unused": {
                            "value": "10"
                        }
                    },
                    {
                        "intrusive": {
                            "value": "20"
                        }
                    },
                    {
                        "non-intrusive": {
                            "value": "30"
                        }
                    },
                    {
                        "limited-non-intrusive": {
                            "value": "40"
                        }
                    }
                ],
                "description": "The monitoring mode on the ODU/OTU client.",
                "default": "intrusive"
            },
            "tti-style": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ITU-T-G709": {
                            "value": "10",
                            "description": "TTI is split into SAPI, DAPI and OPER bytes."
                        }
                    },
                    {
                        "proprietary": {
                            "value": "20",
                            "description": "TTI is a single 64 byte string."
                        }
                    }
                ],
                "default": "ITU-T-G709",
                "description": "The configured mode of the TTI for this OTU/ODU client.",
                "edit-condition": {
                    "error-message": "GX31 only supported for ITU-T-G709.",
                    "value": ". = 'ITU-T-G709' "
                }
            },
            "tti-mismatch-alarm-reporting": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0",
                            "description": "No TTI match checking"
                        }
                    },
                    {
                        "full-64-bytes": {
                            "value": "1",
                            "description": "Compares entire TTI 64 bytes (proprietary style)"
                        }
                    },
                    {
                        "SAPI": {
                            "value": "2",
                            "description": "Comparing SAPI only (ITU style)"
                        }
                    },
                    {
                        "DAPI": {
                            "value": "3",
                            "description": "Comparing DAPI only (ITU style)"
                        }
                    },
                    {
                        "OPER": {
                            "value": "4",
                            "description": "Comparing Operator Specific only (ITU style)"
                        }
                    },
                    {
                        "SAPI_DAPI": {
                            "value": "5",
                            "description": "Comparing SAPI + DAPI (ITU style)"
                        }
                    },
                    {
                        "SAPI_OPER": {
                            "value": "6",
                            "description": "Comparing SAPI + OPER (ITU style)"
                        }
                    },
                    {
                        "DAPI_OPER": {
                            "value": "7",
                            "description": "Comparing DAPI + OPER (ITU style)"
                        }
                    },
                    {
                        "SAPI_DAPI_OPER": {
                            "value": "8",
                            "description": "Comparing SAPI + DAPI + OPER (ITU style)"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Indicates if TTI-Mismatch (TIM) alarm is reported or masked.\n                         If it is to be reported, indicates the criteria based on with the TIM alarm is reported.",
                "edit-condition": {
                    "error-message": "This option is not applicable for the current TTI style.",
                    "value": "if (../tti-style = 'proprietary') then\n                                    . = ('full-64-bytes', 'disabled')\n                                else\n                                    . != 'full-64-bytes'"
                }
            },
            "tx-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Transmit TTI - Sent by this facility to the far-end remote facility.",
                "when": "tti-style = 'proprietary'",
                "default": ""
            },
            "rx-tti": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Receive TTI - Received by this facility from the far-end remote facility.",
                "length": "0..64",
                "config": "false",
                "when": "tti-style = 'proprietary'"
            },
            "rx-tti-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Receive TTI in HEX.",
                "length": "0..130",
                "config": "false",
                "when": "tti-style = 'proprietary'"
            },
            "expected-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Expected TTI - The TTI this facility expects to receive from the far-end remote facility.",
                "default": "",
                "when": "tti-style = 'proprietary'"
            },
            "expected-sapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The expected SAPI (Source Access Point Identifier).",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "expected-dapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The expected DAPI (Destination Access Point Identifier).",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "expected-operator": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..66"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..32"
                    }
                ],
                "description": "The expected operator specific bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-sapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The transmitted SAPI bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-dapi": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..32"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..15"
                    }
                ],
                "description": "The transmitted DAPI bytes.",
                "default": "",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "tx-operator": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..66"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..32"
                    }
                ],
                "description": "The transmitted operator specific bytes.",
                "when": "tti-style = 'ITU-T-G709'",
                "default": ""
            },
            "rx-sapi": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received SAPI bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..15",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-sapi-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received SAPI in HEX.",
                "length": "0..32",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "rx-dapi": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received DAPI bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..15",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-dapi-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received DAPI in HEX.",
                "length": "0..32",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "rx-operator": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The received operation specific bytes as an ASCII string; will not be available if bytes cannot be encoded as a printable string.",
                "length": "0..32",
                "config": "false",
                "when": "tti-style = 'ITU-T-G709'"
            },
            "rx-operator-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Received operator in HEX.",
                "length": "0..66",
                "config": "false",
                "when": [
                    "tti-style = 'ITU-T-G709'",
                    "not(in-utm2(../..))"
                ]
            },
            "tim-act-enabled": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Support configurable TIM action which decide if insert maintenance signal per TIM: enable or disable, default disable"
            },
            "degrade-interval": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "2..10",
                "units": "seconds",
                "default": "7",
                "description": "The consecutive number of 1s intervals with the number of detected block errors exceeding the block error \n                         threshold for each of those seconds for the purposes of SDBER detection."
            },
            "degrade-threshold": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "The threshold in percentage of block errors versus total blocks at which a degrade-interval number of seconds\n                         will be considered degraded for the purposes of SDBER detection.",
                "default": "30"
            },
            "test-signal-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Indicates that test pattern generation is disabled."
                        }
                    },
                    {
                        "PRBS31Q": {
                            "value": "10",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31 quaternary."
                        }
                    },
                    {
                        "PRBS13Q": {
                            "value": "20",
                            "description": "Defined in G.709 OPU PRBS with inverted PN13 quaternary."
                        }
                    },
                    {
                        "scrambled-idles": {
                            "value": "30",
                            "description": "Idle frame defined in 802.3 Clause 82.2.10."
                        }
                    },
                    {
                        "PRBS9": {
                            "value": "40",
                            "description": "Defined in G.709 OPU PRBS with non-inverted PN9."
                        }
                    },
                    {
                        "PRBS31": {
                            "value": "50",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31."
                        }
                    }
                ],
                "default": "none",
                "description": "The type of test pattern that is injected.",
                "edit-condition": {
                    "error-message": "Only PRBS31 test signal type supported for odu.",
                    "value": " newvalue(.) = ('none','PRBS31') "
                }
            },
            "test-signal-direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "The direction of the test signal.",
                "default": "ingress",
                "when": "not(in-chm1r(../..))"
            },
            "test-signal-monitoring": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Monitor the incoming test signals for diagnostics."
            },
            "accepted-trib-port-number": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Received and accepted Tributary Port Number for the LO-ODU entity.",
                "config": "false",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))"
                ]
            },
            "expected-trib-port-number": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "description": "Expected Tributary Port Number for the LO-ODU entity.",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(number(.)=0)",
                    "not(in-utm2(../..))"
                ]
            },
            "accepted-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Received and accepted TS for the LO-ODU entity.",
                "config": "false",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))"
                ]
            },
            "expected-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Expected TS for the LO-ODU entity.",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))"
                ]
            },
            "rx-msi": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "config": "false",
                "description": "Received and accepted MSI values (up to 80), including a valid/invalid indication \n                        (valid if acceptance process successful, invalid if not; when invalid the last accepted MSI set is shown).",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))  or $is-openroadm"
                ]
            },
            "rx-msi-hex": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "config": "false",
                "description": "Received and accepted MSI hex values (up to 80) (if acceptance process was not successful the last accepted MSI set is shown).",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))"
                ]
            },
            "expected-msi": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "config": "false",
                "description": "Expected MSI values (up to 80). For format see rx-msi without valid/invalid flag.\n                         User-friendly representation of expected-msi-hex.",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))  or $is-openroadm"
                ]
            },
            "expected-msi-hex": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "config": "false",
                "description": "Expected MSI hex values (up to 80).",
                "when": [
                    "not(in-chm1r(../..))",
                    "not(in-utm2(../..))"
                ]
            }
        },
        "ethernet": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "ethernet": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ethernet",
                "key": "name",
                "description": "Ethernet facility.",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "trib-ptp",
                "edit-condition": {
                    "error-message": "A minimum of 20% difference between activate and deactivate thresholds is required for FEC-DEGRADE-SER monitoring.",
                    "value": "if (newvalue(fec-degraded-ser-activate-threshold) or newvalue(fec-degraded-ser-deactivate-threshold)) then\n                                        fec-degraded-ser-deactivate-threshold <= 0.8 * fec-degraded-ser-activate-threshold\n                                    else\n                                        true()"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "client-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "ETHERNET-CLIENT",
                "config": "false",
                "description": "The protocol type of the Ethernet client."
            },
            "service-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "network-wrapper": {
                            "value": "20",
                            "description": "Map non-OTN signal into ODUs."
                        }
                    },
                    {
                        "adaptation": {
                            "value": "30",
                            "description": "Multiplexing scenarios."
                        }
                    },
                    {
                        "switching": {
                            "value": "40",
                            "description": "Map OTN signal (e.g. OTU) into ODUs."
                        }
                    },
                    {
                        "transport": {
                            "value": "50",
                            "description": "Transport OTN signal (e.g. OTU) into line side ODUs."
                        }
                    }
                ],
                "description": "Service mode for the ethernet facility.",
                "default": "transport",
                "config": "false",
                "when": "not(in-chm1r(..))"
            },
            "service-mode-qualifier": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "10"
                                }
                            },
                            {
                                "mux-demux": {
                                    "value": "20"
                                }
                            },
                            {
                                "nofec": {
                                    "value": "30"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "0..32"
                    }
                ],
                "description": "Service mode qualifier for the ethernet facility.",
                "default": "none",
                "config": "false",
                "when": "not(in-chm1r(..))"
            },
            "max-packet-length": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1280..18000",
                "units": "octets",
                "default": "1518",
                "description": "Maximum transfer unit for ethernet facility, in octets."
            },
            "speed": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "config": "false",
                "description": "The speed/rate of the Ethernet client interfaces."
            },
            "fec-ability": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "supported": {
                            "value": "10"
                        }
                    },
                    {
                        "not-supported": {
                            "value": "20"
                        }
                    }
                ],
                "default": "supported",
                "config": "false",
                "description": "Indicates the Ethernet client's capability to support FEC (Forward Error Correction)."
            },
            "fec-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "if($is400G or string($current-tom/required-subtype) =\n                                        ('TOM-100G-Q-SR4', 'TOM-100G-Q-PSM4',\n                                        'TOM-100GMR-Q-ER4L',\n                                        'TOM-100G-Q-AOC10','TOM-100G-Q-AOC3','TOM-100GMR-Q-AOC1','TOM-100GMR-Q-AOC5',\n                                        'TOM-100GMR-Q-SR4', 'TOM-100G-Q-CWDM4')) then\n                                     'enabled'\n                                 else \n                                     'disabled'",
                "description": "The configured FEC mode on the Ethernet client. Default is dependent on configured client type.",
                "edit-condition": [
                    {
                        "error-message": "fec-mode cannot be changed for fec-ability is not supported.",
                        "value": "not(fec-ability = 'not-supported' )"
                    },
                    {
                        "error-message": {
                            "value": "fec-mode cannot be $1 for the related tom subtype."
                        },
                        "description": "Fec-mode possible values based on tom subtype.",
                        "value": ". = fec-mode-allowed(string($current-tom/required-subtype))"
                    }
                ]
            },
            "tx-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": ".",
                "description": "The tx mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": [
                    {
                        "error-message": "Invalid tx-mapping-mode for CHM1R card.",
                        "value": "not((in-chm1r(..)) and (. = 'GFP-F'))"
                    },
                    {
                        "error-message": "Invalid tx-mapping-mode for this ethernet.",
                        "description": "If tx-mapping-mode is changed, ensure it matches the same speed.",
                        "value": "if ($is100G and (oldvalue(.) = ('GMP', 'GFP-F','openZR+'))) then\n                                                . = ('GMP','GFP-F', 'openZR+')\n                                        else if ($is400G and (oldvalue(.) = ('BMP', 'openZR+'))) then \n                                                . = ('BMP', 'openZR+')\n                                        else if ((../speed = 10) and (oldvalue(.) = ('BMP', 'GFP-F','GFP-F-extOPU2'))) then \n                                                . = ('BMP', 'GFP-F',  'GFP-F-extOPU2')\n                                        else if ((../speed = 1) and (oldvalue(.) = ('GMP'))) then \n                                                . = ('GMP')\n                                        else true()"
                    },
                    {
                        "error-message": "tx-mapping-mode cannot be switched when the traffic is setup with odu xcon.",
                        "value": "if(../../odu[supporting-card=current()/../supporting-card][supporting-port=seq(current()/../supporting-port)]) then \n                                            not(../../odu[supporting-card=current()/../supporting-card][supporting-port=seq(current()/../supporting-port)] = db-value(//xcon/source)) \n                                        and not(../../odu[supporting-card=current()/../supporting-card][supporting-port=seq(current()/../supporting-port)] = db-value(//xcon/destination))\n                                        else true()"
                    }
                ]
            },
            "expected-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": ".",
                "description": "The expected mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": {
                    "error-message": "Defaults to tx-mapping-mode not allowed to be modfied by the user in the current release.",
                    "value": " newvalue(.) = ../tx-mapping-mode "
                }
            },
            "time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Time slots of the ethernet.",
                "when": "../tx-mapping-mode = 'openZR+'"
            },
            "line-port": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "description": "Specify the line port for the client. Can only be configured when mapping mode is openZR+.",
                "default": "1",
                "when": "../tx-mapping-mode = 'openZR+'",
                "edit-condition": {
                    "error-message": "Invalid line-port for this ethernet facility.",
                    "description": "The line-port's port type should be line.",
                    "value": "$my-card/port[name=.]/port-type = 'line' or . = '1' or . = '2'"
                }
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection.",
                "edit-condition": {
                    "error-message": "Invalid loopback and PRBS combination.",
                    "value": " if (in-chm1r(..)) then\n                                         if (. != 'none') then ../test-signal-type = 'none' else true()\n                                 else true() "
                }
            },
            "loopback-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "loopback": {
                            "value": "10",
                            "description": "loopback the signal, insert a maintenance signal"
                        }
                    },
                    {
                        "loopback-and-continue": {
                            "value": "20",
                            "description": "loopback the signal, insert a maintenance signal and bridge (continue) the signal downstream"
                        }
                    }
                ],
                "description": "Indicates loopback action for facility or terminal.",
                "when": "not(in-chm1r(..))"
            },
            "fec-degraded-ser-monitoring": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Allows to enable monitoring for FEC-DEGRADED-SER alarm.",
                "when": "$is400G"
            },
            "fec-degraded-ser-activate-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "10",
                "range": "0.0000000001..0.0001",
                "units": "averageSER",
                "default": "0.00001",
                "description": "FEC-DEGRADED-SER alarm asserted if average SER, computed over accumulated\n                             FEC symbol errors in the monitoring period exceed this threshold.",
                "when": "$is400G",
                "format": "#.0E#"
            },
            "fec-degraded-ser-deactivate-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "11",
                "range": "0.00000000008..0.00008",
                "units": "averageSER",
                "default": "0.000008",
                "description": "FEC-DEGRADED-SER alarm cleared if average SER, computed over accumulated FEC \n                             symbol errors in the monitoring period is below this threshold.",
                "when": "$is400G",
                "format": "#.0E#"
            },
            "fec-degraded-ser-monitoring-period": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..50",
                "units": "seconds",
                "default": "10",
                "description": "Monitoring period duration over which FEC symbol errors are accumulated for asserting or clearing of FEC-DEGRADED-SER alarm.",
                "when": "$is400G"
            },
            "test-signal-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Indicates that test pattern generation is disabled."
                        }
                    },
                    {
                        "PRBS31Q": {
                            "value": "10",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31 quaternary."
                        }
                    },
                    {
                        "PRBS13Q": {
                            "value": "20",
                            "description": "Defined in G.709 OPU PRBS with inverted PN13 quaternary."
                        }
                    },
                    {
                        "scrambled-idles": {
                            "value": "30",
                            "description": "Idle frame defined in 802.3 Clause 82.2.10."
                        }
                    },
                    {
                        "PRBS9": {
                            "value": "40",
                            "description": "Defined in G.709 OPU PRBS with non-inverted PN9."
                        }
                    },
                    {
                        "PRBS31": {
                            "value": "50",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31."
                        }
                    }
                ],
                "default": "none",
                "description": "The type of test pattern that is injected.",
                "edit-condition": [
                    {
                        "error-message": "Invalid loopback and PRBS combination.",
                        "value": " if (in-chm1r(..)) then\n                                     if (. != 'none') then ../loopback = 'none' else true()\n                                 else true() "
                    },
                    {
                        "error-message": "The test-signal-type is not supported in ethernet.",
                        "value": " newvalue(.) = ('none','scrambled-idles') "
                    }
                ]
            },
            "test-signal-direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "The direction of the test signal.",
                "default": "egress",
                "edit-condition": {
                    "error-message": "The test-signal-direction is not supported in ethernet.",
                    "value": " newvalue(.) = ('egress') "
                }
            },
            "test-signal-monitoring": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Monitor the incoming test signals for diagnostics."
            },
            "lldp-admin-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "tx-only": {
                            "value": "1",
                            "description": "LLDP agent transmits LLDP frames on this port but it does not store connected remote system information."
                        }
                    },
                    {
                        "rx-only": {
                            "value": "2",
                            "description": "LLDP agent receives, but it does not transmit LLDP frames on this port."
                        }
                    },
                    {
                        "tx-and-rx": {
                            "value": "3",
                            "description": "LLDP agent transmits and receives LLDP frames on this port."
                        }
                    },
                    {
                        "disabled": {
                            "value": "4",
                            "description": "LLDP agent does not transmit or receive LLDP frames on this port."
                        }
                    }
                ],
                "default": "disabled",
                "description": "LLDP operational mode for this port.",
                "edit-condition": {
                    "error-message": "For ethernet facilities, only rx-only lldp mode is supported.",
                    "value": ". = ('rx-only','disabled')"
                }
            },
            "lldp-ingress-mode": {
                "yangType": "leaf",
                "when": "../lldp-admin-status != 'disabled'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "snoop": {
                            "value": "1"
                        }
                    },
                    {
                        "drop": {
                            "value": "2"
                        }
                    },
                    {
                        "snoop-and-drop": {
                            "value": "3"
                        }
                    }
                ],
                "description": "If lldp enabled, define what is the LLDP behavior for this direction.",
                "default": "disabled",
                "edit-condition": {
                    "error-message": "The test-signal-type is not supported in ethernet.",
                    "value": " . = ('snoop', 'disabled')"
                }
            },
            "lldp-egress-mode": {
                "yangType": "leaf",
                "when": [
                    "../lldp-admin-status != 'disabled'",
                    "not(/ne/ne-type = 'G30')"
                ],
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "snoop": {
                            "value": "1"
                        }
                    },
                    {
                        "drop": {
                            "value": "2"
                        }
                    },
                    {
                        "snoop-and-drop": {
                            "value": "3"
                        }
                    }
                ],
                "description": "If lldp enabled, define what is the LLDP behavior for this direction.",
                "default": "disabled"
            }
        },
        "trib-ptp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "trib-ptp": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/trib-ptp",
                "key": "name",
                "description": "Basic TribPTP facility.",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "tom",
                "edit-condition": [
                    {
                        "error-message": "Can't set trib-ptp servce type. Grouped mutual exclusion between 100GBE/OTU4 on port 3 and other client/line mode on port 5, 7 to 12",
                        "value": "($my-card/required-type != 'UTM2') or \r\n                                                    not(((($card-line-ptp[supporting-port='5']/service-type =('OTU2', 'OTU2e')) or \r\n                                                    ($card-trib-ptp[supporting-port='5']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                    (($card-line-ptp[supporting-port='7']/service-type =('OTU2', 'OTU2e')) or\r\n                                                    ($card-trib-ptp[supporting-port='7']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                    (($card-line-ptp[supporting-port='8']/service-type =('OTU2', 'OTU2e')) or \r\n                                                    ($card-trib-ptp[supporting-port='8']/service-type=('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16')))   or\r\n                                                    (($card-line-ptp[supporting-port='9']/service-type =('OTU2', 'OTU2e')) or\r\n                                                    ($card-trib-ptp[supporting-port='9']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                    (($card-line-ptp[supporting-port='10']/service-type =('OTU2', 'OTU2e')) or \r\n                                                    ($card-trib-ptp[supporting-port='10']/service-type = ('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                    (($card-line-ptp[supporting-port='11']/service-type =('OTU2', 'OTU2e')) or\r\n                                                    ($card-trib-ptp[supporting-port='11']/service-type = ('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                    (($card-line-ptp[supporting-port='12']/service-type =('OTU2', 'OTU2e')) or\r\n                                                    ($card-trib-ptp[supporting-port='12']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))))\r\n                                                     and ($card-trib-ptp[supporting-port='3']/service-type  =  ('100GBE', 'OTU4')))"
                    },
                    {
                        "error-message": "Can't set trib-ptp servce type. Grouped mutual exclusion between 100GBE/OTU4 on port 4 and other client/line mode on port 6, 13 to 18",
                        "value": "($my-card/required-type != 'UTM2') or \r\n                                                not(((($card-line-ptp[supporting-port='6']/service-type =('OTU2', 'OTU2e')) or \r\n                                                ($card-trib-ptp[supporting-port='6']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                (($card-line-ptp[supporting-port='13']/service-type =('OTU2', 'OTU2e')) or\r\n                                                ($card-trib-ptp[supporting-port='13']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                (($card-line-ptp[supporting-port='14']/service-type =('OTU2', 'OTU2e')) or \r\n                                                ($card-trib-ptp[supporting-port='14']/service-type=('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16')))   or\r\n                                                (($card-line-ptp[supporting-port='15']/service-type =('OTU2', 'OTU2e')) or\r\n                                                ($card-trib-ptp[supporting-port='15']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                (($card-line-ptp[supporting-port='16']/service-type =('OTU2', 'OTU2e')) or \r\n                                                ($card-trib-ptp[supporting-port='16']/service-type = ('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                (($card-line-ptp[supporting-port='17']/service-type =('OTU2', 'OTU2e')) or\r\n                                                ($card-trib-ptp[supporting-port='17']/service-type = ('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))) or\r\n                                                (($card-line-ptp[supporting-port='18']/service-type =('OTU2', 'OTU2e')) or\r\n                                                ($card-trib-ptp[supporting-port='18']/service-type =('OTU2', 'OTU2e', '10GBE', 'OC192', 'STM64',  '1GBE', 'OC48', 'STM16'))))\r\n                                                 and ($card-trib-ptp[supporting-port='4']/service-type  =  ('100GBE', 'OTU4')))"
                    }
                ],
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "traffic-affecting": {
                    "when": ". = 'lock'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "auto-in-service-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Auto-in-service switch for this facility.",
                "when": "not(//port[AID=current()/../AID]/subport-list)"
            },
            "valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..7200",
                "units": "minutes",
                "description": "Configurable time that represents a detection of a valid signal.\n                         Used for auto-in-service mechanism.",
                "default": "480",
                "when": "not(//port[AID=current()/../AID]/subport-list)"
            },
            "remaining-valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..7200",
                "units": "minutes",
                "description": "Actual remaining time for this facility to be automatically enabled by the\n                         auto-in-service mechanism.",
                "config": "false",
                "when": "not(//port[AID=current()/../AID]/subport-list)"
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "service-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GBE": {
                            "value": "1"
                        }
                    },
                    {
                        "400GBE": {
                            "value": "3"
                        }
                    },
                    {
                        "OTU4": {
                            "value": "4"
                        }
                    },
                    {
                        "4x100GBE": {
                            "value": "5"
                        }
                    },
                    {
                        "OTU2": {
                            "value": "6"
                        }
                    },
                    {
                        "OTU2e": {
                            "value": "7"
                        }
                    },
                    {
                        "1GBE": {
                            "value": "8"
                        }
                    },
                    {
                        "10GBE": {
                            "value": "9"
                        }
                    },
                    {
                        "OC48": {
                            "value": "10"
                        }
                    },
                    {
                        "OC192": {
                            "value": "11"
                        }
                    },
                    {
                        "STM16": {
                            "value": "12"
                        }
                    },
                    {
                        "STM64": {
                            "value": "13"
                        }
                    },
                    {
                        "4x10G": {
                            "value": "14"
                        }
                    },
                    {
                        "4x10GBE": {
                            "value": "15"
                        }
                    },
                    {
                        "not-applicable": {
                            "value": "100"
                        }
                    }
                ],
                "default": "if (get-tom-type($main-tom) ='gx:QSFP28') then\n                                    '100GBE'\n                                 else if (get-tom-type($main-tom) ='gx:QSFPDD') then\n                                    '400GBE'\n                                 else if (get-tom-type($main-tom) ='gx:QSFPPLUS') then\n                                    '10GBE'\n                                 else if (get-tom-type($main-tom) ='gx:SFPPLUS') then\n                                    '10GBE'\n                                 else if (get-tom-type($main-tom) ='gx:SFP') then\n                                    '1GBE'\n                                 else\n                                    '100GBE'",
                "description": "The protocol type of the client that is being transported via the tributary optical transceiver module (TOM).",
                "edit-condition": [
                    {
                        "error-message": "Invalid service-type for this TOM.",
                        "description": "If service-type is changed, ensure it matches the same speed (eg. OTU4 > 100GBE).",
                        "value": "if (oldvalue(.) = ('100GBE','OTU4')) then\n                                       . = ('100GBE', 'OTU4','not-applicable')\n                                   else if((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom)\n                                         ='gx:QSFP28')) then \n                                       . = ('100GBE', 'OTU4') \n                                   else if (oldvalue(.) = '400GBE')  then\n                                       . = ('400GBE','not-applicable')\n                                   else if  ((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom) \n                                         ='gx:QSFPDD')) then\n                                      . = ('400GBE')\n                                   else if (oldvalue(.) =( '10GBE','STM64','OC192','OTU2','OTU2e')) then\n                                      . = ('10GBE','STM64','OC192','OTU2','OTU2e','not-applicable') \n                                   else if ((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom) \n                                       =('gx:QSFPPLUS')) and ($is-subport)) then \n                                      . = ('10GBE','STM64','OC192','OTU2','OTU2e') \n                                   else if ((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom) \n                                       =('gx:SFPPLUS'))) then \n                                      . = ('10GBE','STM64','OC192','OTU2','OTU2e') \n                                   else if (oldvalue(.) = ('1GBE','STM16','OC48')) then\n                                     . = ('1GBE','STM16','OC48','not-applicable') \n                                   else if ((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom) \n                                       ='gx:SFP')) then \n                                      . = ('1GBE','STM16','OC48')\n                                   else if ((oldvalue(.) = 'not-applicable') and (get-tom-type($main-tom) \n                                       ='gx:QSFPPLUS')) then \n                                      . = ('not-applicable') \n                                       else false()"
                    },
                    {
                        "error-message": "Not possible to change service type due to the existence of eth-zr traffic setup.",
                        "value": "if(../../ethernet[name=current()/../name]/tx-mapping-mode = 'openZR+') then\n                                                ../../ethernet[name=current()/../name]/time-slots = '' else\n                                          true()"
                    },
                    {
                        "error-message": "service type cannot be switched when the traffic is setup with odu xcon.",
                        "value": "if(../../odu[supporting-card=current()/../supporting-card][supporting-port=current()/../supporting-port]) then \n                                            not(../../odu[supporting-card=current()/../supporting-card][supporting-port=current()/../supporting-port] = db-value(//xcon/source)) \n                                        and not(../../odu[supporting-card=current()/../supporting-card][supporting-port=current()/../supporting-port] = db-value(//xcon/destination))\n                                        else true()"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Port 3 can't set to 100GBE",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != '100GBE') or ($my-port/name!='3') or\r\n                                                   (($card-trib-ptp[supporting-port='4']/service-type  !=  ('OTU4')) and ( not (( $my-card/port[name='4']/tom/phy-mode ='4x10GE') and ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64')))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Port 3 can't set to OTU4",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU4') or ($my-port/name!='3') or\r\n                                                   not (($card-trib-ptp[supporting-port='4']/service-type = ('100GBE')) or ( $my-card/port[name='4']/tom/phy-mode ='4x10GE'))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Port 4 can't set to 100GBE",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != '100GBE') or ($my-port/name!='4') or\r\n                                                   (($card-trib-ptp[supporting-port='3']/service-type  !=  ('OTU4')) and ( not (( $my-card/port[name='3']/tom/phy-mode ='4x10GE') and ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64')))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Port 4 can't set to OTU4",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU4') or ($my-port/name!='4') or\r\n                                                   not (($card-trib-ptp[supporting-port='3']/service-type = ('100GBE')) or ( $my-card/port[name='3']/tom/phy-mode ='4x10GE'))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 3  can't set to E10GB",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != '10GBE') or ($my-port/name!=('3.1','3.2','3.3','3.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64')) and  ($card-trib-ptp[supporting-port='4']/service-type  !=  ('OTU4'))\r\n                                                   and (( $my-card/port[name='4']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 3  can't set to OTU2",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU2') or ($my-port/name!=('3.1','3.2','3.3','3.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2e', 'OC192', 'STM64', '10GBE')) and not($card-trib-ptp[supporting-port='4']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='4']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2e', 'OC192', 'STM64', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 3  can't set to OTU2e",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU2e') or ($my-port/name!=('3.1','3.2','3.3','3.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OC192', 'STM64', '10GBE')) and not($card-trib-ptp[supporting-port='4']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='4']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OC192', 'STM64', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 3  can't set to STM64",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'STM64') or ($my-port/name!=('3.1','3.2','3.3','3.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE')) and not($card-trib-ptp[supporting-port='4']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='4']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 3  can't set to OC192",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OC192') or ($my-port/name!=('3.1','3.2','3.3','3.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE')) and not($card-trib-ptp[supporting-port='4']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='4']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 4  can't set to E10GB",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != '10GBE') or ($my-port/name!=('4.1','4.2','4.3','4.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64')) and  ($card-trib-ptp[supporting-port='3']/service-type  !=  ('OTU4'))\r\n                                                   and (( $my-card/port[name='3']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', 'OC192', 'STM64'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 4 can't set to OTU2",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU2') or ($my-port/name!=('4.1','4.2','4.3','4.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2e', 'OC192', 'STM64', '10GBE')) and not($card-trib-ptp[supporting-port='3']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='3']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2e', 'OC192', 'STM64', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 4  can't set to OTU2e",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OTU2e') or ($my-port/name!=('4.1','4.2','4.3','4.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OC192', 'STM64', '10GBE')) and not($card-trib-ptp[supporting-port='3']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='3']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OC192', 'STM64', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 4  can't set to STM64",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'STM64') or ($my-port/name!=('4.1','4.2','4.3','4.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE')) and not($card-trib-ptp[supporting-port='3']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='3']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE'))))"
                    },
                    {
                        "error-message": "The port/subport to 3 and 4 must be in the either of the following group: ETH(100G, 10G) | OTU4 | OTU2 | OTU2e | (STM64, OC192)--Subport 4  can't set to OC192",
                        "value": "($my-card/required-type != 'UTM2') or (newvalue(.) != 'OC192') or ($my-port/name!=('4.1','4.2','4.3','4.4')) or\r\n                                                   (not($card-trib-ptp[supporting-port=('4.1','4.2','4.3','4.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE')) and not($card-trib-ptp[supporting-port='3']/service-type  =  ('OTU4', '100GBE'))\r\n                                                   and (( $my-card/port[name='3']/tom/phy-mode !='4x10GE') or not ($card-trib-ptp[supporting-port=('3.1','3.2','3.3','3.4')]/service-type  = ('OTU2', 'OTU2e', '10GBE'))))"
                    }
                ]
            },
            "tributary-disable-action": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "laser-shut-off": {
                            "value": "10"
                        }
                    },
                    {
                        "send-idles": {
                            "value": "20"
                        }
                    },
                    {
                        "send-lf": {
                            "value": "30"
                        }
                    },
                    {
                        "send-ais-l": {
                            "value": "40"
                        }
                    },
                    {
                        "odu-ais": {
                            "value": "50"
                        }
                    },
                    {
                        "none": {
                            "value": "60"
                        }
                    },
                    {
                        "send-gais": {
                            "value": "70"
                        }
                    },
                    {
                        "send-ms-ais": {
                            "value": "80"
                        }
                    },
                    {
                        "e-code": {
                            "value": "90"
                        }
                    }
                ],
                "description": "Tributary Disable Action (TDA) indicates what action the NE performs towards the client equipment \n                             (connected over the TOM) when a line-side failure is observed. This includes shutting off laser \n                             or inserting a appropriate replacement signal.",
                "default": "if (string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3') then\n                                     'send-lf'\n                                else\n                                     'laser-shut-off'",
                "edit-condition": {
                    "error-message": "this value is not applicable.",
                    "value": "if (string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3') then\n                                            . = ('send-idles','send-lf')\n                                        else if ($is-ethernet) then\n                                            . = ('laser-shut-off','send-idles','send-lf')\n                                        else if (../service-type = 'OTU4' and /ne/facilities/otu[name = ../name]/service-mode = 'transport') then\n                                            . = ('laser-shut-off','none')\n                                        else if (../service-type = 'OTU4' and /ne/facilities/otu[name = ../name]/service-mode = 'adaptation') then\n                                            . = ('laser-shut-off','odu-ais','none')\n                                        else true()"
                },
                "when": "not(//port[AID=current()/../AID]/subport-list)"
            },
            "tributary-disable-holdoff-timer": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..10000",
                "units": "milliseconds",
                "default": "0",
                "description": "The hold off time of client shutdown or replacement signal at egress direction. \n                             0 means holdoff functionality disabled",
                "edit-condition": [
                    {
                        "error-message": "CHM1R tributary-disable-holdoff-timer must be in range 0..2000 millisecond",
                        "value": "if (in-chm1r(..)) then \n                                            . >= 0 and . <= 2000\n                                        else true()"
                    },
                    {
                        "error-message": "The value of holdoff-timer is not supported. Values in range 0..2000ms with 50 step are supported. ",
                        "value": "(current() mod 50) = 0"
                    }
                ]
            },
            "near-end-tda": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "The switching of near end TDA."
            },
            "tda-degrade-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "The switching of defect BERSD-ODU trig ALS"
            },
            "forward-defect-trigger": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Forward Defect TDA Trigger indicates on the egress, if NE receives a client forward defect \n                             (e.g., LF, ODU-AIS) whether to let it flow through towards the line side (network side) or \n                             trigger an egress TDA action",
                "when": [
                    "not(in-chm1r(..))",
                    "not(in-utm2(..))",
                    "not(//port[AID=current()/../AID]/subport-list)"
                ]
            },
            "power-threshold-low": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "The default system threshold (known as 'Sensitivity') that triggers the OPR-OORL alarm\n                         (i.e., when the optical power received is below this value). Note that this is hardware dependent,\n                         based on the type of the optical transceiver (TOM).",
                "default": "-55.0",
                "config": "false",
                "when": [
                    "not(string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3')",
                    "not(//port[AID=current()/../AID]/subport-list)"
                ]
            },
            "power-threshold-low-offset": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-10.00..10.00",
                "units": "dB",
                "description": "A user configurable attribute that results in the 'effective lower threshold' based on which\n                         the system raises the OPR-OORL alarm. The effective threshold will be (threshold-low + threshold-low-offset).",
                "default": "0.0",
                "when": [
                    "not(string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3')",
                    "not(//port[AID=current()/../AID]/subport-list)"
                ]
            },
            "power-threshold-high": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "The default system threshold (known as 'Overload') that triggers the OPR-OORH alarm \n                         (i.e., when the optical power received is greater than this value). Note that this is \n                         hardware dependent, based on the type of the optical transceiver (TOM).",
                "default": "-55.0",
                "config": "false",
                "when": [
                    "not(string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3')",
                    "not(//port[AID=current()/../AID]/subport-list)"
                ]
            },
            "power-threshold-high-offset": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-10.00..10.00",
                "units": "dB",
                "description": "A user configurable attribute that results in the 'effective upper threshold' based on \n                         which the system raises the OPR-OORH alarm. The effective threshold will be (threshold-high + threshold-high-offset).",
                "default": "0.0",
                "when": [
                    "not(string($current-tom/required-subtype) = 'TOM-400G-Q-DAC3')",
                    "not(//port[AID=current()/../AID]/subport-list)"
                ]
            }
        },
        "comm-channel": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "comm-channel": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/comm-channel",
                "key": "name",
                "description": "Communication Channel facility.",
                "create-condition": [
                    {
                        "error-message": "Unsupported comm-channel type.",
                        "value": "/ne/equipment/chassis/required-type != 'G31' or type = 'GCC0'"
                    },
                    {
                        "error-message": "Parent object must be configured for GCC comm-channel.",
                        "value": "old(parent)!= newvalue(parent) or type != 'GCC0'"
                    },
                    {
                        "error-message": "parent has been associated with a comm-channel.",
                        "value": "(count(/ne//comm-channel[parent = deref(parent)]) <= 1 and type = 'GCC0') or type != 'GCC0'"
                    },
                    {
                        "error-message": "Only support GCC0 on line side OTU facility.",
                        "value": "(/ne/equipment/card[name=deref(parent)/supporting-card]/port[name=seq(deref(parent)/supporting-port)[1]]/port-type = 'line') or type != 'GCC0'"
                    }
                ],
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "OFEC-CC": {
                            "value": "1",
                            "description": "Control channel available due to Infinera's proprietry optical FEC overhead. \n                                     The rate of OFEC-CC (in case of Gen6) is 17.6 Mbps for each 100G optical carrier capacity. \n                                     For instance, in an 800G optical carrier, the OFEC-CC will be (8 x 17.6 = 140.8 Mbps)."
                        }
                    },
                    {
                        "GCC0": {
                            "value": "2",
                            "description": "GCC0 overhead of OTUk."
                        }
                    }
                ],
                "mandatory": "true",
                "description": "Indicates the type of control channel."
            },
            "bandwidth": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "Mbps",
                "config": "false",
                "description": "Indicates the control channel's bandwidth/capacity. \n                             This is system determined based on the underlying facilities that support this control channel."
            },
            "mtu": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1280..9202",
                "units": "octets",
                "default": "1500",
                "description": "The maximum transmission unit size in octets for comm channel."
            },
            "parent": {
                "yangType": "leaf",
                "when": "../type = 'GCC0'",
                "type": "instance-identifier",
                "description": "Parent object of the comm-channel.",
                "set-on-create-only": "true"
            },
            "fcs-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "16": {
                            "value": "16"
                        }
                    },
                    {
                        "32": {
                            "value": "32"
                        }
                    }
                ],
                "units": "bits",
                "default": "16",
                "config": "false",
                "description": "Specifies whether the Frame Check Sequence(FCS) is a 16-bit or 32-bit value.",
                "when": "type = 'GCC0'"
            },
            "mru": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "64..1500",
                "units": "octets",
                "default": "1500",
                "config": "false",
                "description": "Specifies the MRU(Maximum-Receive-Unit) in the Information and Padding fields.",
                "when": "type = 'GCC0'"
            },
            "restart-timer": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..10",
                "units": "seconds",
                "default": "3",
                "config": "false",
                "description": "Specifies the restart timer of the PPP protocol in seconds.",
                "when": "type = 'GCC0'"
            },
            "max-failure": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "2..10",
                "default": "5",
                "config": "false",
                "description": "Specifies the maximum failure value of the PPP protocol. Max-Failure\n                     indicates the number of Configure-Nak packets sent without sending\n                     a Configure-Ack before assuming that configuration is not converging.\n                     Any further Configure-Nak packets for peer requested options are \n                     converted to Configure-Reject packets, and locally desired options\n                     are no longer appended.",
                "when": "type = 'GCC0'"
            },
            "peer-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?",
                            "[0-9\\.]*"
                        ],
                        "description": "An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?",
                            "[0-9a-fA-F:\\.]*"
                        ],
                        "description": "An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed."
                    }
                ],
                "description": "The IP address on the peer node.",
                "default": "0.0.0.0",
                "config": "false",
                "when": "type = 'GCC0'"
            }
        },
        "line-ptp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "line-ptp": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/line-ptp",
                "key": "name",
                "description": "Basic LinePTP facility.",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "port",
                "edit-condition": [
                    {
                        "error-message": "UTM2 line side maxmum capacity is 200G!",
                        "value": "($my-card/required-type != 'UTM2') or \r\n                                                 not($my-port/name=('1','2')) or \r\n                                                 (not((db-value($current-tom-1)) and ($card-line-ptp[supporting-port='1']/service-type = ('DP-8QAM-200G', 'DP-16QAM-200G')) \r\n                                                 and (db-value($current-tom-2)) and ($card-line-ptp[supporting-port='2']/service-type != 'not-applicable'))\r\n                                                 and not((db-value($current-tom-1)) and ($card-line-ptp[supporting-port='2']/service-type =  ('DP-8QAM-200G', 'DP-16QAM-200G')) \r\n                                                 and (db-value($current-tom-2)) and  ($card-line-ptp[supporting-port='1']/service-type != 'not-applicable')))"
                    },
                    {
                        "error-message": "Can't set line-ptp servce type. Grouped mutual exclusion between 100GBE/OTU4 on port 3 and other client/line mode on port 5, 7 to 12",
                        "value": "($my-card/required-type != 'UTM2') or \r\n                                                  not((($card-line-ptp[supporting-port='5']/service-type =('OTU2', 'OTU2e')) or \r\n                                                  ($card-line-ptp[supporting-port='7']/service-type =('OTU2', 'OTU2e')) or\r\n                                                  ($card-line-ptp[supporting-port='8']/service-type =('OTU2', 'OTU2e')) or \r\n                                                  ($card-line-ptp[supporting-port='9']/service-type =('OTU2', 'OTU2e')) or\r\n                                                  ($card-line-ptp[supporting-port='10']/service-type =('OTU2', 'OTU2e')) or \r\n                                                  ($card-line-ptp[supporting-port='11']/service-type =('OTU2', 'OTU2e')) or\r\n                                                  ($card-line-ptp[supporting-port='12']/service-type =('OTU2', 'OTU2e')))\r\n                                                  and ($card-trib-ptp[supporting-port='3']/service-type  =  ('100GBE', 'OTU4')))"
                    },
                    {
                        "error-message": "Can't set line-ptp servce type. Grouped mutual exclusion between 100GBE/OTU4 on port 4 and other client/line mode on port  6, 13 to 18",
                        "value": "($my-card/required-type != 'UTM2') or \r\n                                                 not((($card-line-ptp[supporting-port='6']/service-type =('OTU2', 'OTU2e')) or \r\n                                                 ($card-line-ptp[supporting-port='13']/service-type =('OTU2', 'OTU2e')) or\r\n                                                 ($card-line-ptp[supporting-port='14']/service-type =('OTU2', 'OTU2e')) or \r\n                                                 ($card-line-ptp[supporting-port='15']/service-type =('OTU2', 'OTU2e')) or\r\n                                                 ($card-line-ptp[supporting-port='16']/service-type =('OTU2', 'OTU2e')) or \r\n                                                 ($card-line-ptp[supporting-port='17']/service-type =('OTU2', 'OTU2e')) or\r\n                                                 ($card-line-ptp[supporting-port='18']/service-type =('OTU2', 'OTU2e')))\r\n                                                 and ($card-trib-ptp[supporting-port='4']/service-type  =  ('100GBE', 'OTU4')))"
                    }
                ],
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "auto-in-service-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Auto-in-service switch for this facility."
            },
            "valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..7200",
                "units": "minutes",
                "description": "Configurable time that represents a detection of a valid signal.\n                         Used for auto-in-service mechanism.",
                "default": "480"
            },
            "remaining-valid-signal-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..7200",
                "units": "minutes",
                "description": "Actual remaining time for this facility to be automatically enabled by the\n                         auto-in-service mechanism.",
                "config": "false"
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "service-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "1"
                        }
                    },
                    {
                        "DP-16QAM-200G": {
                            "value": "2"
                        }
                    },
                    {
                        "DP-QPSK-100G": {
                            "value": "3"
                        }
                    },
                    {
                        "DP-8QAM-200G": {
                            "value": "4"
                        }
                    },
                    {
                        "DP-16QAM-400G": {
                            "value": "7"
                        }
                    },
                    {
                        "DP-8QAM-300G": {
                            "value": "8"
                        }
                    },
                    {
                        "DP-QPSK-200G": {
                            "value": "9"
                        }
                    },
                    {
                        "OTU2": {
                            "value": "10"
                        }
                    },
                    {
                        "OTU2e": {
                            "value": "11"
                        }
                    },
                    {
                        "DP-16QAM-E-400G": {
                            "value": "12"
                        }
                    },
                    {
                        "DP-16QAM-400G-OpenZR+": {
                            "value": "13"
                        }
                    }
                ],
                "default": "not-applicable",
                "description": "service-type to provison line side service.",
                "edit-condition": [
                    {
                        "error-message": "Not possible to update service-type on line-ptp.",
                        "value": "if(not(in-chm1r(..))) then \n                                            true()\n                                    else if(not(/ne/facilities/flexo-group[AID=../AID]) and\n                                              not(/ne/facilities/eth-zr[AID=../AID])) then\n                                            . = ('DP-16QAM-E-400G', 'DP-16QAM-400G','DP-16QAM-400G-OpenZR+','DP-16QAM-200G','DP-8QAM-300G','DP-8QAM-200G','DP-QPSK-200G','DP-QPSK-100G','not-applicable')\n                                    else false()"
                    },
                    {
                        "error-message": "Cannot change service type while LO-ODU/XCONs exist in this Line ptp.",
                        "value": "not(/ne/facilities/odu[supporting-card = current()/../supporting-card]\r\n                                                              [supporting-port = seq(current()/../supporting-port)]\r\n                                                              [class='low-order'])"
                    },
                    {
                        "error-message": "Invalid service-type for this Line ptp .",
                        "description": "If service-type is changed.",
                        "value": "if (oldvalue(.) = ('DP-16QAM-200G','DP-QPSK-100G','DP-8QAM-200G') and in-utm2(..)) then\r\n                                           .= ('DP-16QAM-200G','DP-QPSK-100G','DP-8QAM-200G','not-applicable')\r\n                                        else if (oldvalue(.) =('OTU2','OTU2e') and in-utm2(..)) then \r\n                                           . = ('OTU2', 'OTU2e','not-applicable')\r\n                                        else if (oldvalue(.) =('not-applicable') and in-utm2(..) and  ($my-port/name=('1','2'))) then \r\n                                            . = ('DP-16QAM-200G','DP-QPSK-100G','DP-8QAM-200G')\r\n                                        else if (oldvalue(.) =('not-applicable') and in-utm2(..) and not ($my-port/name=('1','2'))) then \r\n                                           . = ('OTU2', 'OTU2e')\r\n                                        else true()"
                    }
                ],
                "create-condition": {
                    "error-message": "Not possible to change service-type on line-ptp.",
                    "value": "if(not(in-chm1r(..))) then \n                                            true()\n                                    else if(not(/ne/facilities/flexo-group[AID=../AID]) and\n                                              not(/ne/facilities/eth-zr[AID=../AID])) then\n                                            . = ('DP-16QAM-E-400G', 'DP-16QAM-400G','DP-16QAM-400G-OpenZR+','DP-16QAM-200G','DP-8QAM-300G','DP-8QAM-200G','DP-QPSK-200G','DP-QPSK-100G','not-applicable')\n                                    else false()"
                }
            },
            "line-system-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "openwave": {
                            "value": "1",
                            "description": "Infinera WDM channels over non-Infinera line system."
                        }
                    }
                ],
                "default": "openwave",
                "description": "Indicates the specific mode of power control configured\n                             on the L1 transponder, and specifically, on this particular SCG port within\n                             the L1 transponder. The attribute indicates the L1 <-> L0 local power controls\n                             to adjust the Tx power from the L1 transponder towards the L0 line-system\n                             card (such as a WSS or Mux or Amplifier).",
                "when": "not(in-chm1r(..))"
            },
            "power-threshold-low": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "The default system threshold (known as 'Sensitivity') that triggers the OPR-OORL alarm\n                         (i.e., when the optical power received is below this value). Note that this is hardware dependent,\n                         based on the type of the optical transceiver (TOM).",
                "default": "-55.0",
                "config": "false"
            },
            "power-threshold-low-offset": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-10.00..10.00",
                "units": "dB",
                "description": "A user configurable attribute that results in the 'effective lower threshold' based on which\n                         the system raises the OPR-OORL alarm. The effective threshold will be (threshold-low + threshold-low-offset).",
                "default": "0.0"
            },
            "power-threshold-high": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-55.0..55.00",
                "units": "dBm",
                "description": "The default system threshold (known as 'Overload') that triggers the OPR-OORH alarm \n                         (i.e., when the optical power received is greater than this value). Note that this is \n                         hardware dependent, based on the type of the optical transceiver (TOM).",
                "default": "-55.0",
                "config": "false"
            },
            "power-threshold-high-offset": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "range": "-10.00..10.00",
                "units": "dB",
                "description": "A user configurable attribute that results in the 'effective upper threshold' based on \n                         which the system raises the OPR-OORH alarm. The effective threshold will be (threshold-high + threshold-high-offset).",
                "default": "0.0"
            }
        },
        "flexo": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "flexo": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/flexo",
                "key": "name",
                "description": "Facility describing the flexo. Refer to G.709.1 and G.709.3",
                "system-managed": {
                    "when": "not($is-openroadm)"
                },
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "optical-carrier flexo-group",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "foic-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "foic1.2": {
                            "value": "1"
                        }
                    },
                    {
                        "foic1.4": {
                            "value": "2"
                        }
                    },
                    {
                        "foic2.4": {
                            "value": "3"
                        }
                    },
                    {
                        "foic2.8": {
                            "value": "4"
                        }
                    },
                    {
                        "foic3.6": {
                            "value": "5"
                        }
                    },
                    {
                        "foic4.8": {
                            "value": "6"
                        }
                    },
                    {
                        "foic4.16": {
                            "value": "7"
                        }
                    }
                ],
                "default": "foic4.8",
                "config": "false",
                "description": "FOICx.k lanes means using k parallel lanes to carry a FlexO-x interface, where order x signifies the interface rate in units of 100G.\n                             A unique FOICx.k identification (G.709.3 FlexO-LR and G.709.1 FlexO-SR)."
            },
            "fec-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "cfec": {
                            "value": "1"
                        }
                    },
                    {
                        "ofec": {
                            "value": "2"
                        }
                    },
                    {
                        "G709": {
                            "value": "3"
                        }
                    },
                    {
                        "noFEC": {
                            "value": "4"
                        }
                    },
                    {
                        "i4": {
                            "value": "5",
                            "description": "EFEC-I4"
                        }
                    },
                    {
                        "i7": {
                            "value": "6",
                            "description": "EFEC-I7"
                        }
                    },
                    {
                        "sdfec15": {
                            "value": "7",
                            "description": "15% SDFEC-Differential"
                        }
                    },
                    {
                        "sdfec15nd": {
                            "value": "8",
                            "description": "15% SDFEC-Non-Differential"
                        }
                    },
                    {
                        "staircase7": {
                            "value": "9",
                            "description": "7% HDFEC Staircase"
                        }
                    },
                    {
                        "ufec7": {
                            "value": "10",
                            "description": "%7 UFEC"
                        }
                    }
                ],
                "default": "ofec",
                "description": "The FEC type",
                "config": "false"
            },
            "iid": {
                "yangType": "leaf-list",
                "type": "uint8",
                "range": "1..254",
                "description": "Uniquely identify each member of a group and the order of each member in the group. \n                             This information is required in the reordering process. \n                             Don’t need to be sequential.",
                "default": "if ($rate = 400) then '1,2,3,4'\n                                 else if ($rate = 300) then '1,2,3'\n                                 else if ($rate = 200) then '1,2'\n                                 else if ($rate = 100) then '1'\n                                 else ('0')",
                "edit-condition": [
                    {
                        "error-message": "Flexo iid count do not match flexo-group rate.",
                        "value": "if ($rate = 400) then (count(seq(.)) = 4)\n                                        else if ($rate = 300) then (count(seq(.)) = 3)\n                                        else if ($rate = 200) then (count(seq(.)) = 2)\n                                        else if ($rate = 100) then (count(seq(.)) = 1)\n                                        else true()"
                    },
                    {
                        "error-message": "Invalid iid.",
                        "value": "if ($rate = 400) then \n                                            (seq(.)[1] > 0 and seq(.)[2] > 0 and seq(.)[3] > 0 and seq(.)[4] > 0 and \n                                             seq(.)[1] != seq(.)[2] and seq(.)[1] != seq(.)[3] and seq(.)[1] != seq(.)[4] and \n                                             seq(.)[2] != seq(.)[3] and seq(.)[2] != seq(.)[4] and \n                                             seq(.)[3] != seq(.)[4])\n                                        else if ($rate = 300) then \n                                            (seq(.)[1] > 0 and seq(.)[2] > 0 and seq(.)[3] > 0 and \n                                             seq(.)[1] != seq(.)[2] and seq(.)[1] != seq(.)[3] and seq(.)[2] != seq(.)[3])\n                                        else if ($rate = 200) then \n                                            (seq(.)[1] > 0 and seq(.)[2] > 0 and \n                                             seq(.)[1] != seq(.)[2])\n                                        else if ($rate = 100) then \n                                            (seq(.)[1] > 0)\n                                        else true()"
                    }
                ]
            },
            "accepted-group-id": {
                "yangType": "leaf-list",
                "type": "uint32",
                "config": "false",
                "description": "The received group instance on the FlexO interface."
            },
            "accepted-iid": {
                "yangType": "leaf-list",
                "type": "uint8",
                "config": "false",
                "description": "The received iid on the FlexO interface."
            }
        },
        "flexo-group": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "flexo-group": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/flexo-group",
                "key": "name",
                "description": "Facility describing the flexo-group.",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "line-ptp",
                "create-condition": [
                    {
                        "error-message": "Only one flexo-group may exist per line port.",
                        "value": "not(/ne/facilities/flexo-group[. != current()]\n                                                                    [supporting-card=$my-card/name]\n                                                                    [supporting-port=$my-port/name])"
                    },
                    {
                        "error-message": "Unknown Carrier ID.",
                        "value": "boolean($my-card)"
                    },
                    {
                        "error-message": "Invalid rate for flexo-group.",
                        "value": "if (./modulation-format = 'DP-16QAM') then ./rate = (200,400)\n                                    else if (./modulation-format = 'DP-16QAM-E') then ./rate = 400\n                                    else if (./modulation-format = 'DP-8QAM') then ./rate = (200,300)\n                                    else if (./modulation-format = 'DP-QPSK') then ./rate = (100,200)\n                                    else false()"
                    }
                ],
                "delete-condition": {
                    "error-message": "Not possible to delete flexo-group due to the existence of low order ODUs.",
                    "value": "not(/ne/facilities/odu[supporting-card=$my-card/name]\n                                                            [supporting-port=$my-port/name]\n                                                            [class='low-order'])"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "carriers": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "min-elements": "1",
                "description": "A list of carriers that are bound to this facilities.\n                             Possible values can be any card/resources/supported-carriers.",
                "discover-values": "seq(/ne/equipment/card/resources/supported-carriers)",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "Carrier ID cannot be repeated.",
                        "value": "if (count(seq(.)) > 1) then seq(.)[1] != seq(.)[2] else true()"
                    },
                    {
                        "error-message": "Cannot change carriers while LO-ODU/XCONs exist in this flexo-group.",
                        "value": "not(/ne/facilities/odu[supporting-card = current()/../supporting-card]\n                                                              [supporting-port = seq(current()/../supporting-port)]\n                                                              [class='low-order'])"
                    },
                    {
                        "error-message": {
                            "value": "Unknown carrier $1"
                        },
                        "description": "If creating a flexo-group, carriers can point to the supported-carriers of any card.",
                        "value": "all(for $carrier in seq(.) return\n                                                $carrier = /ne/equipment/card/resources/supported-carriers)"
                    },
                    {
                        "error-message": "All flexo-group carriers need to exist in the same card.",
                        "value": "all(for $carrier in seq(.) return\n                                                get-card($carrier) = get-card(seq(.)[1]))"
                    },
                    {
                        "error-message": {
                            "value": "Provided carrier(s) are not supported to by the card-$1."
                        },
                        "description": "If editing a flexo-group, carriers must point to the card associated with the flexo-group.",
                        "value": "if (db-value(..)) then\n                                            all(for $carrier in seq(.) return\n                                                get-card($carrier) = /ne/equipment/card[name=current()/../supporting-card])\n                                        else true()"
                    },
                    {
                        "error-message": "Not possible to change the base port of the flexo-group by switching carriers.",
                        "value": "if (db-value(..) and not(autocomplete())) then\n                                            seq(get-port(seq(../carriers))/name) = seq(../supporting-port)\n                                        else true()"
                    },
                    {
                        "error-message": "The carriers are being used.",
                        "value": "all(for $carrier in seq(.) return\n                                            not(../../flexo-group[. != current()/..][carriers = $carrier]) and not(../../eth-zr[. != current()/..][carriers = $carrier]))"
                    },
                    {
                        "error-message": "Cannot create flexo-group when there is no line-ptp against.",
                        "value": "(/ne/facilities/line-ptp[AID=string(seq(.)[1])])"
                    }
                ]
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "\n                    Carried signal basic rate class \n                ",
                "mandatory": "true",
                "edit-condition": {
                    "error-message": "deny changing rate.",
                    "value": "$is-openroadm or not(in-chm1r(..))"
                }
            },
            "modulation-format": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "DP-QPSK": {
                            "value": "1"
                        }
                    },
                    {
                        "DP-16QAM": {
                            "value": "2"
                        }
                    },
                    {
                        "DP-8QAM": {
                            "value": "3"
                        }
                    },
                    {
                        "BPSK": {
                            "value": "4"
                        }
                    },
                    {
                        "DP-16QAM-E": {
                            "value": "5"
                        }
                    }
                ],
                "description": "\n                    Current modulation format\n                ",
                "mandatory": "true",
                "edit-condition": {
                    "error-message": "deny changing modulation-format.",
                    "value": "$is-openroadm or not(in-chm1r(..))"
                }
            },
            "fec-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "cfec": {
                            "value": "1"
                        }
                    },
                    {
                        "ofec": {
                            "value": "2"
                        }
                    },
                    {
                        "G709": {
                            "value": "3"
                        }
                    },
                    {
                        "noFEC": {
                            "value": "4"
                        }
                    },
                    {
                        "i4": {
                            "value": "5",
                            "description": "EFEC-I4"
                        }
                    },
                    {
                        "i7": {
                            "value": "6",
                            "description": "EFEC-I7"
                        }
                    },
                    {
                        "sdfec15": {
                            "value": "7",
                            "description": "15% SDFEC-Differential"
                        }
                    },
                    {
                        "sdfec15nd": {
                            "value": "8",
                            "description": "15% SDFEC-Non-Differential"
                        }
                    },
                    {
                        "staircase7": {
                            "value": "9",
                            "description": "7% HDFEC Staircase"
                        }
                    },
                    {
                        "ufec7": {
                            "value": "10",
                            "description": "%7 UFEC"
                        }
                    }
                ],
                "default": "ofec",
                "description": "The FEC type",
                "edit-condition": {
                    "error-message": "fec-type not supported.",
                    "value": "(. = 'ofec')"
                }
            },
            "group-id": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "1..1048575",
                "mandatory": "true",
                "description": "20bits, indicate the interface group instance \n                             that the FlexO-x interface is a member of.\n                             It will be unique in the NE"
            }
        },
        "eth-zr": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "eth-zr": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/eth-zr",
                "key": "name",
                "description": "Facility describing the Eth-ZR.",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "line-ptp",
                "create-condition": [
                    {
                        "error-message": "Only one eth-zr may exist per line port.",
                        "value": "not(../eth-zr[. != current()]\n                                                   [supporting-card=$my-card/name]\n                                                   [supporting-port=$my-port/name])"
                    },
                    {
                        "error-message": "Unknown Carrier ID.",
                        "value": "boolean($my-card)"
                    }
                ],
                "delete-condition": {
                    "error-message": "Not possible to delete eth-zr mapped by client ethernet facilities with time-slots not cleared.",
                    "value": "available-time-slots = '1,2,3,4' or available-time-slots = '1..4'"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "carriers": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..32",
                "min-elements": "1",
                "description": "A list of carriers that are bound to this facilities.\n                             Possible values can be any card/resources/supported-carriers.",
                "discover-values": "seq(/ne/equipment/card/resources/supported-carriers)",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "Carrier ID cannot be repeated.",
                        "value": "if (count(seq(.)) > 1) then seq(.)[1] != seq(.)[2] else true()"
                    },
                    {
                        "error-message": "Cannot change carriers while LO-ODU/XCONs exist in this eth-zr.",
                        "value": "not(/ne/facilities/odu[supporting-card = current()/../supporting-card]\n                                                              [supporting-port = seq(current()/../supporting-port)]\n                                                              [class='low-order'])"
                    },
                    {
                        "error-message": {
                            "value": "Unknown carrier $1"
                        },
                        "description": "If creating a eth-zr, carriers can point to the supported-carriers of any card.",
                        "value": "all(for $carrier in seq(.) return\n                                                $carrier = /ne/equipment/card/resources/supported-carriers)"
                    },
                    {
                        "error-message": "All eth-zr carriers need to exist in the same card.",
                        "value": "all(for $carrier in seq(.) return\n                                                get-card($carrier) = get-card(seq(.)[1]))"
                    },
                    {
                        "error-message": {
                            "value": "Provided carrier(s) are not supported to by the card-$1."
                        },
                        "description": "If editing a eth-zr, carriers must point to the card associated with the eth-zr.",
                        "value": "if (db-value(..)) then\n                                            all(for $carrier in seq(.) return\n                                                get-card($carrier) = /ne/equipment/card[name=current()/../supporting-card])\n                                        else true()"
                    },
                    {
                        "error-message": "Not possible to change the base port of the eth-zr by switching carriers.",
                        "value": "if (db-value(..) and not(autocomplete())) then\n                                            seq(get-port(seq(../carriers))/name) = seq(../supporting-port)\n                                        else true()"
                    },
                    {
                        "error-message": "The carriers are being used.",
                        "value": "all(for $carrier in seq(.) return\n                                            not(../../eth-zr[. != current()/..][carriers = $carrier]) and not(../../flexo-group[. != current()/..][carriers = $carrier]))"
                    },
                    {
                        "error-message": "Cannot create eth-zr when there is no line-ptp against.",
                        "value": "(/ne/facilities/line-ptp[AID=string(seq(.)[1])])"
                    }
                ]
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "\n                    Carried signal basic rate class \n                ",
                "mandatory": "true",
                "edit-condition": {
                    "error-message": "Invalid rate for eth-zr.",
                    "description": "Wrong rate for eth-zr should be denied",
                    "value": "(.=400)"
                }
            },
            "modulation-format": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "DP-QPSK": {
                            "value": "1"
                        }
                    },
                    {
                        "DP-16QAM": {
                            "value": "2"
                        }
                    },
                    {
                        "DP-8QAM": {
                            "value": "3"
                        }
                    },
                    {
                        "BPSK": {
                            "value": "4"
                        }
                    },
                    {
                        "DP-16QAM-E": {
                            "value": "5"
                        }
                    }
                ],
                "description": "\n                    Current modulation format\n                ",
                "mandatory": "true",
                "edit-condition": {
                    "error-message": "Invalid modulation-format for eth-zr.",
                    "description": "Wrong modulation-format for eth-zr mode should be denied",
                    "value": "(. = 'DP-16QAM')"
                }
            },
            "fec-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "cfec": {
                            "value": "1"
                        }
                    },
                    {
                        "ofec": {
                            "value": "2"
                        }
                    },
                    {
                        "G709": {
                            "value": "3"
                        }
                    },
                    {
                        "noFEC": {
                            "value": "4"
                        }
                    },
                    {
                        "i4": {
                            "value": "5",
                            "description": "EFEC-I4"
                        }
                    },
                    {
                        "i7": {
                            "value": "6",
                            "description": "EFEC-I7"
                        }
                    },
                    {
                        "sdfec15": {
                            "value": "7",
                            "description": "15% SDFEC-Differential"
                        }
                    },
                    {
                        "sdfec15nd": {
                            "value": "8",
                            "description": "15% SDFEC-Non-Differential"
                        }
                    },
                    {
                        "staircase7": {
                            "value": "9",
                            "description": "7% HDFEC Staircase"
                        }
                    },
                    {
                        "ufec7": {
                            "value": "10",
                            "description": "%7 UFEC"
                        }
                    }
                ],
                "default": "ofec",
                "description": "The FEC type",
                "edit-condition": {
                    "error-message": "fec-type not supported.",
                    "value": "(. = 'ofec')"
                }
            },
            "total-time-slots": {
                "yangType": "leaf",
                "type": "uint16",
                "config": "false",
                "description": "The member of the slots to be supported as times of 100G: rate-class/100."
            },
            "available-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "A list of time-slots that are available for provisioning new services.",
                "config": "false"
            },
            "fdd-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "9",
                "range": "0.000000001..0.1",
                "default": "0.0195",
                "description": "The threshold for FEC Detected Degrade (FDD) alarm.",
                "edit-condition": {
                    "error-message": "threshold of of FDD shall be less than that of FED",
                    "value": "current() <(../fed-threshold)"
                }
            },
            "fed-threshold": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "9",
                "range": "0.000000001..0.1",
                "default": "0.0206",
                "description": "The threshold for FEC Excessive Degrade.",
                "edit-condition": {
                    "error-message": "threshold of of FED shall be greater than that of FDD",
                    "value": "current() >(../fdd-threshold)"
                }
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection."
            }
        },
        "oc": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "oc": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/tdm",
                "key": "name",
                "description": "Optical Carrier - level M, e.g. M=48, 192.",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "trib-ptp",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "oc-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "OC-48": {
                            "value": "1"
                        }
                    },
                    {
                        "OC-192": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Type of SONET signal.\n                             Level N of OC-N (Optical Carrier level N)."
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "The speed/rate of the client interface.",
                "config": "false"
            },
            "tx-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": "GMP",
                "description": "The tx mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": {
                    "error-message": "Invalid tx-mapping-mode for this TOM.",
                    "description": "If tx-mapping-mode is changed, ensure it matches the same speed .",
                    "value": "if ((oldvalue(.) = ('AMP', 'BMP', 'not-applicable'))) then\n                                        . = ('AMP', 'BMP', 'not-applicable')\n                                        else false()"
                }
            },
            "expected-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": "GMP",
                "description": "The expected mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": {
                    "error-message": "Defaults to tx-mapping-mode not allowed to be modfied by the user in the current release.",
                    "value": " newvalue(.) = ../tx-mapping-mode "
                }
            },
            "service-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "network-wrapper": {
                            "value": "20",
                            "description": "Map non-OTN signal into ODUs."
                        }
                    },
                    {
                        "adaptation": {
                            "value": "30",
                            "description": "Multiplexing scenarios."
                        }
                    },
                    {
                        "switching": {
                            "value": "40",
                            "description": "Map OTN signal (e.g. OTU) into ODUs."
                        }
                    },
                    {
                        "transport": {
                            "value": "50",
                            "description": "Transport OTN signal (e.g. OTU) into line side ODUs."
                        }
                    }
                ],
                "description": "Service mode for the tdm facility.",
                "default": "none",
                "config": "false"
            },
            "service-mode-qualifier": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "10"
                                }
                            },
                            {
                                "mux-demux": {
                                    "value": "20"
                                }
                            },
                            {
                                "nofec": {
                                    "value": "30"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "0..32"
                    }
                ],
                "description": "Service mode qualifier for the tdm facility.",
                "default": "none",
                "config": "false"
            },
            "tti-style": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "1": {
                            "value": "1",
                            "description": "Single-byte trace (used for section access point identifiers with repetitive byte)."
                        }
                    },
                    {
                        "15": {
                            "value": "15",
                            "description": "16-byte trace (used for section access point identifiers acc. to ITU-T G.831, cl. 3) with the first byte representing the CRC-7, which is auto-calculated, and 15 bytes to be configured."
                        }
                    }
                ],
                "default": "1",
                "description": "The configured mode of the TTI."
            },
            "tim-monitor": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "The enable switching of tim defect monitor mode."
            },
            "tx-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Transmit TTI - Sent by this facility to the far-end remote facility."
            },
            "rx-tti": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Receive TTI - Received by this facility from the far-end remote facility.",
                "length": "0..64",
                "config": "false"
            },
            "rx-tti-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Receive TTI in HEX.",
                "length": "0..130",
                "config": "false"
            },
            "expected-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Expected TTI - The TTI this facility expects to receive from the far-end remote facility.",
                "default": ""
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection."
            },
            "loopback-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "loopback": {
                            "value": "10",
                            "description": "loopback the signal, insert a maintenance signal"
                        }
                    },
                    {
                        "loopback-and-continue": {
                            "value": "20",
                            "description": "loopback the signal, insert a maintenance signal and bridge (continue) the signal downstream"
                        }
                    }
                ],
                "description": "Indicates loopback action for facility or terminal."
            },
            "test-signal-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Indicates that test pattern generation is disabled."
                        }
                    },
                    {
                        "PRBS31Q": {
                            "value": "10",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31 quaternary."
                        }
                    },
                    {
                        "PRBS13Q": {
                            "value": "20",
                            "description": "Defined in G.709 OPU PRBS with inverted PN13 quaternary."
                        }
                    },
                    {
                        "scrambled-idles": {
                            "value": "30",
                            "description": "Idle frame defined in 802.3 Clause 82.2.10."
                        }
                    },
                    {
                        "PRBS9": {
                            "value": "40",
                            "description": "Defined in G.709 OPU PRBS with non-inverted PN9."
                        }
                    },
                    {
                        "PRBS31": {
                            "value": "50",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31."
                        }
                    }
                ],
                "default": "none",
                "description": "The type of test pattern that is injected."
            },
            "test-signal-direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "The direction of the test signal.",
                "default": "ingress"
            },
            "test-signal-monitoring": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Monitor the incoming test signals for diagnostics."
            }
        },
        "stm": {
            "definition": {
                "jpath": {
                    "ne": {
                        "facilities": {
                            "stm": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/tdm",
                "key": "name",
                "description": "Synchronous Transport Module N, e.g. N=16, 64. Reference [ITU-T G.691].",
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "trib-ptp",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A generic, configurable name for every facility."
            },
            "supporting-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../equipment/card/name",
                "config": "false",
                "description": "Card that holds this facility"
            },
            "supporting-port": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../../equipment/card/port/name",
                "config": "false",
                "description": "Ports that hold this facility"
            },
            "supporting-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "description": "An XPath reference to the parent facilities."
            },
            "supported-facilities": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "config": "false",
                "max-elements": "20",
                "description": "An XPath reference to the children facilities."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "system",
                "config": "false",
                "description": "Describes whether this facility was system created or not.\n                         Only user created facilities can be user deleted."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "stm-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "STM-16": {
                            "value": "1"
                        }
                    },
                    {
                        "STM-64": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "The type of SDH signal (STM-N)."
            },
            "rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "Gbit/s",
                "description": "The speed/rate of the client interface.",
                "config": "false"
            },
            "tx-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": "GMP",
                "description": "The tx mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": {
                    "error-message": "Invalid tx-mapping-mode for this TOM.",
                    "description": "If tx-mapping-mode is changed, ensure it matches the same speed .",
                    "value": "if ((oldvalue(.) = ('AMP', 'BMP', 'not-applicable'))) then\n                                       . = ('AMP', 'BMP', 'not-applicable')\n                                       else false()"
                }
            },
            "expected-mapping-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "GMP": {
                            "value": "1",
                            "description": "Generic Mapping Procedure"
                        }
                    },
                    {
                        "BMP": {
                            "value": "2",
                            "description": "BMP mapping"
                        }
                    },
                    {
                        "openZR+": {
                            "value": "3",
                            "description": "mapping mode for ZR"
                        }
                    },
                    {
                        "FlexE-4x100G": {
                            "value": "4",
                            "description": "FlexE-4x100G for split lamda feature"
                        }
                    },
                    {
                        "GFP-F": {
                            "value": "5",
                            "description": "GFP-F"
                        }
                    },
                    {
                        "GFP-F-extOPU2": {
                            "value": "6",
                            "description": "GFP-F-extOPU2"
                        }
                    },
                    {
                        "AMP": {
                            "value": "7",
                            "description": "AMP"
                        }
                    }
                ],
                "default": "GMP",
                "description": "The expected mapping mode of client port. The possible values are dependent on the HW and configuration.",
                "edit-condition": {
                    "error-message": "Defaults to tx-mapping-mode not allowed to be modfied by the user in the current release.",
                    "value": " newvalue(.) = ../tx-mapping-mode "
                }
            },
            "service-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "network-wrapper": {
                            "value": "20",
                            "description": "Map non-OTN signal into ODUs."
                        }
                    },
                    {
                        "adaptation": {
                            "value": "30",
                            "description": "Multiplexing scenarios."
                        }
                    },
                    {
                        "switching": {
                            "value": "40",
                            "description": "Map OTN signal (e.g. OTU) into ODUs."
                        }
                    },
                    {
                        "transport": {
                            "value": "50",
                            "description": "Transport OTN signal (e.g. OTU) into line side ODUs."
                        }
                    }
                ],
                "description": "Service mode for the tdm facility.",
                "default": "none",
                "config": "false"
            },
            "service-mode-qualifier": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "none": {
                                    "value": "10"
                                }
                            },
                            {
                                "mux-demux": {
                                    "value": "20"
                                }
                            },
                            {
                                "nofec": {
                                    "value": "30"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "0..32"
                    }
                ],
                "description": "Service mode qualifier for the tdm facility.",
                "default": "none",
                "config": "false"
            },
            "tti-style": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "1": {
                            "value": "1",
                            "description": "Single-byte trace (used for section access point identifiers with repetitive byte)."
                        }
                    },
                    {
                        "15": {
                            "value": "15",
                            "description": "16-byte trace (used for section access point identifiers acc. to ITU-T G.831, cl. 3) with the first byte representing the CRC-7, which is auto-calculated, and 15 bytes to be configured."
                        }
                    }
                ],
                "default": "1",
                "description": "The configured mode of the TTI."
            },
            "tim-monitor": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "The enable switching of tim defect monitor mode."
            },
            "tx-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Transmit TTI - Sent by this facility to the far-end remote facility."
            },
            "rx-tti": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Receive TTI - Received by this facility from the far-end remote facility.",
                "length": "0..64",
                "config": "false"
            },
            "rx-tti-hex": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                ],
                "description": "Receive TTI in HEX.",
                "length": "0..130",
                "config": "false"
            },
            "expected-tti": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(0x(([0-9A-Fa-f])([0-9A-Fa-f]))*)?"
                        ],
                        "description": "Hex string with '0x' prefix.",
                        "length": "0..130"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "[ -~]*"
                        ],
                        "description": "Restrict this to printable ASCII characters.",
                        "length": "0..64"
                    }
                ],
                "description": "Expected TTI - The TTI this facility expects to receive from the far-end remote facility.",
                "default": ""
            },
            "loopback": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "10"
                        }
                    },
                    {
                        "facility": {
                            "value": "20"
                        }
                    },
                    {
                        "terminal": {
                            "value": "30"
                        }
                    }
                ],
                "default": "none",
                "description": "Loopback mode.Useful to debug on the fiber connection."
            },
            "loopback-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "loopback": {
                            "value": "10",
                            "description": "loopback the signal, insert a maintenance signal"
                        }
                    },
                    {
                        "loopback-and-continue": {
                            "value": "20",
                            "description": "loopback the signal, insert a maintenance signal and bridge (continue) the signal downstream"
                        }
                    }
                ],
                "description": "Indicates loopback action for facility or terminal."
            },
            "test-signal-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Indicates that test pattern generation is disabled."
                        }
                    },
                    {
                        "PRBS31Q": {
                            "value": "10",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31 quaternary."
                        }
                    },
                    {
                        "PRBS13Q": {
                            "value": "20",
                            "description": "Defined in G.709 OPU PRBS with inverted PN13 quaternary."
                        }
                    },
                    {
                        "scrambled-idles": {
                            "value": "30",
                            "description": "Idle frame defined in 802.3 Clause 82.2.10."
                        }
                    },
                    {
                        "PRBS9": {
                            "value": "40",
                            "description": "Defined in G.709 OPU PRBS with non-inverted PN9."
                        }
                    },
                    {
                        "PRBS31": {
                            "value": "50",
                            "description": "Defined in G.709 OPU PRBS with inverted PN31."
                        }
                    }
                ],
                "default": "none",
                "description": "The type of test pattern that is injected."
            },
            "test-signal-direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "The direction of the test signal.",
                "default": "ingress"
            },
            "test-signal-monitoring": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Monitor the incoming test signals for diagnostics."
            }
        },
        "services": {
            "definition": {
                "jpath": {
                    "ne": {
                        "services": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/services",
                "description": "Services of multiples types commissioned in this NE.",
                "user-class": "-w:NA,PR -r:*",
                "system-managed": "true"
            },
            "xcon": "list",
            "data-path-encryption": "container"
        },
        "xcon": {
            "definition": {
                "jpath": {
                    "ne": {
                        "services": {
                            "xcon": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/services",
                "key": "name",
                "description": "Layer 1 digital services that are currently provisioned in the system. \n                             This includes pre-provisoned XCONs too.",
                "create-condition": [
                    {
                        "error-message": "XCON can not be created between these two ODUs in the chm1r.",
                        "value": "not(in-chm1r($source-fac)) or not(in-chm1r($destination-fac))\n                                       or\n                                      ($source-fac/class = 'mapped' and $destination-fac/class = 'high-order')\n                                       or\n                                      ($destination-fac/class = 'mapped' and $source-fac/class = 'high-order')\n                                       or \n                                      ($source-fac/class = 'mapped' and $destination-fac/class = 'low-order')\n                                       or \n                                      ($destination-fac/class = 'mapped' and $source-fac/class = 'low-order')\n                                       or \n                                     ($destination-fac/class = 'high-order' and $source-fac/class = 'high-order')\n                                      or \n                                     ($destination-fac/class = 'high-order' and $source-fac/class = 'high-order')"
                    },
                    {
                        "error-message": "Invalid XCON end-points.",
                        "value": "is-odu(source) and is-odu(destination)"
                    },
                    {
                        "error-message": "Invalid XCON end-points.",
                        "value": "source != destination"
                    },
                    {
                        "error-message": "Source facility is already in use by another XCON.",
                        "value": "not($source-fac = ../xcon[. != current()]/source) and not( $source-fac = ../xcon[. != current()]/destination)"
                    },
                    {
                        "error-message": "Destination facility is already in use by another XCON.",
                        "value": "not($destination-fac = ../xcon[. != current()]/source) and not( $destination-fac = ../xcon[. != current()]/destination)"
                    },
                    {
                        "error-message": "The supported facilities of Source or destination facility are not empty.",
                        "value": "(seq($source-fac/supported-facilities) = empty-sequence()) and (seq($destination-fac/supported-facilities) = empty-sequence())"
                    },
                    {
                        "error-message": "Source and destination facilities need to exist in the same card.",
                        "value": "deref(source)/supporting-card = deref(destination)/supporting-card"
                    },
                    {
                        "error-message": "Source and destination facilities rate are not compatible.",
                        "value": "$source-fac/rate = $destination-fac/rate"
                    },
                    {
                        "error-message": "Source and destination facilities odu-type are not compatible.",
                        "value": "$source-fac/odu-type = $destination-fac/odu-type"
                    },
                    {
                        "error-message": "The direction is not supported.",
                        "value": "direction = 'two-way'"
                    },
                    {
                        "error-message": "XCON can not be created between these two ODUs in the utm2.",
                        "value": "not(in-utm2($source-fac)) or not(in-utm2($destination-fac))\r\n                                       or\r\n                                      ($source-fac/class = 'mapped' and $destination-fac/class = 'mapped)\r\n                                        or\r\n                                      ($source-fac/class = 'mapped' and $destination-fac/class = 'high-order')\r\n                                        or\r\n                                      ($destination-fac/class = 'mapped' and $source-fac/class = 'high-order')\r\n                                        or \r\n                                      ($source-fac/class = 'mapped' and $destination-fac/class = 'low-order')\r\n                                        or \r\n                                      ($destination-fac/class = 'mapped' and $source-fac/class = 'low-order')\r\n                                        or \r\n                                      ($destination-fac/class = 'high-order' and $source-fac/class = 'high-order')\r\n                                        or \r\n                                      ($destination-fac/class = 'high-order' and $source-fac/class = 'high-order')"
                    }
                ],
                "persistency": "all-true",
                "notify": "all-true",
                "logical-parent-type": "odu ethernet",
                "user-class": "-w:NA,PR -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A user configured name for the XCON."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object.",
                "when": "not(/ne/ne-type = 'G30')"
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity.",
                "when": "not(/ne/ne-type = 'G30')"
            },
            "source": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "mandatory": "true",
                "description": "The source end-point between which the XCON needs to be created.",
                "set-on-create-only": "true",
                "discover-values": "/ne/facilities/otu[otu-type='OTU4'] |\n                                         /ne/facilities/odu[odu-type='ODU4'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU4'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU2'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU2'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU2e'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU2e'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU1'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU0'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODUCn'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODUflex'] |\n                                         /ne/facilities/odu[class='low-order']"
            },
            "destination": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "mandatory": "true",
                "description": "The destination end-point between which the XCON needs to be created.",
                "set-on-create-only": "true",
                "discover-values": "/ne/facilities/otu[otu-type='OTU4'] |\n                                         /ne/facilities/odu[odu-type='ODU4'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU4'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU2'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU2'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU2e'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODU2e'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU1'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODU0'][class='mapped'] |\n                                         /ne/facilities/odu[odu-type='ODUCn'][class='high-order'] |\n                                         /ne/facilities/odu[odu-type='ODUflex'] |\n                                         /ne/facilities/odu[class='low-order']"
            },
            "payload-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GBE": {
                            "value": "10",
                            "description": "A generic payload type for all 100GBASE-X Ethernet clients when provisioning a digital XCON."
                        }
                    },
                    {
                        "400GBE": {
                            "value": "20",
                            "description": "A generic payload type for all 400GBASE-X Ethernet clients when provisioning a digital XCON."
                        }
                    },
                    {
                        "OTU4": {
                            "value": "30",
                            "description": "A generic payload type for OTU4 Transport w/o FEC service."
                        }
                    },
                    {
                        "100G": {
                            "value": "40",
                            "description": "A generic payload type for ODU4 switching services."
                        }
                    },
                    {
                        "ODU2": {
                            "value": "50",
                            "description": "A generic payload type for ODU2 switching services."
                        }
                    },
                    {
                        "ODU2e": {
                            "value": "60",
                            "description": "A generic payload type for ODU2e switching services."
                        }
                    },
                    {
                        "10GBE": {
                            "value": "70"
                        }
                    },
                    {
                        "OC192": {
                            "value": "80"
                        }
                    },
                    {
                        "STM64": {
                            "value": "90"
                        }
                    },
                    {
                        "10G": {
                            "value": "100"
                        }
                    },
                    {
                        "empty": {
                            "value": "110",
                            "description": "Not applicable for 2-step XCON approach."
                        }
                    }
                ],
                "description": "Indicates a generic, high-level source (from) client payload type of the digital XCON.",
                "config": "false",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "two-way": {
                            "value": "2"
                        }
                    }
                ],
                "default": "two-way",
                "description": "Indicates whether the digital XCON is uni-directional (1-WAY) or bi-directional (2-WAY).",
                "set-on-create-only": "true"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "circuit-id-suffix": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..48",
                "description": "User configured circuit ID suffix."
            },
            "src-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Time-slots allocated to the source lo-oduj in this xcon. Not applicable if source facility is not an ODU facility.",
                "config": "false",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "dst-time-slots": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "pattern": [
                    "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                ],
                "description": "Time-slots allocated to the destination lo-oduj in this xcon. Not applicable if destination facility is not an ODU facility.",
                "config": "false",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "src-tpn": {
                "yangType": "leaf",
                "type": "uint8",
                "config": "false",
                "description": "Mirrors the configuration of source lo-oduj trib-port-number in this xcon. Not applicable if source facility is not an ODU facility."
            },
            "dst-tpn": {
                "yangType": "leaf",
                "type": "uint8",
                "config": "false",
                "description": "Mirrors the configuration of destination lo-oduj trib-port-number in this xcon. Not applicable if destination facility is not an ODU facility."
            },
            "managed-by": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system": {
                            "value": "1"
                        }
                    },
                    {
                        "user": {
                            "value": "2"
                        }
                    }
                ],
                "default": "user",
                "config": "false",
                "description": "Describes whether this xcon was system created or not. Only user created xcon can be user deleted."
            },
            "payload-treatment": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "transport": {
                            "value": "10",
                            "description": "payload-treatment for ethernet ctp xcon."
                        }
                    },
                    {
                        "transport-without-fec": {
                            "value": "20",
                            "description": "payload-treatment for client otu4 and line odu4 xcon when PT is OTU4."
                        }
                    },
                    {
                        "switching": {
                            "value": "30",
                            "description": "payload-treatment for client odu4 and line odu4 xcon when PT is 100G."
                        }
                    },
                    {
                        "regen": {
                            "value": "40",
                            "description": "payload-treatment for two line lo-odu4 xcon when PT is OTU4."
                        }
                    },
                    {
                        "regen-switching": {
                            "value": "50",
                            "description": "payload-treatment for two line lo-odu4 xcon when PT is 100G."
                        }
                    }
                ],
                "config": "false",
                "description": "Indicates a generic payload treatment value of the digital XCON.",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "network-mapping": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ODUCn": {
                            "value": "1",
                            "description": "OTUCn protocol layer."
                        }
                    },
                    {
                        "ODUCni": {
                            "value": "2",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "ODUCni-M": {
                            "value": "3",
                            "description": "Infinera proprietary OTUCni protocol layer."
                        }
                    },
                    {
                        "ODU4": {
                            "value": "4",
                            "description": "ODU4 protocol layer."
                        }
                    },
                    {
                        "ODU4i": {
                            "value": "5",
                            "description": "Infinera proprietary ODU4i protocol layer."
                        }
                    },
                    {
                        "ODUflexi": {
                            "value": "6",
                            "description": "Infinera proprietary ODUflexi protocol layer."
                        }
                    },
                    {
                        "ODUflex": {
                            "value": "7",
                            "description": "ODU-flex protocol layer."
                        }
                    },
                    {
                        "ODU0": {
                            "value": "8",
                            "description": "ODU0 protocol layer."
                        }
                    },
                    {
                        "ODU1": {
                            "value": "9",
                            "description": "ODU1 protocol layer."
                        }
                    },
                    {
                        "ODU2": {
                            "value": "10",
                            "description": "ODU2 protocol layer."
                        }
                    },
                    {
                        "ODU2e": {
                            "value": "11",
                            "description": "ODU2e protocol layer."
                        }
                    },
                    {
                        "ODU2_AMP": {
                            "value": "12",
                            "description": "AMP mapping"
                        }
                    },
                    {
                        "ODU2_BMP": {
                            "value": "13",
                            "description": "BMP mapping"
                        }
                    }
                ],
                "description": "Indicates the server layer protocol type that supports this XCON.",
                "config": "false",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "add": {
                            "value": "1"
                        }
                    },
                    {
                        "drop": {
                            "value": "2"
                        }
                    },
                    {
                        "add-drop": {
                            "value": "3"
                        }
                    },
                    {
                        "express": {
                            "value": "4"
                        }
                    }
                ],
                "config": "false",
                "description": "Type of XCON.",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "protection-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unprotected": {
                            "value": "1"
                        }
                    }
                ],
                "default": "unprotected",
                "config": "false",
                "description": "Represents the protection type this XCON has.",
                "when": [
                    "not(in-chm1r($source-fac))",
                    "not(in-utm2($source-fac))"
                ]
            },
            "circuit-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "config": "false",
                "description": "System configured circuit ID. \n                                    Format of this ID is:\n                                    <timestamp>|<ne-name>|<XCON-AID>|<user-configured-sufix>\n                                    Example:\n                                    2020-05-05T21:06:02Z|GX|1-4-T9,1-4-L1-1-ODUji#1|my-suffix\n\n                                    Timestamp is the NE time at xcon creation, in UTC.\n                                    If necessary, ne-name will be truncated so that total length remains at 128 characters."
            },
            "from-adaptation": {
                "yangType": "leaf",
                "type": "string",
                "description": "Indicate server layer adaptation at client side.",
                "config": "false"
            },
            "to-adaptation": {
                "yangType": "leaf",
                "type": "string",
                "description": "Indicate server layer adaptation at line side.",
                "config": "false"
            }
        },
        "data-path-encryption": {
            "definition": {
                "jpath": {
                    "ne": {
                        "services": {
                            "data-path-encryption": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/data-path-encryption",
                "description": "A top-level container for all data path encryption services and entities.",
                "user-class": "-w:EA -r:*",
                "system-managed": "true"
            },
            "secure-entity": "list"
        },
        "secure-entity": {
            "definition": {
                "jpath": {
                    "ne": {
                        "services": {
                            "data-path-encryption": {
                                "secure-entity": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/data-path-encryption",
                "key": "name",
                "description": "List of l1 encryption secure entities.",
                "create-condition": [
                    {
                        "error-message": "Supporting-facility should be optical-carrier with ICE6 carrier-type.",
                        "description": "Supporting facility should be optical-carrier with ICE6 carrier-type.",
                        "value": "deref(current()/supporting-facility) = /ne/facilities/optical-carrier and\n                                      deref(current()/supporting-facility)/carrier-type = 'ICE6'"
                    },
                    {
                        "error-message": "Secure-entity cannot be created on card which is not encryption capable.",
                        "description": "Encryption related configurations are blocked when host card is not encryption capable.",
                        "value": "deleted() or $encryption-capability = ('yes','unknown') "
                    },
                    {
                        "error-message": "Supporting-facility already used by another secure-entity.",
                        "description": "Supporting facility already used by another secure-entity.",
                        "value": "not(//secure-entity[. != current()]/supporting-facility = current()/supporting-facility)"
                    }
                ],
                "edit-condition": {
                    "error-message": "Secure-entity configuration is blocked on card which is not encryption capable.",
                    "description": "Encryption related configurations are blocked when host card is not encryption capable.",
                    "value": "deleted() or $encryption-capability = ('yes','unknown') "
                },
                "user-class": "-w:EA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A name for the data path l1 encryption secure entity (SecY)."
            },
            "supporting-entity-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "wavelength-encryption": {
                            "value": "1",
                            "description": "The secure entity type is an optical carrier."
                        }
                    }
                ],
                "default": "wavelength-encryption",
                "config": "false",
                "description": "Indicates supporting entity type."
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Indicates whether the SecY are configured and attached to any data path entity."
            },
            "supporting-facility": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "mandatory": "true",
                "description": "The optical carrier that needs data path encryption.",
                "set-on-create-only": "true",
                "discover-values": "/ne/facilities/optical-carrier[carrier-type='ICE6']"
            },
            "remote-secure-entity": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Refers to the far-end  secure entity's object name (XPath).\n                            Required by IKEv2 - This will be used by IKEv2 as a traffic selector.",
                "mandatory": "true",
                "set-on-create-only": "true"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "re-key-frequency": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "300..86400",
                "units": "seconds",
                "default": "300",
                "description": "The re-key frequency for the data path encryption service."
            },
            "re-key-fail-policy": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kill-traffic": {
                            "value": "1",
                            "description": "Bring down the data path encrypted service if re-key was unsuccessful."
                        }
                    },
                    {
                        "continue-traffic": {
                            "value": "2",
                            "description": "Continue the data path encrypted service even if re-key was unsuccessful."
                        }
                    }
                ],
                "default": "continue-traffic",
                "description": "Indicates the NE's policy and consequent action when re-keying \n                            the data path security association is unsuccessful."
            },
            "traffic-kill-offset": {
                "yangType": "leaf",
                "when": "../re-key-fail-policy = 'kill-traffic'",
                "type": "uint32",
                "range": "0..86400",
                "units": "seconds",
                "default": "0",
                "description": "If the re-key fail policy is set to KILL-TRAFFIC, this attribute indicates the amount of time\n                            the system waits before killing encrypted data path."
            }
        },
        "system": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ne",
                "description": "System Configuration container",
                "user-class": "-w:NA,NE,TT -r:*",
                "system-managed": "true"
            },
            "security": "container",
            "syslog": "container",
            "protocols": "container",
            "scheduled-tasks": "container",
            "ztp": "container",
            "transfer": "container",
            "networking": "container",
            "clock": "container",
            "ntp": "container",
            "sw-services": "container",
            "file-servers": "container",
            "sw-management": "container",
            "database": "list",
            "telemetry": "container",
            "fdr": "container"
        },
        "security": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/security",
                "description": "Top level security container.",
                "user-class": "-w:SA -r:*",
                "system-managed": "true"
            },
            "security-policies": "container",
            "user": "list",
            "user-group": "list",
            "session": "list",
            "aaa-server": "list",
            "image-keys": "container",
            "key-replacement-package": "container",
            "certificates": "container",
            "ikev2": "container"
        },
        "security-policies": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "security-policies": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/security",
                "description": "Container with several flags that represent security policies of the system.",
                "system-managed": "true",
                "user-class": "-w:SA -r:*"
            },
            "secure-mode": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If enabled, non-secure protocols are not supported.\n                                 If disabled, non-secure protocols can be used, including:\n                                 - HTTP protocol for file transfer, REST API, or any other HTTP based application\n                                 - FTP protocol for file transfer\n                                 - SNMPv2c or SNMPv3 without encryption\n\n                                 Enabling secure-mode will be rejected if any non-secure protocol is in use.",
                "edit-condition": [
                    {
                        "error-message": "Not possible to enable secure-mode due to the existence of configured file-servers using non-secure protocols.",
                        "value": "if (. = 'true') then\n                                        not(//file-server[protocol=('http', 'ftp')])\n                                    else true()"
                    },
                    {
                        "error-message": {
                            "value": "Not possible to enable secure-mode due to the existence of ssh-host-keys with insufficient length ($1). Please re-generate them first."
                        },
                        "value": "if (. = 'true') then\n                                        not($insecure-host-keys)\n                                    else true()"
                    },
                    {
                        "error-message": {
                            "value": "Not possible to enable secure-mode due to the existence of ssh-authorized-keys with insufficient length ($1). Please delete/replace them first."
                        },
                        "value": "if (. = 'true') then\n                                        not($insecure-auth-keys)\n                                    else true()"
                    },
                    {
                        "error-message": "Not possible to enable secure-mode due to the enabled HTTP RESTCONF access.",
                        "value": "if (. = 'true') then\n                                        //restconf/http-enabled = 'false'\n                                    else true()"
                    },
                    {
                        "error-message": "Cannot change secure mode while existing snmp-community objects.",
                        "value": "if (. = 'true') then\n                                        not(//snmp-community)\n                                    else true()"
                    },
                    {
                        "error-message": "Cannot change secure mode while existing snmp-target objects using 'v2c' snmp-version.",
                        "value": "if (. = 'true') then\n                                        not(//snmp-target[snmp-version='v2c'])\n                                    else true()"
                    },
                    {
                        "error-message": "Cannot change secure mode while existing snmpv3-user objects not using 'auth-priv' user-sec-level.",
                        "value": "if (. = 'true') then\n                                        not(//snmpv3-user[user-sec-level != 'auth-priv'])\n                                    else true()"
                    }
                ]
            },
            "strict-password-check": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If enabled, ensures the strict password complexity rules. Including:\n                                 - minimum length of 8 characters\n                                 - at least one lower case letter (a-z)\n                                 - at least one upper case letter (A-Z)\n                                 - at least one number (0-9)\n                                 - at least one symbol ()\n                                 - user name cannot be part of the password\n                                 If disabled, all these rules are not enforced, except:\n                                 - minimum length is 1 character\n                                 Once enabled, this policy only has impact on newly defined passwords."
            },
            "ssh-authentication-method": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "password": {
                            "value": "1",
                            "description": "Use password-based authentication for SSH access."
                        }
                    },
                    {
                        "public-key": {
                            "value": "2",
                            "description": "Use public key authentication for SSH access."
                        }
                    }
                ],
                "default": "password",
                "description": "The method used to authenticate user for SSH access.\n                        Note: For two-factor authentication, use public-key method and employ PIN/password-protected hardware device (e.g.: smart card or USB token.)"
            },
            "default-user-group": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../user-group/name",
                "max-elements": "10",
                "description": "Default roles for users access.",
                "default": "('MA')"
            },
            "enforce-password-history-check": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If enabled, ensures that a new password being set cannot match any of the previous 5 password\n                                 for the user.\n                                 If disabled, password repetition is allowed.\n                                 Once enabled, this policy only has impact on newly defined passwords."
            },
            "aaa-authentication-method": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "local-only": {
                            "value": "1",
                            "description": "Authentication locally only"
                        }
                    },
                    {
                        "local-first-then-remote": {
                            "value": "3",
                            "description": "Authentication locally first, if not pass, then use remote AAA server"
                        }
                    },
                    {
                        "remote-first-then-local": {
                            "value": "4",
                            "description": "Authentication use remote AAA server first, if remote authentication failed or all servers could not be contacted, then authentiate locally"
                        }
                    },
                    {
                        "remote-unavailable-then-local": {
                            "value": "5",
                            "description": "Authentication use remote AAA server first, if all servers could not be contacted, then authentiate locally"
                        }
                    }
                ],
                "default": "local-only",
                "description": "Specify authentication method for the user login to the NE."
            },
            "aaa-authorization-method": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "local-only": {
                            "value": "1",
                            "description": "Authorization locally only."
                        }
                    },
                    {
                        "remote-if-authenticated-else-local": {
                            "value": "2",
                            "description": "Local users should follow local permissions and remote users should follow the remote ones."
                        }
                    },
                    {
                        "remote-unavailable-then-local": {
                            "value": "3",
                            "description": "All users (local or remote) should follow remote permissions. If the permissions return unavailable, then use local ones."
                        }
                    }
                ],
                "default": "local-only",
                "description": "Specify authorization policy for the logged user. If the user changes this parameter, it should logout and login again to apply the rules."
            },
            "ssh-strict-host-key-checking": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "strict": {
                            "value": "1",
                            "description": "Only allow connection to a remote ssh/sftp/scp host if identity provided by remote host is known"
                        }
                    },
                    {
                        "relaxed": {
                            "value": "2",
                            "description": "Allow connection to a remote ssh/sftp/scp host, regardless if identity provided by remote host is known"
                        }
                    }
                ],
                "default": "relaxed",
                "description": "Specify the strictness of remote ssh/sftp/scp host identity checking."
            },
            "root-password": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..200",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The password of the root user.",
                "password": "true",
                "edit-condition": {
                    "error-message": "Root password minimum length is 1 character.",
                    "value": "re-match(., '.{1}.*')"
                }
            },
            "console-user-password": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..200",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The password of the console-user.",
                "password": "true",
                "edit-condition": {
                    "error-message": "The console-user password minimum length is 1 character.",
                    "value": "re-match(., '.{1}.*')"
                }
            },
            "csp-symmetrical-key": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Critical Security Parameters symmetrical key.",
                "password": "true"
            },
            "max-system-sessions": {
                "yangType": "leaf",
                "type": "uint8",
                "config": "false",
                "description": "The maximum number of management sessions that the system supports.\n                                 Note: session via serial console does not count against this maximum.",
                "persistency": "true"
            },
            "max-local-users": {
                "yangType": "leaf",
                "type": "uint8",
                "config": "false",
                "description": "The maximum number of local users that can be configured in the system.",
                "persistency": "true"
            },
            "db-passphrase": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "[0-9a-zA-Z.\\-:+=^!/*?&<>()\\[\\]{}@%$#]*"
                ],
                "description": "Passphrase used for encrypting and decrypting DB snapshots.\n                         For each command associated with DB snapshots (backup, restore, etc),\n                         this db-passphrase will be used, except when it is directly provided in each command.\n                         Automatic DB snapshots will not be enabled until this parameter is set.",
                "length": "40..200",
                "password": "true"
            }
        },
        "user": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "user": {
                                    "user-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/security",
                "key": "user-name",
                "description": "User details. Can represent both locally configured users, as well as temporary remote users.",
                "access-condition": {
                    "error-message": "access denied",
                    "description": "Only SA users can access list of all users; otherwise, each user can only view itself.",
                    "value": "$groups = 'SA' or whoami()/user-name = user-name"
                },
                "persistency": "all-true",
                "volatile-config": {
                    "when": "user-aaa-type = 'remote'"
                },
                "create-condition": {
                    "error-message": "Max number of local users reached.",
                    "value": "count(../user[user-aaa-type = 'local']) <= //security-policies/max-local-users"
                },
                "edit-condition": [
                    {
                        "error-message": "Cannot modify this user.",
                        "value": "not(user-name = $protected-users)"
                    },
                    {
                        "error-message": "Cannot modify the parameter on a remote user.",
                        "description": "Only local users can change user parameters.",
                        "value": "user-aaa-type = 'local'"
                    },
                    {
                        "error-message": "At least one local enabled security administrator(SA) user must exist.",
                        "value": "created() or (whoami()/user-name = $protected-users) or (count(../user[not(user-name = $protected-users)][user-status='enabled'][user-group='SA'][user-aaa-type='local']) >= 1)"
                    }
                ],
                "user-class": "-w:SA -r:*"
            },
            "user-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[a-zA-Z_.][a-zA-Z0-9_\\-.]*[$]?"
                ],
                "description": "The name of the user."
            },
            "password": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..200",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The password of the user.",
                "password": "true",
                "edit-condition": [
                    {
                        "error-message": "Password minimum length is 8 characters.",
                        "value": "not($pass-rules-enabled) or re-match(., '.{8}.*')"
                    },
                    {
                        "error-message": "Empty passwords are not supported.",
                        "value": ". != ''"
                    },
                    {
                        "error-message": "Password requires as least one lower case character.",
                        "value": "not($pass-rules-enabled) or re-match(., '.*[a-z].*')"
                    },
                    {
                        "error-message": "Password requires as least one upper case character.",
                        "value": "not($pass-rules-enabled) or re-match(., '.*[A-Z].*')"
                    },
                    {
                        "error-message": "Password requires as least one numeric character.",
                        "value": "not($pass-rules-enabled) or re-match(., '.*[0-9].*')"
                    },
                    {
                        "error-message": "Password requires as least one symbol.",
                        "value": "not($pass-rules-enabled) or re-match(., '.*[!-/[-`{-~:-@].*')"
                    },
                    {
                        "error-message": "Password cannot contain user-name in it.",
                        "value": "not($pass-rules-enabled) or not(re-match(., printf('.*%s.*', $target-user)))"
                    }
                ]
            },
            "user-group": {
                "yangType": "leaf-list",
                "type": "leafref",
                "path": "../../user-group/name",
                "max-elements": "10",
                "description": "Associated user groups for this user."
            },
            "display-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "The display name for this user."
            },
            "max-invalid-login": {
                "yangType": "leaf",
                "type": "uint8",
                "default": "5",
                "description": "This attribute is the maximum number of consecutive and invalid login attempts\n                        before an account is suspended (lockedout). Zero disables escalation on login failure.",
                "when": "../user-aaa-type = 'local'"
            },
            "suspension-time": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..1440",
                "units": "minutes",
                "default": "5",
                "description": "This attribute is the duration of UID suspension following consecutive invalid login attempts.\n                        Setting the value to 0 disables this behavior.",
                "when": "../user-aaa-type = 'local'"
            },
            "timeout": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..1440",
                "units": "minutes",
                "default": "60",
                "description": "This attribute is the Session Time Out Interval. If there are no messages between the user\n                        and the NE over the Time Out interval, the session is logged off. Setting the value to 0 disables\n                        this attribute (meaning the session will not time out)."
            },
            "password-aging-interval": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..365",
                "units": "days",
                "default": "90",
                "description": "This attribute is the Password Aging Interval. Setting the value to 0 disables password aging.",
                "when": "../user-aaa-type = 'local'"
            },
            "password-expiration-date": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "This attribute shows the password expiration date.",
                "config": "false",
                "when": "../user-status != 'password-aged' and \n                          ../user-aaa-type = 'local' and \n                          string(.) != ''"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enable switch for the user, allows admins to explicitly disable users."
            },
            "user-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    },
                    {
                        "password-aged": {
                            "value": "3"
                        }
                    },
                    {
                        "lockout": {
                            "value": "4"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "This attribute shows the user status.\n                        User with status 'enabled' will have access to the system.\n                        User with status 'disabled' not have access to the system.\n                        User with status 'password-aged' will have access to the system but will be forced to change his password on first-time login.\n                        User with status 'lockout' means the account is locked out due to unsuccessful login attempts.",
                "notify": "true"
            },
            "force-password-change": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Allows administrator to force user to change password on next login."
            },
            "max-sessions": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..20",
                "default": "10",
                "description": "This attribute specifies the maximum number of sessions allowed for this user."
            },
            "last-login-date": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The last login date/time of the user.",
                "default": "1970-01-01T00:00:00Z",
                "config": "false",
                "when": "../user-aaa-type = 'local'"
            },
            "failed-logins": {
                "yangType": "leaf",
                "type": "uint8",
                "default": "0",
                "config": "false",
                "description": "Number of previous failed logins. Resets to zero upon a successful login.",
                "when": "../user-aaa-type = 'local'"
            },
            "user-aaa-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "local": {
                            "value": "1",
                            "description": "User is authenticated locally."
                        }
                    },
                    {
                        "remote": {
                            "value": "2",
                            "description": "User is authenticated through remote AAA server."
                        }
                    }
                ],
                "default": "local",
                "config": "false",
                "description": "Indicates the authentication method of the user."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "user-group": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "user-group": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/security",
                "key": "name",
                "description": "List of user groups, each one with its own access permissions.\n                             Each user will be associated with a list of groups, and will derive its permissions from them.",
                "system-managed": "true",
                "user-class": "-w:SA -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Long description of the user group."
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "description": "Name of the group."
            }
        },
        "session": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "session": {
                                    "session-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/security",
                "key": "session-id",
                "config": "false",
                "max-elements": "100",
                "description": "List of currently established management layer sessions.",
                "access-condition": {
                    "error-message": "access denied",
                    "description": "Only SA users can access list of all sessions; otherwise, each user can only its own sessions.",
                    "value": "$groups = 'SA' or whoami()/user-name = session-user"
                },
                "create-condition": [
                    {
                        "error-message": "Max sessions reached for the system.",
                        "description": "Admin users are always able to login (they will kick the oldest session instead).",
                        "value": "not($max-sessions-reached) or whoami()/user-group = 'SA'"
                    },
                    {
                        "error-message": "Max sessions reached for this user.",
                        "value": "count(../session[session-user = whoami()/user-name]) + 1 <= whoami()/max-sessions"
                    }
                ],
                "user-class": "-w:SA -r:*"
            },
            "session-id": {
                "yangType": "leaf",
                "type": "string",
                "description": "Specifies a unique identifier of the current session. It indicates the\n                        IP address and transport layer port number associated with this session.\n                        If the session is initiated from the serial port, the value is 'NA'.",
                "config": "false"
            },
            "session-user": {
                "yangType": "leaf",
                "type": "string",
                "description": "User name associated with this session.",
                "config": "false"
            },
            "session-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "cli": {
                            "value": "1"
                        }
                    },
                    {
                        "snmp": {
                            "value": "2"
                        }
                    },
                    {
                        "netconf": {
                            "value": "3"
                        }
                    },
                    {
                        "restconf": {
                            "value": "4"
                        }
                    },
                    {
                        "webgui": {
                            "value": "5"
                        }
                    },
                    {
                        "gnmi": {
                            "value": "6"
                        }
                    },
                    {
                        "tl1": {
                            "value": "7"
                        }
                    }
                ],
                "description": "Session type.",
                "config": "false"
            },
            "session-protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "telnet": {
                            "value": "1"
                        }
                    },
                    {
                        "telnet-raw": {
                            "value": "2"
                        }
                    },
                    {
                        "serial": {
                            "value": "3"
                        }
                    },
                    {
                        "ssh": {
                            "value": "4"
                        }
                    },
                    {
                        "ssh-raw": {
                            "value": "5"
                        }
                    },
                    {
                        "https": {
                            "value": "6"
                        }
                    },
                    {
                        "http": {
                            "value": "7"
                        }
                    }
                ],
                "description": "Indicates which protocol has been used to establish the session.",
                "config": "false"
            },
            "created-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The timestamp the user has created this session.",
                "config": "false"
            },
            "local-ip-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "description": "Local ip address of the session",
                "when": "../session-protocol != 'serial'",
                "config": "false"
            },
            "dial-out-server-name": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../protocols/dial-out-server/name",
                "config": "false",
                "description": "Name of the dial-out-server associated with this session.",
                "when": ". != ''"
            }
        },
        "aaa-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "aaa-server": {
                                    "server-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/security",
                "key": "server-name",
                "unique": "server-priority",
                "description": "Configuration of AAA servers - RADIUS or TACACS+.",
                "create-condition": {
                    "error-message": {
                        "value": "Can only support up to 3 $1 servers."
                    },
                    "value": "count(../aaa-server[protocol-supported = current()/protocol-supported]) <= 3"
                },
                "edit-condition": {
                    "error-message": "For RADIUS servers, server-address and source-ip must be of the same address type (ipv4 or ipv6)",
                    "value": "(protocol-supported != 'RADIUS') or (source-ip = 'auto') or\n                                (not(contains(server-address, ':')) and not(contains(source-ip, ':'))) or (contains(server-address, ':') and contains(source-ip, ':'))"
                },
                "user-class": "-w:SA -r:*"
            },
            "server-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "specify the name of aaa server."
            },
            "server-priority": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "1..10",
                "mandatory": "true",
                "description": "This is used to sort the servers in the order of precedence.",
                "edit-condition": {
                    "error-message": "server-priority needs to be unique.",
                    "post-transaction": "true",
                    "value": "not( . = ../../aaa-server[ . != current()/..]/server-priority)"
                }
            },
            "protocol-supported": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "TACACSPLUS": {
                            "value": "1"
                        }
                    },
                    {
                        "RADIUS": {
                            "value": "2"
                        }
                    }
                ],
                "mandatory": "true",
                "description": "specify the protocol used for AAA.",
                "set-on-create-only": "true"
            },
            "server-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "The IP address of AAA server.",
                "mandatory": "true"
            },
            "server-port": {
                "yangType": "leaf",
                "when": "../protocol-supported = 'TACACSPLUS'",
                "type": "uint16",
                "range": "0..65535",
                "description": "AAA server port number.",
                "default": "49"
            },
            "server-port-authentication": {
                "yangType": "leaf",
                "when": "../protocol-supported = 'RADIUS'",
                "type": "uint16",
                "range": "0..65535",
                "description": "AAA server authentication port number.",
                "default": "1812"
            },
            "server-port-accounting": {
                "yangType": "leaf",
                "when": "../protocol-supported = 'RADIUS'",
                "type": "uint16",
                "range": "0..65535",
                "description": "AAA server accounting port number.",
                "default": "1813"
            },
            "shared-secret": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "The shared secret of the aaa server. The shared secret will be displayed as *.",
                "default": "sharedkey",
                "password": "true"
            },
            "role-supported": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "authentication",
                    "authorization",
                    "accounting"
                ],
                "default": "authentication authorization accounting",
                "description": "The configured roles for the AAA server.",
                "edit-condition": {
                    "error-message": "For RADIUS, authentication role implies authorization also enabled.",
                    "value": "if (../protocol-supported = 'RADIUS' and boolean(bit-is-set(., 'authentication'))) then\n                                        boolean(bit-is-set(., 'authorization'))\n                                    else\n                                        true()"
                }
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enable switch for this aaa-server."
            },
            "timeout": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..60",
                "units": "seconds",
                "default": "5",
                "description": "Specifies the response timeout of Access-Request messages sent to a AAA server in seconds."
            },
            "retry": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0..10",
                "default": "3",
                "description": "Specifies the number of attempted Access-Request messages to a single AAA server before failing authentication."
            },
            "source-ip": {
                "yangType": "leaf",
                "when": "../protocol-supported = 'RADIUS'",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "auto": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "default": "auto",
                "description": "Source IP address used for RADIUS communications.",
                "edit-condition": {
                    "error-message": "source-ip must be 'auto' or match an existing device IP",
                    "value": "boolean(/ne/system/networking/interface/ipv4-address/ip = current()) or\n                                    boolean(/ne/system/networking/interface/ipv6-address/ip = current()) or\n                                    (current() = 'auto')"
                }
            },
            "common-password": {
                "yangType": "leaf",
                "when": "../protocol-supported = 'RADIUS'",
                "type": "string",
                "length": "0..128",
                "pattern": [
                    "[ -~]*"
                ],
                "description": "Password used for RADIUS authorization after SSH public key authentication.\n                        If blank, username is reused as password for RADIUS authorization.",
                "password": "true"
            }
        },
        "image-keys": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "image-keys": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "config": "false",
                "description": "Container for image keys",
                "persistency": "true",
                "user-class": "-w:SA -r:*"
            },
            "ISKs": "container",
            "KRKs": "container"
        },
        "ISKs": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "image-keys": {
                                    "ISKs": {}
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "description": "Container for Image Signing Keys",
                "persistency": "true",
                "config": "false",
                "user-class": "-w:SA -r:*"
            },
            "ISK": "list"
        },
        "ISK": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "image-keys": {
                                    "ISKs": {
                                        "ISK": {
                                            "name": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "key": "name",
                "description": "Image Signing Key list.",
                "config": "false",
                "user-class": "-w:SA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Unique representation of the object",
                "config": "false"
            },
            "CPU": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Identifier for member CPUs on cards starts at 0",
                "config": "false"
            },
            "key-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Name of the key",
                "config": "false"
            },
            "key-serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Key Serial Number",
                "config": "false"
            },
            "issuer-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..20",
                "description": "Name of the CSA (Code Signing Appliance)",
                "config": "false"
            },
            "key-length": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "bits",
                "description": "Key length in bits",
                "config": "false"
            },
            "key-payload": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Key Payload (hex format)",
                "length": "0..1100",
                "config": "false"
            },
            "is-key-in-use": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Indicates if the key is in use in this FRU",
                "config": "false"
            },
            "is-key-verified": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Indicates if the key is verified in this FRU",
                "config": "false"
            },
            "being-deleted": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "System is in the process of deletion for this ISK.",
                "config": "false"
            },
            "KRK-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Name of the KRK (Image root key) that signed this ISK",
                "config": "false"
            },
            "signature-hash-scheme": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "SHA2_256": {
                            "value": "1"
                        }
                    },
                    {
                        "SHA2_384": {
                            "value": "2"
                        }
                    },
                    {
                        "SHA2_512": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Hashing Scheme",
                "config": "false"
            },
            "signature-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ECDSA": {
                            "value": "1"
                        }
                    },
                    {
                        "RSA": {
                            "value": "2"
                        }
                    },
                    {
                        "none": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Signature Algorithm",
                "config": "false"
            },
            "signature-payload": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Signature Payload",
                "length": "0..1024",
                "config": "false"
            },
            "signature-gen-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Signature Generation Time",
                "config": "false"
            }
        },
        "KRKs": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "image-keys": {
                                    "KRKs": {}
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "description": "Container for Image Root Keys",
                "persistency": "true",
                "config": "false",
                "user-class": "-w:SA -r:*"
            },
            "KRK": "list"
        },
        "KRK": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "image-keys": {
                                    "KRKs": {
                                        "KRK": {
                                            "name": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "key": "name",
                "description": "Image Root Key list.",
                "config": "false",
                "user-class": "-w:SA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Unique representation of the object",
                "config": "false"
            },
            "CPU": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Identifier for member CPUs on cards starts at 0",
                "config": "false"
            },
            "key-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Name of the key",
                "config": "false"
            },
            "key-serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Key Serial Number",
                "config": "false"
            },
            "issuer-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..20",
                "description": "Name of the CSA (Code Signing Appliance)",
                "config": "false"
            },
            "key-length": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "bits",
                "description": "Key length in bits",
                "config": "false"
            },
            "key-payload": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Key Payload (hex format)",
                "length": "0..1100",
                "config": "false"
            }
        },
        "key-replacement-package": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "key-replacement-package": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/keys",
                "config": "false",
                "description": "Container for KRP (Key Replacement Package)",
                "persistency": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "KRP-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "KRP name",
                "config": "false"
            },
            "KRP-version": {
                "yangType": "leaf",
                "type": "uint32",
                "description": "Package version",
                "config": "false"
            },
            "key-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Name of the key",
                "config": "false"
            },
            "key-serial-number": {
                "yangType": "leaf",
                "type": "string",
                "description": "Key Serial Number",
                "config": "false"
            },
            "issuer-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..20",
                "description": "Name of the CSA (Code Signing Appliance)",
                "config": "false"
            },
            "key-length": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "bits",
                "description": "Key length in bits",
                "config": "false"
            },
            "key-payload": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Key Payload (hex format)",
                "length": "0..1100",
                "config": "false"
            },
            "KRK-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Name of the KRK (Image root key) that signed this ISK",
                "config": "false"
            },
            "signature-hash-scheme": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "SHA2_256": {
                            "value": "1"
                        }
                    },
                    {
                        "SHA2_384": {
                            "value": "2"
                        }
                    },
                    {
                        "SHA2_512": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Hashing Scheme",
                "config": "false"
            },
            "signature-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ECDSA": {
                            "value": "1"
                        }
                    },
                    {
                        "RSA": {
                            "value": "2"
                        }
                    },
                    {
                        "none": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Signature Algorithm",
                "config": "false"
            },
            "signature-payload": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Signature Payload",
                "length": "0..1024",
                "config": "false"
            },
            "signature-gen-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Signature Generation Time",
                "config": "false"
            },
            "install-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-installed": {
                            "value": "1"
                        }
                    },
                    {
                        "installing": {
                            "value": "2"
                        }
                    },
                    {
                        "installed": {
                            "value": "3"
                        }
                    },
                    {
                        "failed": {
                            "value": "4"
                        }
                    }
                ],
                "description": "Indicates if this KRP has been installed in the system",
                "config": "false"
            }
        },
        "certificates": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "description": "All system managed local/trusted/peer X509v3 certificates on the system\n                 that were imported by download mechanism in PKCS#12 or PKCS#7 secure bundles.",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "trusted-certificate": "list",
            "local-certificate": "list",
            "peer-certificate": "list",
            "secure-applications": "container"
        },
        "trusted-certificate": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {
                                    "trusted-certificate": {
                                        "id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "key": "id",
                "description": "X509v3 CA(Root and Intermediate) certificate that the system trusts.",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..128",
                "pattern": [
                    "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                ],
                "description": "A unique object identifier for the certificate."
            },
            "version": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "v3": {
                            "value": "1"
                        }
                    }
                ],
                "default": "v3",
                "config": "false",
                "description": "X509 certificate version."
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..100",
                "config": "false",
                "description": "Ascii hexadecimal string representing a positive (long) integer assigned by the CA.\n                 It must be unique for each certificate issued by a given CA (i.e., the issuer name and\n                 serial number identify a unique certificate)"
            },
            "subject-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The subject field identifies the entity\n                 associated with the public key stored in the subject\n                 public key field.",
                "config": "false"
            },
            "issuer": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The issuer name identifies the entity that has signed\n                 and issued the certificate. Issuers (such as a CA or\n                 an RA) also issue CRLs.",
                "config": "false"
            },
            "valid-from": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date from which the certificate is valid.",
                "config": "false"
            },
            "valid-to": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date after which the certificate is deemed to have expired.",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "in-use": {
                            "value": "1"
                        }
                    },
                    {
                        "unused": {
                            "value": "2"
                        }
                    },
                    {
                        "revoked": {
                            "value": "3"
                        }
                    },
                    {
                        "expired": {
                            "value": "4"
                        }
                    },
                    {
                        "available": {
                            "value": "5"
                        }
                    }
                ],
                "config": "false",
                "description": "The current status of the X509v3 certificate."
            },
            "public-key-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa2048": {
                            "value": "1"
                        }
                    },
                    {
                        "rsa3072": {
                            "value": "2"
                        }
                    },
                    {
                        "rsa4096": {
                            "value": "3"
                        }
                    },
                    {
                        "ecdsa256": {
                            "value": "4"
                        }
                    },
                    {
                        "ecdsa384": {
                            "value": "5"
                        }
                    },
                    {
                        "ecdsa521": {
                            "value": "6"
                        }
                    }
                ],
                "config": "false",
                "description": "X509v3 certificate public key algorithm and supported key length."
            },
            "public-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Public/private key type for X509v3 certificate."
            },
            "signature-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Signature Algorithm key type which signed this X509v3 certificate."
            },
            "signature-hash-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sha256": {
                            "value": "1"
                        }
                    },
                    {
                        "sha384": {
                            "value": "2"
                        }
                    },
                    {
                        "sha512": {
                            "value": "3"
                        }
                    }
                ],
                "config": "false",
                "description": "Hash algorithm used for signing this X509v3 certificate."
            },
            "certificate-bytes": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..16384",
                "config": "false",
                "description": "A custom type that encodes the entire X.509v3 certificate\n                 as string in PEM(base64 encoding) format:\n\n                 -----BEGIN CERTIFICATE-----\n                 ...base64 encoded X509v3 certificate....\n                 -----END CERTIFICATE-----\n                "
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "local-certificate": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {
                                    "local-certificate": {
                                        "id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "key": "id",
                "description": "X509v3 end-entity certificate that represents a one of\n                     various secure application identities.",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..128",
                "pattern": [
                    "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                ],
                "description": "A unique object identifier for the certificate."
            },
            "version": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "v3": {
                            "value": "1"
                        }
                    }
                ],
                "default": "v3",
                "config": "false",
                "description": "X509 certificate version."
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..100",
                "config": "false",
                "description": "Ascii hexadecimal string representing a positive (long) integer assigned by the CA.\n                 It must be unique for each certificate issued by a given CA (i.e., the issuer name and\n                 serial number identify a unique certificate)"
            },
            "subject-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The subject field identifies the entity\n                 associated with the public key stored in the subject\n                 public key field.",
                "config": "false"
            },
            "issuer": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The issuer name identifies the entity that has signed\n                 and issued the certificate. Issuers (such as a CA or\n                 an RA) also issue CRLs.",
                "config": "false"
            },
            "valid-from": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date from which the certificate is valid.",
                "config": "false"
            },
            "valid-to": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date after which the certificate is deemed to have expired.",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "in-use": {
                            "value": "1"
                        }
                    },
                    {
                        "unused": {
                            "value": "2"
                        }
                    },
                    {
                        "revoked": {
                            "value": "3"
                        }
                    },
                    {
                        "expired": {
                            "value": "4"
                        }
                    },
                    {
                        "available": {
                            "value": "5"
                        }
                    }
                ],
                "config": "false",
                "description": "The current status of the X509v3 certificate."
            },
            "public-key-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa2048": {
                            "value": "1"
                        }
                    },
                    {
                        "rsa3072": {
                            "value": "2"
                        }
                    },
                    {
                        "rsa4096": {
                            "value": "3"
                        }
                    },
                    {
                        "ecdsa256": {
                            "value": "4"
                        }
                    },
                    {
                        "ecdsa384": {
                            "value": "5"
                        }
                    },
                    {
                        "ecdsa521": {
                            "value": "6"
                        }
                    }
                ],
                "config": "false",
                "description": "X509v3 certificate public key algorithm and supported key length."
            },
            "public-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Public/private key type for X509v3 certificate."
            },
            "signature-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Signature Algorithm key type which signed this X509v3 certificate."
            },
            "signature-hash-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sha256": {
                            "value": "1"
                        }
                    },
                    {
                        "sha384": {
                            "value": "2"
                        }
                    },
                    {
                        "sha512": {
                            "value": "3"
                        }
                    }
                ],
                "config": "false",
                "description": "Hash algorithm used for signing this X509v3 certificate."
            },
            "certificate-bytes": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..16384",
                "config": "false",
                "description": "A custom type that encodes the entire X.509v3 certificate\n                 as string in PEM(base64 encoding) format:\n\n                 -----BEGIN CERTIFICATE-----\n                 ...base64 encoded X509v3 certificate....\n                 -----END CERTIFICATE-----\n                "
            },
            "self-signed": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "config": "false",
                "description": "True if certificate is self-signed (does not have a trust chain)"
            },
            "subject-alternative-names": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..4096",
                "config": "false",
                "description": "Contains a list of subject alternative name(X509v3 extension SAN) entries \n                separated by <SPACE><PIPE><SPACE> delimiters (e.g. 'URI:https://www.example.com | DNS:example.com')."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "peer-certificate": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {
                                    "peer-certificate": {
                                        "id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "key": "id",
                "description": "X509v3 end-entity certificate that represents a trusted 'remote peer' certificate\n                     for L1 encryption secure application.",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..128",
                "pattern": [
                    "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                ],
                "description": "A unique object identifier for the certificate."
            },
            "version": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "v3": {
                            "value": "1"
                        }
                    }
                ],
                "default": "v3",
                "config": "false",
                "description": "X509 certificate version."
            },
            "serial-number": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..100",
                "config": "false",
                "description": "Ascii hexadecimal string representing a positive (long) integer assigned by the CA.\n                 It must be unique for each certificate issued by a given CA (i.e., the issuer name and\n                 serial number identify a unique certificate)"
            },
            "subject-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The subject field identifies the entity\n                 associated with the public key stored in the subject\n                 public key field.",
                "config": "false"
            },
            "issuer": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "The issuer name identifies the entity that has signed\n                 and issued the certificate. Issuers (such as a CA or\n                 an RA) also issue CRLs.",
                "config": "false"
            },
            "valid-from": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date from which the certificate is valid.",
                "config": "false"
            },
            "valid-to": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The date after which the certificate is deemed to have expired.",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "in-use": {
                            "value": "1"
                        }
                    },
                    {
                        "unused": {
                            "value": "2"
                        }
                    },
                    {
                        "revoked": {
                            "value": "3"
                        }
                    },
                    {
                        "expired": {
                            "value": "4"
                        }
                    },
                    {
                        "available": {
                            "value": "5"
                        }
                    }
                ],
                "config": "false",
                "description": "The current status of the X509v3 certificate."
            },
            "public-key-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa2048": {
                            "value": "1"
                        }
                    },
                    {
                        "rsa3072": {
                            "value": "2"
                        }
                    },
                    {
                        "rsa4096": {
                            "value": "3"
                        }
                    },
                    {
                        "ecdsa256": {
                            "value": "4"
                        }
                    },
                    {
                        "ecdsa384": {
                            "value": "5"
                        }
                    },
                    {
                        "ecdsa521": {
                            "value": "6"
                        }
                    }
                ],
                "config": "false",
                "description": "X509v3 certificate public key algorithm and supported key length."
            },
            "public-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Public/private key type for X509v3 certificate."
            },
            "signature-key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rsa": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Signature Algorithm key type which signed this X509v3 certificate."
            },
            "signature-hash-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sha256": {
                            "value": "1"
                        }
                    },
                    {
                        "sha384": {
                            "value": "2"
                        }
                    },
                    {
                        "sha512": {
                            "value": "3"
                        }
                    }
                ],
                "config": "false",
                "description": "Hash algorithm used for signing this X509v3 certificate."
            },
            "certificate-bytes": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..16384",
                "config": "false",
                "description": "A custom type that encodes the entire X.509v3 certificate\n                 as string in PEM(base64 encoding) format:\n\n                 -----BEGIN CERTIFICATE-----\n                 ...base64 encoded X509v3 certificate....\n                 -----END CERTIFICATE-----\n                "
            },
            "subject-alternative-names": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..4096",
                "config": "false",
                "description": "Contains a list of subject alternative name(X509v3 extension SAN) entries \n                separated by <SPACE><PIPE><SPACE> delimiters (e.g. 'URI:https://www.example.com | DNS:example.com')."
            },
            "white-listed": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "config": "false",
                "description": "If true, peer-certificate does not have an associated trust-chain, and was explicitly white-listed at import time. \n                    Otherwise, it has an associated trust-chain."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "secure-applications": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {
                                    "secure-applications": {}
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "description": "A collection of secured applications which\n                 uses X509v3 certificate as its digital identity",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "secure-application": "list"
        },
        "secure-application": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "certificates": {
                                    "secure-applications": {
                                        "secure-application": {
                                            "id": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/certificate",
                "key": "id",
                "description": "A secured application represents which\n                     uses X509v3 certificate as its digital identity",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:SA -r:*"
            },
            "id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..20",
                "description": "A unique object identifier for the secure application."
            },
            "active-certificate-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Foreign Key pointing to the id of the current active local certificate in local-certificate list.",
                "requires-confirmation": {
                    "when": "//local-certificate[id=current()]/self-signed = 'true'",
                    "description": "Self-signed certificates are not verified by any Certificate Authority and do not offer the same\n                                                       security as certificates issued by a trusted CA.\n                                                       Are you sure you want to continue?"
                },
                "discover-values": "seq(//local-certificate[status=('in-use','unused')]/id)",
                "edit-condition": [
                    {
                        "error-message": "Cannot assign a non existing certificate.",
                        "description": "Can only assign existing certificates",
                        "value": "(. = '') or ((. != '') and boolean(//local-certificate[id=current()]))"
                    },
                    {
                        "error-message": "Cannot assign an expired or revoked certificate.",
                        "description": "Ensure that only in-use or unused certificates can be assigned",
                        "value": "(. = '') or (//local-certificate[id=current()]/status=('in-use','unused'))"
                    }
                ]
            }
        },
        "ikev2": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "description": "Set of attributes that describe the properties of an IKEv2 protocol\n                daemon/instance that runs as part of the C-OS system software.",
                "user-class": "-w:EA -r:*",
                "persistency": "true",
                "system-managed": "true"
            },
            "data-path-encryption-san-ike-id-match": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "match": {
                            "value": "1"
                        }
                    },
                    {
                        "ignore": {
                            "value": "2"
                        }
                    }
                ],
                "default": "match",
                "description": "A global, L1 encryption-specific policy that indicates whether the NE must\n                    validate Certificate subject alternate name to match the IKE ID (OPT-IN) or not (OPT-OUT).",
                "requires-confirmation": {
                    "when": ". = 'ignore'",
                    "description": "Value cannot be configured back to match, once configured as ignore. Do you want to continue? [y/n] "
                },
                "edit-condition": {
                    "error-message": "Value cannot be set to match once marked as ignore.",
                    "description": "Value cannot be set to match once marked as ignore.",
                    "value": ". = 'ignore'"
                }
            },
            "ikev2-local-instance": "list"
        },
        "ikev2-local-instance": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "name",
                "description": "List of local IKE protocol daemon instance.",
                "system-managed": "true",
                "user-class": "-w:EA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "The name (ID) of the local IKE protocol daemon instance."
            },
            "host-card-encryption-capability": {
                "yangType": "leaf",
                "when": "../scope = 'data-path-encryption'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "yes": {
                            "value": "1",
                            "description": "Indicates that the host card supports encryption."
                        }
                    },
                    {
                        "no": {
                            "value": "2",
                            "description": "Indicates that the host card does not support encryption."
                        }
                    },
                    {
                        "unknown": {
                            "value": "3",
                            "description": "The host card's encryption capability is unknown."
                        }
                    }
                ],
                "default": "unknown",
                "config": "false",
                "description": "Indicates whether the card on which this IKEv2 local instance is\n                                running, supports the ability to do encryption."
            },
            "scope": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "data-path-encryption": {
                            "value": "1",
                            "description": "IKEv2 used in Infinera's data path encryption."
                        }
                    },
                    {
                        "management-ipsec": {
                            "value": "2",
                            "description": "IKEv2 used for C-OS control and management plane security."
                        }
                    }
                ],
                "description": "The scope of the IKEv2 instance for which security\n                                associations (SA) are being negotiated.",
                "static-config": "true"
            },
            "host-card": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../../equipment/card/name",
                "config": "false",
                "description": "The reference to the service card on which this\n                        IKEv2 protocol instance is running."
            },
            "started-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Local system timestamp when this IKEv2 instance\n                        was started.",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "traffic-affecting": {
                    "when": ". = 'lock'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "supporting-interface": "list",
            "peer-authorization-database": "container"
        },
        "supporting-interface": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "supporting-interface": {
                                            "interface": ""
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "interface",
                "config": "false",
                "description": "List of all local interfaces on which this local \" +\n                        \"IKEv2 instance listens for incoming IKE negotiations.",
                "user-class": "-w:EA -r:*"
            },
            "interface": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../../networking/interface/if-name",
                "description": "A reference to the IPv4/IPv6 interface.",
                "config": "false"
            },
            "ipv4-endpoints": "list",
            "ipv6-endpoints": "list"
        },
        "ipv4-endpoints": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "supporting-interface": {
                                            "ipv4-endpoints": {
                                                "ip-address": "",
                                                "port": ""
                                            },
                                            "interface": ""
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "ip-address port",
                "description": "All local IPv4 end-points on which this IKEv2 \" +\n                            \"instance is listening for incoming IKE negotiations.",
                "config": "false",
                "user-class": "-w:EA -r:*"
            },
            "ip-address": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../../../networking/interface/ipv4-address/ip",
                "config": "false"
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "The IKEv2 UDP listen port.",
                "config": "false"
            }
        },
        "ipv6-endpoints": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "supporting-interface": {
                                            "ipv6-endpoints": {
                                                "ip-address": "",
                                                "port": ""
                                            },
                                            "interface": ""
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "ip-address port",
                "description": "All local IPv6 end-points on which this IKEv2 \" +\n                            \"instance is listening for incoming IKE negotiations.",
                "config": "false",
                "user-class": "-w:EA -r:*"
            },
            "ip-address": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../../../networking/interface/ipv6-address/ip",
                "config": "false"
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "The IKEv2 UDP listen port.",
                "config": "false"
            }
        },
        "peer-authorization-database": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {},
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "system-managed": "true",
                "user-class": "-w:EA -r:*"
            },
            "ikev2-peer": "list"
        },
        "ikev2-peer": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "name",
                "description": "List of remote IKE peers associated with this local IKE instance.",
                "create-condition": [
                    {
                        "error-message": "IKEv2 peer cannot be created on card which is not encryption capable.",
                        "description": "Encryption related configurations are blocked when host card is not encryption capable.",
                        "value": "deleted() or ../../host-card-encryption-capability = ('yes','unknown') "
                    },
                    {
                        "error-message": "peer-identity is mandatory.",
                        "description": "peer-identity is mandatory for data-path-encryption except when data-path-encryption-san-ike-id-match is ignore\n                                         with authentication scheme being x.509-certificate.",
                        "value": "if ( ../../scope = 'data-path-encryption' and\n                                              (../../../data-path-encryption-san-ike-id-match = 'match' or authentication-scheme = 'pre-shared-key'))\n                                              then newvalue(peer-identity) else true() "
                    }
                ],
                "edit-condition": {
                    "error-message": "IKEv2 peer configuration is blocked on card which is not encryption capable.",
                    "description": "Encryption related configurations are blocked when host card is not encryption capable.",
                    "value": "deleted() or ../../host-card-encryption-capability = ('yes','unknown') "
                },
                "user-class": "-w:EA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A unique identifier for each IKE peer association."
            },
            "destination": {
                "yangType": "leaf",
                "when": "(./scope = 'management-ipsec')",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "The IPv4/IPv6 address or the domain name of the far-end IKE peer."
            },
            "port": {
                "yangType": "leaf",
                "when": "(./scope = 'management-ipsec')",
                "type": "uint16",
                "range": "0..65535",
                "description": "The UDP port on which the IKE session exists with the far-end IKE peer.",
                "default": "500"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "traffic-affecting": {
                    "when": ". = 'lock'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "local-identity-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ipv4-address": {
                            "value": "1",
                            "description": "Specifies the identity as an IPv4 address."
                        }
                    },
                    {
                        "ipv6-address": {
                            "value": "2",
                            "description": "Specifies the identity as an IPv6 address."
                        }
                    },
                    {
                        "fqdn": {
                            "value": "3",
                            "description": "Specifies the identity as a Fully-Qualified Domain Name (FQDN) string."
                        }
                    },
                    {
                        "rfc822-address": {
                            "value": "4",
                            "description": "Specifies the identity as a fully-qualified RFC5322\n                             email address string. An example is, jsmith@example.com.\n                             The string MUST NOT contain any terminators e.g., NULL,\n                             CR, etc."
                        }
                    },
                    {
                        "dnx509": {
                            "value": "5",
                            "description": "Specifies the identity as an ASN.1 X.500 Distinguished Name."
                        }
                    },
                    {
                        "id-key": {
                            "value": "6",
                            "description": "Opaque octet stream that may be used to pass vendor-specific\n                             information for proprietary types of identification."
                        }
                    }
                ],
                "default": "id-key",
                "description": "Type of local identity.",
                "edit-condition": {
                    "error-message": "local-identity-type can only be id-key in case of data-path-encryption.",
                    "description": "local-identity-type can only be id-key in case of data-path-encryption.",
                    "value": "if(../../../scope = 'data-path-encryption') then . = 'id-key' else true()"
                }
            },
            "local-identity": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..255",
                "description": "Identity of local IKE instance.",
                "edit-condition": [
                    {
                        "error-message": "local-identity cannot be configured when san-ike-id-match is set to ignore and auth-scheme is x.509-certificate.",
                        "description": "local-identity cannot be configured when san-ike-id-match is set to ignore and auth-scheme is x.509-certificate.",
                        "value": "not($is-ike-id-blocked)"
                    },
                    {
                        "error-message": "Invalid local identity.",
                        "description": "Invalid local identity.",
                        "value": "is-valid-identity(../local-identity-type, . )"
                    }
                ],
                "requires-confirmation": {
                    "when": "../authentication-scheme = 'x.509-certificate' and boolean(seq(../local-certificate)) ",
                    "description": "local-certificates will be dissociated, and this will affect traffic until a proper certificate \n                                                          is installed. Do you want to continue? [y/n] "
                },
                "default": "$ike-id"
            },
            "peer-identity-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ipv4-address": {
                            "value": "1",
                            "description": "Specifies the identity as an IPv4 address."
                        }
                    },
                    {
                        "ipv6-address": {
                            "value": "2",
                            "description": "Specifies the identity as an IPv6 address."
                        }
                    },
                    {
                        "fqdn": {
                            "value": "3",
                            "description": "Specifies the identity as a Fully-Qualified Domain Name (FQDN) string."
                        }
                    },
                    {
                        "rfc822-address": {
                            "value": "4",
                            "description": "Specifies the identity as a fully-qualified RFC5322\n                             email address string. An example is, jsmith@example.com.\n                             The string MUST NOT contain any terminators e.g., NULL,\n                             CR, etc."
                        }
                    },
                    {
                        "dnx509": {
                            "value": "5",
                            "description": "Specifies the identity as an ASN.1 X.500 Distinguished Name."
                        }
                    },
                    {
                        "id-key": {
                            "value": "6",
                            "description": "Opaque octet stream that may be used to pass vendor-specific\n                             information for proprietary types of identification."
                        }
                    }
                ],
                "default": "id-key",
                "description": "Type of peer identity.",
                "edit-condition": {
                    "error-message": "peer-identity-type can only be id-key in case of data-path-encryption.",
                    "description": "peer-identity-type can only be id-key in case of data-path-encryption.",
                    "value": "if(../../../scope = 'data-path-encryption') then . = 'id-key' else true()"
                }
            },
            "peer-identity": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..255",
                "description": "Identity of remote IKE instance.",
                "edit-condition": [
                    {
                        "error-message": "peer-identity cannot be configured when san-ike-id-match is set to ignore and auth-scheme is x.509-certificate.",
                        "description": "peer-identity cannot be configured when san-ike-id-match is set to ignore and auth-scheme is x.509-certificate.",
                        "value": "not($is-ike-id-blocked)"
                    },
                    {
                        "error-message": "Invalid peer identity.",
                        "description": "Invalid peer identity.",
                        "value": "is-valid-identity(../peer-identity-type, . )"
                    }
                ],
                "requires-confirmation": {
                    "when": "../authentication-scheme = 'x.509-certificate' and boolean(seq(../peer-certificate)) ",
                    "description": "peer-certificates will be dissociated, and this will affect traffic until a proper certificate \n                                                          is installed. Do you want to continue? [y/n] "
                }
            },
            "authentication-scheme": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "x.509-certificate": {
                            "value": "1"
                        }
                    },
                    {
                        "pre-shared-key": {
                            "value": "2"
                        }
                    }
                ],
                "default": "x.509-certificate",
                "description": "IKEv2 authentication mechanism with the peer.",
                "edit-condition": [
                    {
                        "error-message": "Authentication-scheme is PSK. psk-hex value is mandatory for key-type hex.",
                        "value": "autocomplete() or (if (. = 'pre-shared-key' and ../pre-shared-key-type = 'hex') then newvalue(../psk-hex)\n                                                else true())"
                    },
                    {
                        "error-message": "Authentication-scheme is PSK. psk-ascii value is mandatory for key-type ascii.",
                        "value": "autocomplete() or (if (. = 'pre-shared-key' and ../pre-shared-key-type = 'ascii') then newvalue(../psk-ascii)\n                                                else true())"
                    }
                ]
            },
            "pre-shared-key-type": {
                "yangType": "leaf",
                "when": "../authentication-scheme='pre-shared-key'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ascii": {
                            "value": "1"
                        }
                    },
                    {
                        "hex": {
                            "value": "2"
                        }
                    }
                ],
                "default": "ascii",
                "description": "The type of pre-shared key scheme.",
                "edit-condition": [
                    {
                        "error-message": "Authentication-scheme is PSK. psk-hex value is mandatory for key-type hex.",
                        "value": "autocomplete() or (if (. = 'hex') then newvalue(../psk-hex)\n                                                else true())"
                    },
                    {
                        "error-message": "Authentication-scheme is PSK. psk-ascii value is mandatory for key-type ascii.",
                        "value": "autocomplete() or (if (. = 'ascii') then newvalue(../psk-ascii)\n                                                else true())"
                    }
                ]
            },
            "psk-ascii": {
                "yangType": "leaf",
                "when": "../pre-shared-key-type='ascii'",
                "type": "string",
                "length": "8..128",
                "mandatory": "true",
                "description": "Plain-text ASCII value for the PSK.",
                "password": "true",
                "traffic-affecting": "true"
            },
            "psk-hex": {
                "yangType": "leaf",
                "when": "../pre-shared-key-type='hex'",
                "type": "string",
                "length": "8..256",
                "mandatory": "true",
                "description": "Binary, hexadecimal value for the PSK.",
                "password": "true",
                "traffic-affecting": "true",
                "edit-condition": {
                    "error-message": "Not valid hex key !",
                    "value": "re-match(., '[0-9A-Fa-f]+')"
                }
            },
            "psk-configured-timestamp": {
                "yangType": "leaf",
                "when": "../authentication-scheme='pre-shared-key'",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Local NE timestamp when the PSK was configured.",
                "config": "false"
            },
            "psk-lifetime": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and  ../authentication-scheme='pre-shared-key'",
                "type": "uint8",
                "range": "7..180",
                "units": "days",
                "default": "90",
                "description": "Absolute time duration in days after which the PSK will expire.",
                "edit-condition": {
                    "error-message": "psk-lifetime has to be larger than psk-expiration-warning.",
                    "value": ". > (../psk-expiration-warning)"
                }
            },
            "psk-expiration-warning": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and  ../authentication-scheme='pre-shared-key'",
                "type": "uint8",
                "range": "1..173",
                "units": "days",
                "default": "14",
                "description": "An absolute time duration (in days) at which the NE provides a warning when the PSK is about to expire .",
                "edit-condition": {
                    "error-message": "psk-expiration-warning has to be smaller than psk-lifetime.",
                    "value": ". < (../psk-lifetime)"
                }
            },
            "local-secure-app": {
                "yangType": "leaf",
                "when": "../../../scope='management-ipsec' and ../authentication-scheme='x.509-certificate'",
                "type": "leafref",
                "path": "../../../../../certificates/secure-applications/secure-application/id",
                "description": "A reference to the secure application."
            },
            "local-certificate": {
                "yangType": "leaf-list",
                "when": "../../../scope='data-path-encryption'",
                "type": "leafref",
                "path": "../../../../../certificates/local-certificate/id",
                "max-elements": "3",
                "description": "The locally installed certificates that the local IKEv2 instance\n                                uses with this particular IKE peer for purposes of authentication.\n                                Customers can pick one or more certificates from the list of\n                                locally installed certificates to use during IKE authentication\n                                with this far-end IKE peer. This attribute is a 'list' that\n                                allows for multiple certificates to be added → This helps in\n                                rotating the local certificate.",
                "edit-condition": {
                    "error-message": "Configuration of expired/revoked certificates are not allowed.",
                    "description": "Configuration of expired/revoked certificates are blocked.",
                    "value": "not(local-cert-status(current()) = ('expired','revoked'))"
                }
            },
            "peer-certificate": {
                "yangType": "leaf-list",
                "when": "../../../scope='data-path-encryption'",
                "type": "leafref",
                "path": "../../../../../certificates/peer-certificate/id",
                "max-elements": "3",
                "description": "The locally installed list of peer certificates that the\n                                instance uses to authenticate the far-end IKE peer. These\n                                certificates indicate the identity of this far-end peer.\n                                Customers can indicate multiple certificates from the list of\n                                locally installed 'peer' certificates to use during IKE\n                                authentication with this far-end IKE peer. This attribute\n                                is a 'list' that allows for multiple certificates to be\n                                added → This helps in certificate rotation and revocation.",
                "edit-condition": {
                    "error-message": "Configuration of expired/revoked certificates are not allowed.",
                    "description": "Configuration of expired/revoked certificates are blocked.",
                    "value": "not(peer-cert-status(current()) = ('expired','revoked'))"
                }
            },
            "last-used-local-certificate": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and ../authentication-scheme='x.509-certificate'",
                "type": "leafref",
                "path": "../../../../../certificates/local-certificate/id",
                "config": "false",
                "description": "A reference to the specific local entity leaf certificate\n                                that was last used during the IKE authentication with the\n                                far-end peer."
            },
            "last-used-peer-certificate": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and ../authentication-scheme='x.509-certificate'",
                "type": "leafref",
                "path": "../../../../../certificates/peer-certificate/id",
                "config": "false",
                "description": "A reference to the specific peer leaf certificate\n                                that was last used to authenticate the far-end IKE peer."
            },
            "re-key-frequency": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "3600..86400",
                "units": "seconds",
                "default": "28800",
                "description": "The re-key frequency for the IKE security association with the far-end IKE peer.\n                                         Range and default values may be context-specific.",
                "edit-condition": {
                    "error-message": "re-key-frequency has to be lesser than re-auth-frequency.",
                    "description": "re-key-frequency has to be lesser than re-auth-frequency.",
                    "value": ". < (../re-auth-frequency)"
                }
            },
            "re-key-fail-policy": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kill-traffic": {
                            "value": "1",
                            "description": "Bring down the data path encrypted service\n                                        if re-key was unsuccessful."
                        }
                    },
                    {
                        "continue-traffic": {
                            "value": "2",
                            "description": "Continue the data path encrypted service even\n                                        if re-key was unsuccessful."
                        }
                    }
                ],
                "default": "continue-traffic",
                "description": "Indicates the NE's policy and consequent action when\n                                re-keying the IKE security association is unsuccessful."
            },
            "re-key-traffic-kill-offset": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and ../re-key-fail-policy='kill-traffic'",
                "type": "uint32",
                "range": "0..86400",
                "units": "seconds",
                "default": "0",
                "description": "If the re-key fail policy is set to KILL-TRAFFIC,\n                                        this attribute indicates the amount of time the\n                                            system waits before killing all encrypted data\n                                            security associations that are tied to this IKE SA."
            },
            "re-auth-frequency": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "3600..604800",
                "units": "seconds",
                "default": "43200",
                "description": "The re-authentication frequency for the IKE security association with the far-end IKE peer.\n                                         Range and default values may be context-specific",
                "edit-condition": {
                    "error-message": "re-auth-frequency has to be larger than re-key-frequency.",
                    "description": "re-auth-frequency has to be larger than re-key-frequency.",
                    "value": ". > (../re-key-frequency)"
                }
            },
            "re-auth-fail-policy": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kill-traffic": {
                            "value": "1",
                            "description": "Bring down the data path encrypted service\n                                        if re-authentication was unsuccessful."
                        }
                    },
                    {
                        "continue-traffic": {
                            "value": "2",
                            "description": "Continue the data path encrypted service even\n                                        if re-authentication was unsuccessful."
                        }
                    }
                ],
                "default": "kill-traffic",
                "description": "Indicates the NE's policy and consequent action when\n                                re-authenticating the far-end IKE peer is unsuccessful."
            },
            "re-auth-traffic-kill-offset": {
                "yangType": "leaf",
                "when": "../../../scope='data-path-encryption' and ../re-auth-fail-policy='kill-traffic'",
                "type": "uint32",
                "range": "0..86400",
                "units": "seconds",
                "default": "0",
                "description": "If the re-authentication fail policy is set to\n                                KILL-TRAFFIC, this attribute indicates the\n                                amount of time the system waits before killing\n                                all Child SAs that are associated with this IKE SA."
            },
            "ike-sa-proposal": "list",
            "security-policy-database": "container"
        },
        "ike-sa-proposal": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "ike-sa-proposal": {
                                                    "number": ""
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "number",
                "min-elements": "1",
                "description": "A list of protocol proposals when negotiating the IKE SA \" +\n                        \"with the far-end IKE peer.",
                "user-class": "-w:EA -r:*"
            },
            "number": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "description": "The proposal number for the IKE SA."
            },
            "protocol-id": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "IKE": {
                            "value": "1"
                        }
                    },
                    {
                        "ESP": {
                            "value": "3"
                        }
                    }
                ],
                "description": "The protocol ID (type) for which the IKE proposal applies to.",
                "default": "IKE",
                "config": "false"
            },
            "encryption-algorithm": "list",
            "integrity-algorithm": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Can be used only when the encryption algorithm uses authenticated \" +\n                            \"encryption/AEAD (such as AES-GCM). Cannot be used with other non \" + \n                            \"AEAD encryption algorithms such as AES-CTR or AES-CBC."
                        }
                    },
                    {
                        "hmac-sha2-256-128": {
                            "value": "1"
                        }
                    },
                    {
                        "hmac-sha2-384-192": {
                            "value": "2"
                        }
                    },
                    {
                        "hmac-sha2-512-256": {
                            "value": "3"
                        }
                    },
                    {
                        "hmac-sha1-160": {
                            "value": "4"
                        }
                    },
                    {
                        "hmac-sha1-96": {
                            "value": "5"
                        }
                    }
                ],
                "description": "A list of IPsec SA integrity algorithms advertised to the far-end IKE peer."
            },
            "dh-group": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0"
                        }
                    },
                    {
                        "dhe-2048": {
                            "value": "1"
                        }
                    },
                    {
                        "dhe-3072": {
                            "value": "2"
                        }
                    },
                    {
                        "dhe-4096": {
                            "value": "3"
                        }
                    },
                    {
                        "dhe-6144": {
                            "value": "4"
                        }
                    },
                    {
                        "dhe-8192": {
                            "value": "5"
                        }
                    },
                    {
                        "ecp-256": {
                            "value": "6"
                        }
                    },
                    {
                        "ecp-384": {
                            "value": "7"
                        }
                    },
                    {
                        "ecp-521": {
                            "value": "8"
                        }
                    },
                    {
                        "curve-25519": {
                            "value": "9"
                        }
                    },
                    {
                        "curve-448": {
                            "value": "10"
                        }
                    }
                ],
                "description": "A list of IKE SA Diffie-Hellman groups \" +\n                            \"advertised to the far-end IKE peer."
            },
            "prf": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0"
                        }
                    },
                    {
                        "hmac-sha2-256": {
                            "value": "1"
                        }
                    },
                    {
                        "hmac-sha2-384": {
                            "value": "2"
                        }
                    },
                    {
                        "hmac-sha2-512": {
                            "value": "3"
                        }
                    },
                    {
                        "hmac-sha1": {
                            "value": "4"
                        }
                    }
                ],
                "description": "A list of IKE SA pseudo-random functions \" +\n                            \"advertised to the far-end IKE peer."
            }
        },
        "security-policy-database": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {},
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "description": "Represents the Security Policy Database (SPD) that\n                                specifies what services are to be offered to IP datagrams\n                                (in case of management IPsec) or to data path encryption\n                                facilities.",
                "edit-condition": [
                    {
                        "error-message": "Secure-entity already associated to another ikev2-peer.",
                        "description": "Secure-entity already associated to another ikev2-peer.",
                        "value": "not(//ikev2-peer/security-policy-database[ . != current()]/associated-secure-entity = current()/associated-secure-entity)"
                    },
                    {
                        "error-message": "IKEv2 peer configuration is blocked on card which is not encryption capable.",
                        "description": "Encryption related configurations are blocked when host card is not encryption capable.",
                        "value": "deleted() or ../../../host-card-encryption-capability = ('yes','unknown') "
                    }
                ],
                "user-class": "-w:EA -r:*"
            },
            "associated-secure-entity": {
                "yangType": "leaf-list",
                "when": "../../../../scope='data-path-encryption'",
                "type": "leafref",
                "path": "../../../../../../../../services/data-path-encryption/secure-entity/name",
                "description": "List of all SPD entries associated with with\n                                    this far-end peer for which IKE negotiates security\n                                    associations (keys). The SAs can either be for data path\n                                    encryption, or IPsec.",
                "discover-values": "/ne/services/data-path-encryption/secure-entity/name"
            },
            "ipsec-spd-entry": "list"
        },
        "ipsec-spd-entry": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "name",
                "ordered-by": "user",
                "user-class": "-w:EA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A unique name to identify this SPD entry."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "priority": {
                "yangType": "leaf",
                "type": "uint8",
                "mandatory": "true",
                "description": "A priority value for each SPD entry. This is\n                         used to give precedence to the SPD entries."
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "User configurable label/description."
            },
            "ipsec-traffic-selector": "list",
            "action": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "protect": {
                            "value": "100"
                        }
                    },
                    {
                        "bypass": {
                            "value": "200"
                        }
                    },
                    {
                        "discard": {
                            "value": "300"
                        }
                    }
                ],
                "default": "protect",
                "description": "Indicates the IPsec treatment given to the IP datagrams."
            },
            "ipsec-protocol": {
                "yangType": "leaf",
                "when": "../action = 'protect'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "esp": {
                            "value": "100"
                        }
                    }
                ],
                "default": "esp",
                "description": "Indicates the use of ESP or AH IPsec protocols."
            },
            "mode": {
                "yangType": "leaf",
                "when": "../action = 'protect'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "tunnel": {
                            "value": "100"
                        }
                    },
                    {
                        "transport": {
                            "value": "200"
                        }
                    }
                ],
                "default": "tunnel",
                "description": "Indicates if the IPsec session should operate in \n                         transport or tunnel mode."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "ipsec-sa-re-key": "container",
            "ipsec-sa-proposal": "list",
            "anti-replay-window": {
                "yangType": "leaf",
                "when": "../action = 'protect'",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            "disabled"
                        ]
                    },
                    {
                        "type": "uint32",
                        "range": "32..1024"
                    }
                ],
                "default": "disabled",
                "description": "Indicates the replay window size tolerance."
            }
        },
        "ipsec-traffic-selector": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-traffic-selector": {
                                                            "name": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "name",
                "user-class": "-w:EA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A unique name to identify this IPsec traffic selector entry."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "local-subnet": "list",
            "remote-subnet": "list",
            "next-layer-protocol": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint8"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "any": {
                                    "value": "0"
                                }
                            },
                            {
                                "opaque": {
                                    "value": "255"
                                }
                            }
                        ]
                    }
                ],
                "default": "any",
                "description": "Indicates the inner protocol (upper layer), obtained\n                         from the IPv4 protocol or the IPv6 next header field."
            },
            "local-ports": "list",
            "remote-ports": "list"
        },
        "local-subnet": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-traffic-selector": {
                                                            "local-subnet": {
                                                                "prefix": ""
                                                            },
                                                            "name": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "prefix",
                "description": "This is a list of ranges of IPv4/IPv6\n                         addresses (unicast, broadcast (IPv4 only)).",
                "user-class": "-w:EA -r:*"
            },
            "prefix": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    }
                ],
                "description": "The ip-prefix type represents an IP prefix and is IP\n      version neutral.  The format of the textual representations\n      implies the IP version."
            }
        },
        "remote-subnet": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-traffic-selector": {
                                                            "remote-subnet": {
                                                                "prefix": ""
                                                            },
                                                            "name": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "prefix",
                "description": "This is a list of ranges of IPv4/IPv6\n                         addresses (unicast, broadcast (IPv4 only)).",
                "user-class": "-w:EA -r:*"
            },
            "prefix": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    }
                ],
                "description": "The ip-prefix type represents an IP prefix and is IP\n      version neutral.  The format of the textual representations\n      implies the IP version."
            }
        },
        "local-ports": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-traffic-selector": {
                                                            "local-ports": {
                                                                "start": "",
                                                                "stop": ""
                                                            },
                                                            "name": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "start stop",
                "user-class": "-w:EA -r:*"
            },
            "start": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..65535",
                "description": "The port-number type represents a 16-bit port number of an\n      Internet transport-layer protocol such as UDP, TCP, DCCP, or\n      SCTP.  Port numbers are assigned by IANA.  A current list of\n      all assignments is available from <http://www.iana.org/>.  \n\n      Note that the port number value zero is reserved by IANA.  In\n      situations where the value zero does not make sense, it can\n      be excluded by subtyping the port-number type.\n      In the value set and its semantics, this type is equivalent\n      to the InetPortNumber textual convention of the SMIv2."
            },
            "stop": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..65535",
                "description": "The port-number type represents a 16-bit port number of an\n      Internet transport-layer protocol such as UDP, TCP, DCCP, or\n      SCTP.  Port numbers are assigned by IANA.  A current list of\n      all assignments is available from <http://www.iana.org/>.  \n\n      Note that the port number value zero is reserved by IANA.  In\n      situations where the value zero does not make sense, it can\n      be excluded by subtyping the port-number type.\n      In the value set and its semantics, this type is equivalent\n      to the InetPortNumber textual convention of the SMIv2."
            }
        },
        "remote-ports": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-traffic-selector": {
                                                            "remote-ports": {
                                                                "start": "",
                                                                "stop": ""
                                                            },
                                                            "name": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "start stop",
                "user-class": "-w:EA -r:*"
            },
            "start": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..65535",
                "description": "The port-number type represents a 16-bit port number of an\n      Internet transport-layer protocol such as UDP, TCP, DCCP, or\n      SCTP.  Port numbers are assigned by IANA.  A current list of\n      all assignments is available from <http://www.iana.org/>.  \n\n      Note that the port number value zero is reserved by IANA.  In\n      situations where the value zero does not make sense, it can\n      be excluded by subtyping the port-number type.\n      In the value set and its semantics, this type is equivalent\n      to the InetPortNumber textual convention of the SMIv2."
            },
            "stop": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..65535",
                "description": "The port-number type represents a 16-bit port number of an\n      Internet transport-layer protocol such as UDP, TCP, DCCP, or\n      SCTP.  Port numbers are assigned by IANA.  A current list of\n      all assignments is available from <http://www.iana.org/>.  \n\n      Note that the port number value zero is reserved by IANA.  In\n      situations where the value zero does not make sense, it can\n      be excluded by subtyping the port-number type.\n      In the value set and its semantics, this type is equivalent\n      to the InetPortNumber textual convention of the SMIv2."
            }
        },
        "ipsec-sa-re-key": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-sa-re-key": {},
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "when": "../action = 'protect'",
                "user-class": "-w:EA -r:*"
            },
            "frequency": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "3600..86400",
                "units": "seconds",
                "default": "14400",
                "description": "The rekeying frequency for the IPsec child \n                             security association with the far-end peer."
            },
            "bytes": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            "disabled"
                        ]
                    },
                    {
                        "type": "uint32",
                        "range": "1048576..4294967295"
                    }
                ],
                "units": "bytes",
                "default": "1073741824",
                "description": "The rekeying frequency for the IPsec child\n                             security association with the far-end peer\n                             based on amount of bytes transmitted."
            }
        },
        "ipsec-sa-proposal": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-sa-proposal": {
                                                            "number": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "key": "number",
                "min-elements": "1",
                "description": "A list of protocol proposals when negotiating the IPsec SA\n                         for this SPD entry with the far-end IKE peer.",
                "user-class": "-w:EA -r:*"
            },
            "number": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "description": "The proposal number for the IPsec SA."
            },
            "protocol-id": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "IKE": {
                            "value": "1"
                        }
                    },
                    {
                        "ESP": {
                            "value": "3"
                        }
                    }
                ],
                "description": "The protocol ID (type) for which the IPsec Child SA \" + \n                            \"proposal applies to.",
                "default": "ESP",
                "config": "false"
            },
            "encryption-algorithm": "list",
            "integrity-algorithm": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0",
                            "description": "Can be used only when the encryption algorithm uses authenticated \" +\n                            \"encryption/AEAD (such as AES-GCM). Cannot be used with other non \" + \n                            \"AEAD encryption algorithms such as AES-CTR or AES-CBC."
                        }
                    },
                    {
                        "hmac-sha2-256-128": {
                            "value": "1"
                        }
                    },
                    {
                        "hmac-sha2-384-192": {
                            "value": "2"
                        }
                    },
                    {
                        "hmac-sha2-512-256": {
                            "value": "3"
                        }
                    },
                    {
                        "hmac-sha1-160": {
                            "value": "4"
                        }
                    },
                    {
                        "hmac-sha1-96": {
                            "value": "5"
                        }
                    }
                ],
                "description": "A list of IPsec SA integrity algorithms \n                             advertised to the far-end IKE peer."
            },
            "dh-group": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "0"
                        }
                    },
                    {
                        "dhe-2048": {
                            "value": "1"
                        }
                    },
                    {
                        "dhe-3072": {
                            "value": "2"
                        }
                    },
                    {
                        "dhe-4096": {
                            "value": "3"
                        }
                    },
                    {
                        "dhe-6144": {
                            "value": "4"
                        }
                    },
                    {
                        "dhe-8192": {
                            "value": "5"
                        }
                    },
                    {
                        "ecp-256": {
                            "value": "6"
                        }
                    },
                    {
                        "ecp-384": {
                            "value": "7"
                        }
                    },
                    {
                        "ecp-521": {
                            "value": "8"
                        }
                    }
                ],
                "description": "A list of IPsec SA Diffie-Hellman groups\n                             advertised to the far-end IKE peer. NOTE:\n                             The 'min-elements' is 1, which means perfect\n                             forward secrecy (PFS) for IPsec Child SA is\n                             always enabled.",
                "min-elements": "1"
            },
            "esn": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "esn": {
                            "value": "0",
                            "description": "Indicate support for ESN."
                        }
                    }
                ],
                "default": "esn",
                "config": "false",
                "description": "Extended Sequence Number (ESN) support."
            }
        },
        "ike-sa-proposal.encryption-algorithm": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "ike-sa-proposal": {
                                                    "encryption-algorithm": {
                                                        "algorithm": "",
                                                        "key-length": ""
                                                    },
                                                    "number": ""
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ikev2",
                "key": "algorithm key-length",
                "min-elements": "1",
                "description": "A list of IKE SA encryption algorithms \" +\n                            \"advertised to the far-end IKE peer.",
                "user-class": "-w:EA -r:*"
            },
            "algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "aes-gcm-8": {
                            "value": "1",
                            "description": "AES-GCM with 8-byte ICV."
                        }
                    },
                    {
                        "aes-gcm-12": {
                            "value": "2",
                            "description": "AES-GCM with 12-byte ICV."
                        }
                    },
                    {
                        "aes-gcm-16": {
                            "value": "3",
                            "description": "AES-GCM with 16-byte ICV."
                        }
                    },
                    {
                        "aes-ctr": {
                            "value": "4",
                            "description": "AES-CTR mode."
                        }
                    },
                    {
                        "aes-cbc": {
                            "value": "5",
                            "description": "AES-CBC mode."
                        }
                    },
                    {
                        "aes-ccm-8": {
                            "value": "6",
                            "description": "AES-CCM with 8-byte ICV."
                        }
                    },
                    {
                        "aes-ccm-12": {
                            "value": "7",
                            "description": "AES-CCM with 12-byte ICV."
                        }
                    },
                    {
                        "aes-ccm-16": {
                            "value": "8",
                            "description": "AES-CCM with 16-byte ICV."
                        }
                    }
                ],
                "description": "The encryption algorithm for the IKE SA.",
                "mandatory": "true"
            },
            "key-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "key-length-128": {
                            "value": "128"
                        }
                    },
                    {
                        "key-length-192": {
                            "value": "192"
                        }
                    },
                    {
                        "key-length-256": {
                            "value": "256"
                        }
                    }
                ],
                "units": "bits",
                "description": "The IKE SA encryption algorithm key length.",
                "mandatory": "true"
            }
        },
        "ipsec-sa-proposal.encryption-algorithm": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "security": {
                                "ikev2": {
                                    "ikev2-local-instance": {
                                        "peer-authorization-database": {
                                            "ikev2-peer": {
                                                "security-policy-database": {
                                                    "ipsec-spd-entry": {
                                                        "ipsec-sa-proposal": {
                                                            "encryption-algorithm": {
                                                                "algorithm": "",
                                                                "key-length": ""
                                                            },
                                                            "number": ""
                                                        },
                                                        "name": ""
                                                    }
                                                },
                                                "name": ""
                                            }
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/ipsec",
                "when": "../../ipsec-protocol = 'ESP'",
                "key": "algorithm key-length",
                "min-elements": "1",
                "description": "A list of IPsec SA encryption algorithms \n                             advertised to the far-end IKE peer.",
                "user-class": "-w:EA -r:*"
            },
            "algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "null": {
                            "value": "0",
                            "description": "NULL encryption, used when authentication-only (no confidentiality) usage is desired"
                        }
                    },
                    {
                        "aes-gcm-8": {
                            "value": "1",
                            "description": "AES-GCM with 8-byte ICV."
                        }
                    },
                    {
                        "aes-gcm-12": {
                            "value": "2",
                            "description": "AES-GCM with 12-byte ICV."
                        }
                    },
                    {
                        "aes-gcm-16": {
                            "value": "3",
                            "description": "AES-GCM with 16-byte ICV."
                        }
                    },
                    {
                        "aes-ctr": {
                            "value": "4",
                            "description": "AES-CTR mode."
                        }
                    },
                    {
                        "aes-cbc": {
                            "value": "5",
                            "description": "AES-CBC mode."
                        }
                    },
                    {
                        "aes-ccm-8": {
                            "value": "6",
                            "description": "AES-CCM with 8-byte ICV."
                        }
                    },
                    {
                        "aes-ccm-12": {
                            "value": "7",
                            "description": "AES-CCM with 12-byte ICV."
                        }
                    },
                    {
                        "aes-ccm-16": {
                            "value": "8",
                            "description": "AES-CCM with 16-byte ICV."
                        }
                    },
                    {
                        "chacha20-poly1305": {
                            "value": "9",
                            "description": "ChaCha20/Poly1305 with 128 bit ICV "
                        }
                    }
                ],
                "description": "The encryption algorithm for the IPsec SA.",
                "mandatory": "true"
            },
            "key-length": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "key-length-128": {
                            "value": "128"
                        }
                    },
                    {
                        "key-length-192": {
                            "value": "192"
                        }
                    },
                    {
                        "key-length-256": {
                            "value": "256"
                        }
                    }
                ],
                "units": "bits",
                "description": "The IPsec SA encryption algorithm key length.",
                "mandatory": "true"
            }
        },
        "syslog": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "description": "Central configuration for logging functionality via syslog.\n                Includes control of local log files, remote logging configuration and logging in serial console.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "remote-logging-switch": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If false, disable all remote logging destinations."
            },
            "source-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "Source address or hostname to inserted in HOST field of log message.",
                "default": "localhost"
            },
            "log-file-message-coalescence": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If true, prevent flooding of identical messages during abnormal conditions. \n                             If there are multiple identical log messages for log files, there will be one \n                             message logged fully and follow with 'last message repeated n times' message."
            },
            "log-server": "list",
            "log-file": "list",
            "log-console": "container",
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "log-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-server": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "key": "name",
                "max-elements": "10",
                "description": "Grouping the configuration parameters for log forwarding.",
                "volatile-config": {
                    "when": "origin = 'dhcp'"
                },
                "create-condition": {
                    "error-message": "Maximum number of syslog servers reached.",
                    "value": "count(../log-server) <= 10"
                },
                "edit-condition": {
                    "error-message": "Repeated syslog server (same address/port/transport).",
                    "value": "not(../log-server[name != current()/name][address=current()/address][port=current()/port][transport=current()/transport][origin!='dhcp'])"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "[A-Za-z0-9_\\-]*"
                ],
                "description": "The name for the endpoint to forwarding logs to."
            },
            "address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "The leaf uniquely specifies the ipv4 or ipv6 address of the remote host.",
                "mandatory": "true"
            },
            "transport": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "tcp": {
                            "value": "1"
                        }
                    },
                    {
                        "udp": {
                            "value": "2"
                        }
                    }
                ],
                "default": "udp",
                "description": "It is the transport protocol used when forwarding logs."
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "This leaf specifies the port number used to deliver messages to the remote server.",
                "default": "514"
            },
            "destination-facility-override": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "disabled": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint8",
                        "range": "0..11 | 16..23"
                    }
                ],
                "default": "disabled",
                "description": "When not disabled, this leaf specifies the facility used in messages delivered\n                                 to the remote server."
            },
            "source-facilities": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "List of syslog facilities used in this configuration.\n                         Will default to 'all' facilities if not provided.",
                "max-elements": "24",
                "default": "('all')"
            },
            "pattern-match": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Regex pattern that all entries need to obey."
            },
            "message-coalescence": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If true, prevent flooding of identical messages during abnormal conditions. \n                                 If there are multiple identical log messages, there will be one message logged fully \n                                 and follow with 'last message repeated n times' message."
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Allows to toggle this syslog server."
            },
            "message-format": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "rfc5424": {
                            "value": "1",
                            "description": "<${PRI}>1 ${ISODATE} ${HOST} ${PROGRAM} ${PID} ${MSGID} ${SDATA} $MSG\n                                         <45>1 2019-11-20T12:55:50+00:00 localhost syslog-ng 2392 - [meta sequenceId='1'] syslog-ng starting up; version='3.24.1'"
                        }
                    },
                    {
                        "rfc3164": {
                            "value": "2",
                            "description": "<${PRI}> ${TIMESTAMP} ${HOSTNAME} ${TAG} $MSG\n                                         <34>Nov 20 12:55:50 localhost syslog-ng[2392] syslog-ng starting up; version='3.24.1'"
                        }
                    }
                ],
                "default": "rfc5424",
                "description": "Identifies the syslog messaging format"
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "manual": {
                            "value": "1",
                            "description": "Indicates Log-server address has been manually configured."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates Log-server address  has been assigned to this\n                                system by a DHCP server."
                        }
                    }
                ],
                "default": "manual",
                "description": "Log-server address assignment method, user can convert\n                        DHCP configured Log-server entry into a manual configured by changing this attribute.",
                "edit-condition": {
                    "error-message": "Cannot manually set a log-server to origin dhcp.",
                    "description": "User cannot manually set a log-server to origin dhcp.",
                    "value": "request-info('internal') or . != 'dhcp' "
                }
            },
            "log-server-facility-filter": "list"
        },
        "log-server-facility-filter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-server": {
                                    "log-server-facility-filter": {
                                        "name": ""
                                    },
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "key": "name",
                "description": "Selector that allows to filter log messages based on their source facilities and severities.\n                                 This is a filter based on source-facilities leaf-list (can only add filter to the configured\n                                 source facilities).",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "Identifies a single syslog facility, or all of them if value is 'all'."
            },
            "severity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "emergency": {
                            "value": "0",
                            "description": "System is unusable."
                        }
                    },
                    {
                        "alert": {
                            "value": "1",
                            "description": "Action must be taken immediately."
                        }
                    },
                    {
                        "critical": {
                            "value": "2",
                            "description": "Critical conditions."
                        }
                    },
                    {
                        "error": {
                            "value": "3",
                            "description": "Error conditions."
                        }
                    },
                    {
                        "warning": {
                            "value": "4",
                            "description": "Warning conditions."
                        }
                    },
                    {
                        "notice": {
                            "value": "5",
                            "description": "Normal but significant condition."
                        }
                    },
                    {
                        "informational": {
                            "value": "6",
                            "description": "Informational messages."
                        }
                    },
                    {
                        "debug": {
                            "value": "7",
                            "description": "Debug-level messages."
                        }
                    }
                ],
                "default": "informational",
                "description": "The system log selected severity level for forwarding.\n                         The default severity level is all levels"
            },
            "compare-op": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "equals-or-higher": {
                            "value": "1"
                        }
                    },
                    {
                        "equals": {
                            "value": "2"
                        }
                    },
                    {
                        "not-equals": {
                            "value": "3"
                        }
                    }
                ],
                "default": "equals-or-higher",
                "description": "This leaf describes the option to specify how the severity comparison is performed.\n                         The default severity level is all levels"
            }
        },
        "log-file": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-file": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "key": "name",
                "description": "Local syslog files supported by the system.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..128",
                "pattern": [
                    "[A-Za-z0-9_\\-]*"
                ],
                "description": "The file name without the .log extension."
            },
            "number-of-files": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "default": "10",
                "description": "Maximum number of log files retained. \n                        When rotating files due to max size being reached, the oldest files will be discarded \n                        if the total number of files is greater than number-of-files."
            },
            "max-file-size": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "units": "megabytes",
                "default": "10",
                "description": "Maximum file size before rotation."
            },
            "source-facilities": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "List of syslog facilities used in this configuration.\n                         Will default to 'all' facilities if not provided.",
                "max-elements": "24",
                "default": "seq(split($my-log[4], ','))"
            },
            "pattern-match": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Regex pattern that all entries need to obey.",
                "default": "$my-log[3]"
            },
            "log-file-facility-filter": "list"
        },
        "log-file-facility-filter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-file": {
                                    "log-file-facility-filter": {
                                        "name": ""
                                    },
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "key": "name",
                "description": "Selector that allows to filter log messages based on their source facilities and severities.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "Identifies a single syslog facility, or all of them if value is 'all'."
            },
            "severity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "emergency": {
                            "value": "0",
                            "description": "System is unusable."
                        }
                    },
                    {
                        "alert": {
                            "value": "1",
                            "description": "Action must be taken immediately."
                        }
                    },
                    {
                        "critical": {
                            "value": "2",
                            "description": "Critical conditions."
                        }
                    },
                    {
                        "error": {
                            "value": "3",
                            "description": "Error conditions."
                        }
                    },
                    {
                        "warning": {
                            "value": "4",
                            "description": "Warning conditions."
                        }
                    },
                    {
                        "notice": {
                            "value": "5",
                            "description": "Normal but significant condition."
                        }
                    },
                    {
                        "informational": {
                            "value": "6",
                            "description": "Informational messages."
                        }
                    },
                    {
                        "debug": {
                            "value": "7",
                            "description": "Debug-level messages."
                        }
                    }
                ],
                "default": "if ($my-log[5] != '') then \n                                    split(split($my-log[5], ',')[contains(.,concat(current()/../name, '='))], '=')[2]\n                                 else\n                                    get-yang-default(.)",
                "description": "The system log selected severity level for forwarding.\n                         The default severity level is all levels"
            },
            "compare-op": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "equals-or-higher": {
                            "value": "1"
                        }
                    },
                    {
                        "equals": {
                            "value": "2"
                        }
                    },
                    {
                        "not-equals": {
                            "value": "3"
                        }
                    }
                ],
                "default": "equals-or-higher",
                "description": "This leaf describes the option to specify how the severity comparison is performed.\n                         The default severity level is all levels"
            }
        },
        "log-console": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-console": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "description": "Console logging supported by the system.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "source-facilities": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "List of syslog facilities used in this configuration.\n                         Will default to 'all' facilities if not provided.",
                "max-elements": "24",
                "default": "('all')"
            },
            "log-console-facility-filter": "list",
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Switches on and off the console logging."
            }
        },
        "log-console-facility-filter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "syslog": {
                                "log-console": {
                                    "log-console-facility-filter": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/syslog",
                "key": "name",
                "description": "Selector that allows to filter log messages based on their source facilities and severities.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "kernel": {
                            "value": "0",
                            "description": "Kernel messages."
                        }
                    },
                    {
                        "user-level": {
                            "value": "1",
                            "description": "User level messages."
                        }
                    },
                    {
                        "mail-system": {
                            "value": "2",
                            "description": "Mail system."
                        }
                    },
                    {
                        "system-daemons": {
                            "value": "3",
                            "description": "System daemons."
                        }
                    },
                    {
                        "authentication": {
                            "value": "4",
                            "description": "Authentication/authorization attempt messages."
                        }
                    },
                    {
                        "syslog-internal": {
                            "value": "5",
                            "description": "Messages generated internally by syslog."
                        }
                    },
                    {
                        "line-printer": {
                            "value": "6",
                            "description": "Line printer subsystem."
                        }
                    },
                    {
                        "network-news": {
                            "value": "7",
                            "description": "Network news subsystem."
                        }
                    },
                    {
                        "uucp": {
                            "value": "8",
                            "description": "UUCP subsystem."
                        }
                    },
                    {
                        "clock-daemon-9": {
                            "value": "9",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "security": {
                            "value": "10",
                            "description": "Security related events and error messages."
                        }
                    },
                    {
                        "ftp-daemon": {
                            "value": "11",
                            "description": "FTP daemon."
                        }
                    },
                    {
                        "ntp": {
                            "value": "12",
                            "description": "NTP subsystem."
                        }
                    },
                    {
                        "log-audit": {
                            "value": "13",
                            "description": "Log audit."
                        }
                    },
                    {
                        "log-alert": {
                            "value": "14",
                            "description": "Log alert."
                        }
                    },
                    {
                        "clock-daemon-15": {
                            "value": "15",
                            "description": "Clock daemon."
                        }
                    },
                    {
                        "local0": {
                            "value": "16",
                            "description": "Local use 0 (unused)."
                        }
                    },
                    {
                        "local1": {
                            "value": "17",
                            "description": "Alarm logs."
                        }
                    },
                    {
                        "local2": {
                            "value": "18",
                            "description": "All commands, in a protocol agnostic format."
                        }
                    },
                    {
                        "local3": {
                            "value": "19",
                            "description": "All commands, in a protocol specific format (CLI, NETCONF, etc)."
                        }
                    },
                    {
                        "local4": {
                            "value": "20",
                            "description": "Line card logs above severity level ERROR."
                        }
                    },
                    {
                        "local5": {
                            "value": "21",
                            "description": "Initial HW initialization and EEPROM status sysinfo log."
                        }
                    },
                    {
                        "local6": {
                            "value": "22",
                            "description": "Any changes to the configuration DB, both internal or externally triggered."
                        }
                    },
                    {
                        "local7": {
                            "value": "23",
                            "description": "All Infinera applications."
                        }
                    },
                    {
                        "all": {
                            "value": "100",
                            "description": "Selects all other syslog facilities."
                        }
                    }
                ],
                "description": "Identifies a single syslog facility, or all of them if value is 'all'."
            },
            "severity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "emergency": {
                            "value": "0",
                            "description": "System is unusable."
                        }
                    },
                    {
                        "alert": {
                            "value": "1",
                            "description": "Action must be taken immediately."
                        }
                    },
                    {
                        "critical": {
                            "value": "2",
                            "description": "Critical conditions."
                        }
                    },
                    {
                        "error": {
                            "value": "3",
                            "description": "Error conditions."
                        }
                    },
                    {
                        "warning": {
                            "value": "4",
                            "description": "Warning conditions."
                        }
                    },
                    {
                        "notice": {
                            "value": "5",
                            "description": "Normal but significant condition."
                        }
                    },
                    {
                        "informational": {
                            "value": "6",
                            "description": "Informational messages."
                        }
                    },
                    {
                        "debug": {
                            "value": "7",
                            "description": "Debug-level messages."
                        }
                    }
                ],
                "default": "if (../name = 'all') then 'critical' else get-yang-default(.)",
                "description": "The system log selected severity level for forwarding.\n                         The default severity level is all levels"
            },
            "compare-op": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "equals-or-higher": {
                            "value": "1"
                        }
                    },
                    {
                        "equals": {
                            "value": "2"
                        }
                    },
                    {
                        "not-equals": {
                            "value": "3"
                        }
                    }
                ],
                "default": "equals-or-higher",
                "description": "This leaf describes the option to specify how the severity comparison is performed.\n                         The default severity level is all levels"
            }
        },
        "protocols": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Container of management protocol objects.",
                "user-class": "-w:SA,NA -r:*",
                "system-managed": "true"
            },
            "ssh": "container",
            "cli": "container",
            "serial-console": "container",
            "netconf": "container",
            "tl1": "container",
            "restconf": "container",
            "grpc": "container",
            "snmp": "container",
            "http-file-server": "container",
            "dial-out-server": "list",
            "data-model": "list"
        },
        "ssh": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "ssh": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Control of ssh access.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Enables direct access to shell via ssh."
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "Port listening for ssh login that goes directly to shell.",
                "default": "8022"
            },
            "pre-login-message": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1440",
                "description": "Welcome message displayed before user login."
            },
            "post-login-message": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1440",
                "default": "****************************************** Warning ******************************************\n\nThis system is restricted to authorized users for business purposes. Unauthorized access is a\nviolation of the law. This service may be monitored for administrative and security reasons.\nBy proceeding, you consent to this monitoring.\n\n*********************************************************************************************\n",
                "description": "Welcome message displayed after user login."
            },
            "ssh-host-key": "list",
            "ssh-known-host": "list",
            "ssh-authorized-key": "list"
        },
        "ssh-host-key": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "ssh": {
                                    "ssh-host-key": {
                                        "public-key-algorithm": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "public-key-algorithm",
                "config": "false",
                "max-elements": "2",
                "description": "Global(for server and client side SSHv2 based apps) SSHv2 host keys.\n                           There needs to be one host key per supported algorithm.\n                           The system auto-generates a host-key in default DB and\n                           additional host-keys can be added/overwritten via the ssh-keygen RPC.",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:SA,NA -r:*"
            },
            "public-key-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ecdsa-sha2-nistp256": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp384": {
                            "value": "2"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp521": {
                            "value": "3"
                        }
                    },
                    {
                        "ssh-rsa2048": {
                            "value": "4"
                        }
                    },
                    {
                        "ssh-rsa3072": {
                            "value": "5"
                        }
                    },
                    {
                        "ssh-rsa4096": {
                            "value": "6"
                        }
                    }
                ],
                "description": "The type of host key algorithm in use.",
                "config": "false"
            },
            "public-key": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..2048",
                "description": "SSHv2(OpenSSH Portable) host public key component encoded in PEM format:\n                 <key type><SPACE>...base64 encoded OpenSSH public key....<SPACE><comment>\n                ",
                "config": "false"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label.",
                "config": "false"
            },
            "fingerprint-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "md5": {
                            "value": "1"
                        }
                    },
                    {
                        "sha256": {
                            "value": "2"
                        }
                    }
                ],
                "description": "The type of hash algorithm in use for computing the key fingerprint",
                "config": "false"
            },
            "fingerprint": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..95",
                "description": "Fingerprint string as a sequence of pairs of hex digits.\n                             SSHv2 public key fingerprint examples for MD5 and SHA256 hash:\n                             md5sum fingerprint => b2:9c:cd:30:b1:38:e3:d1:17:d6:73:eb:03:9a:80:83\n                             sha256sum fingerprint => f4:61:58:e4:90:65:c4:70:98:7f:d1:40:0a:d8:d9:79:14:e6:91:dc:b6:ed:91:8c:c0:df:d9:65:db:dd:a0:18\n                            ",
                "config": "false"
            }
        },
        "ssh-known-host": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "ssh": {
                                    "ssh-known-host": {
                                        "id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "id",
                "max-elements": "100",
                "description": "SSHv2 known hosts entry.",
                "user-class": "-w:SA -r:*",
                "persistency": "all-true"
            },
            "id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A unique identifier (name) for this entry."
            },
            "address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "The hostname/IPv4/IPv6 address of the allowed/known peer host.",
                "mandatory": "true",
                "set-on-create-only": "true"
            },
            "public-key-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ecdsa-sha2-nistp256": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp384": {
                            "value": "2"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp521": {
                            "value": "3"
                        }
                    },
                    {
                        "ssh-rsa2048": {
                            "value": "4"
                        }
                    },
                    {
                        "ssh-rsa3072": {
                            "value": "5"
                        }
                    },
                    {
                        "ssh-rsa4096": {
                            "value": "6"
                        }
                    }
                ],
                "description": "The type of host key algorithm in use.",
                "mandatory": "true",
                "set-on-create-only": "true"
            },
            "public-key": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..2048",
                "description": "SSHv2(OpenSSH Portable) host public key component encoded in PEM format:\n                 <key type><SPACE>...base64 encoded OpenSSH public key....<SPACE><comment>\n                ",
                "mandatory": "true",
                "set-on-create-only": "true"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "ssh-authorized-key": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "ssh": {
                                    "ssh-authorized-key": {
                                        "user-name": "",
                                        "key-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "user-name key-id",
                "description": "SSHv2 authorized key.\n                         Each authorized key entry contains a trusted public key for SSHv2 user authentication.",
                "user-class": "-w:SA -r:*",
                "persistency": "all-true",
                "create-condition": {
                    "error-message": "Max of 4 ssh-authorized-keys per user.",
                    "value": "count(//ssh-authorized-key[user-name = current()/user-name]) <= 4"
                }
            },
            "user-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[a-zA-Z_.][a-zA-Z0-9_\\-.]*[$]?"
                ],
                "description": "User owning the authorized key. Can be local or remote user.",
                "discover-values": "//user/user-name"
            },
            "key-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A unique identifier (name) for this entry."
            },
            "public-key-algorithm": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ecdsa-sha2-nistp256": {
                            "value": "1"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp384": {
                            "value": "2"
                        }
                    },
                    {
                        "ecdsa-sha2-nistp521": {
                            "value": "3"
                        }
                    },
                    {
                        "ssh-rsa2048": {
                            "value": "4"
                        }
                    },
                    {
                        "ssh-rsa3072": {
                            "value": "5"
                        }
                    },
                    {
                        "ssh-rsa4096": {
                            "value": "6"
                        }
                    }
                ],
                "description": "The type of host key algorithm in use.",
                "config": "false"
            },
            "public-key": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..2048",
                "description": "SSHv2(OpenSSH Portable) host public key component encoded in PEM format:\n                 <key type><SPACE>...base64 encoded OpenSSH public key....<SPACE><comment>\n                ",
                "mandatory": "true",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "public-key is not unique.",
                    "value": "not(. = //ssh-authorized-key[. != current()/..]/public-key)"
                }
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "cli": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "cli": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Configuration of the Command Line Interface (CLI) management protocol.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enables/disables the CLI management protocol.",
                "edit-condition": {
                    "error-message": "Not possible to disable CLI from within a CLI session.",
                    "value": "if (. = 'false') then \n                                            current-session()/session-type != 'cli'\n                                        else\n                                            true()"
                }
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "The port which listens for CLI access via ssh.",
                "default": "22"
            },
            "script-dir": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..80",
                "config": "false",
                "description": "Location in the filesystem where CLI scripts are stored.",
                "persistency": "true"
            },
            "cli-alias": "list",
            "cli-session-config": "list"
        },
        "cli-alias": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "cli": {
                                    "cli-alias": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "name",
                "description": "List of aliases used in CLI.\n                        Can only be accessed via 'alias/unalias' CLI commands.",
                "cli-hidden": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..256",
                "description": "Name of the alias"
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..1024",
                "description": "Value of the alias"
            }
        },
        "serial-console": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "serial-console": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Global configuration of all serial console ports in the system.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "global-switch": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "Allow access by serial-console. Note: each console port can override this global behavior."
            },
            "global-timeout": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "minutes",
                "default": "60",
                "description": "Serial console inactivity timeout. Can be set to zero to disable inactivity timer."
            }
        },
        "netconf": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "netconf": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Configuration of the NETCONF management protocol.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enables/disables the NETCONF management protocol.",
                "edit-condition": {
                    "error-message": "Not possible to disable NETCONF from within a NETCONF session.",
                    "value": "if (. = 'false') then \n                                            current-session()/session-type != 'netconf'\n                                        else\n                                            true()"
                }
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "The port which listens for NETCONF access via ssh.",
                "default": "830"
            },
            "annotate-cli-name": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "If enabled, annotates NETCONF XML output with cli names for traceability."
            },
            "hello-timeout": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..3600",
                "units": "seconds",
                "default": "2",
                "description": "Specifies the number of seconds that a session may exist\n                        before the hello PDU is received/transmitted.  A session will be\n                        dropped if no hello PDU is received/transmitted before this number\n                        of seconds elapses."
            }
        },
        "tl1": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "tl1": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "TL1 protocol configuration",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "tl1-over-ssh-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Decides whether TL1 protocol is accessible over SSH or not."
            },
            "ssh-interactive-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "SSH port that gives access to interactive interface of TL1 protocol server.",
                "default": "9095"
            },
            "ssh-scripting-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "SSH port that gives access to non-interactive or scripting interface of TL1 protocol server. This interface does not echo terminal characters to client.",
                "default": "9096"
            }
        },
        "restconf": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "restconf": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Configuration of the RESTCONF management protocol.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable RESTCONF access."
            },
            "http-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "User configurable switch to enable or disable RESTCONF HTTP access.",
                "edit-condition": {
                    "error-message": "RESTCONF HTTP access not supported in secure mode.",
                    "value": ".='false' or //security-policies/secure-mode = 'false'"
                }
            },
            "https-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable RESTCONF HTTPS access."
            },
            "http-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "User configurable RESTCONF HTTP port.",
                "default": "8080"
            },
            "https-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "User configurable RESTCONF HTTPS port.",
                "default": "8181"
            },
            "cookie-timeout": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..300",
                "units": "minutes",
                "default": "5",
                "description": "Timeout of a cookie based RESTCONF session."
            },
            "api-root": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Root of the RESTCONF API.",
                "persistency": "true"
            }
        },
        "grpc": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "grpc": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Configuration of the gNMI/gRPC management protocol.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enables/disables the gRPC management protocol."
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "The port which listens for gNMI access via gRPC.",
                "default": "50051"
            }
        },
        "snmp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "snmp": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Configuration of the SNMP management protocol.",
                "system-managed": "true",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable global SNMP access."
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "User configurable port where the NE is listening for SNMP requests.",
                "default": "161"
            },
            "snmp-engine-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "config": "false",
                "description": "SNMP EngineID of the NE.\n                                 The EngineID will follow the EngineID format 3 defined in RFC3411.\n                                 The MAC address in the Engine ID will be the first MAC address of the MAC addresses Pool of the NE.",
                "persistency": "true"
            },
            "snmp-community": "list",
            "snmp-target": "list",
            "snmpv3-user": "list"
        },
        "snmp-community": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "snmp": {
                                    "snmp-community": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "name",
                "max-elements": "20",
                "description": "List of SNMP Community Strings.\n                                 Note: trap-community-string is located in the snmp-target object.",
                "create-condition": {
                    "error-message": "snmpv2 not allowed on secure mode.",
                    "value": "//security-policies/secure-mode = false()"
                },
                "user-class": "-w:SA,NA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Name for the community (different from the community string itself)."
            },
            "community-string": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[!-~\\s]*"
                ],
                "mandatory": "true",
                "description": "Community String.",
                "weak-password": "true",
                "edit-condition": {
                    "error-message": "community-string already in use.",
                    "value": "not(. = //snmp-community[. != current()/..]/community-string)"
                }
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable this community-string."
            },
            "community-string-access": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "read-only": {
                            "value": "1"
                        }
                    }
                ],
                "default": "read-only",
                "description": "SNMP access right of this community string."
            }
        },
        "snmp-target": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "snmp": {
                                    "snmp-target": {
                                        "target-name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "target-name",
                "max-elements": "20",
                "description": "List of SNMP targets (trap listeners)",
                "logical-parent-type": "snmpv3-user",
                "edit-condition": {
                    "error-message": "snmpv2 not allowed on secure mode.",
                    "value": "//security-policies/secure-mode = false() or snmp-version = 'v3'"
                },
                "user-class": "-w:SA,NA -r:*"
            },
            "target-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Identifies the SNMP target"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable this snmp-target."
            },
            "snmp-version": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "v2c": {
                            "value": "2"
                        }
                    },
                    {
                        "v3": {
                            "value": "3"
                        }
                    }
                ],
                "default": "v2c",
                "description": "snmp version.",
                "set-on-create-only": "true"
            },
            "trap-community-string": {
                "yangType": "leaf",
                "when": "../snmp-version = 'v2c'",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[!-~\\s]*"
                ],
                "default": "infinera",
                "description": "Community string used for SNMP traps",
                "weak-password": "true"
            },
            "snmpv3-user": {
                "yangType": "leaf",
                "when": "../snmp-version = 'v3' ",
                "type": "leafref",
                "path": "../../snmpv3-user/snmpv3-user-name",
                "mandatory": "true",
                "description": "Indicate the snmpv3 user."
            },
            "target-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "IP address or hostname of the SNMP target",
                "mandatory": "true"
            },
            "target-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..65535",
                "description": "UDP port number.",
                "default": "162"
            },
            "target-transport": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "udp": {
                            "value": "1"
                        }
                    }
                ],
                "default": "udp",
                "description": "Type of transport for the SNMP target"
            }
        },
        "snmpv3-user": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "snmp": {
                                    "snmpv3-user": {
                                        "snmpv3-user-name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "snmpv3-user-name",
                "max-elements": "20",
                "description": "SNMPv3 user configuration.",
                "edit-condition": [
                    {
                        "error-message": "If auth is enabled, auth-passphrase must be provided.",
                        "value": "autocomplete() or not(newvalue(user-sec-level)) or (user-sec-level='no-auth-no-priv') or newvalue(auth-passphrase)"
                    },
                    {
                        "error-message": "If priv is enabled, priv-passphrase must be provided.",
                        "value": "autocomplete() or not(newvalue(user-sec-level)) or (user-sec-level='no-auth-no-priv') or (user-sec-level='auth-no-priv') or newvalue(priv-passphrase)"
                    },
                    {
                        "error-message": "If auth-protocol is changed, the auth-passphrase needs to be provided again",
                        "value": "not(newvalue(auth-protocol)) or (oldvalue(auth-protocol) = newvalue(auth-protocol)) or newvalue(auth-passphrase)"
                    },
                    {
                        "error-message": "If priv-protocol is changed, the priv-passphrase needs to be provided again",
                        "value": "not(newvalue(priv-protocol)) or (oldvalue(priv-protocol) = newvalue(priv-protocol)) or newvalue(priv-passphrase)"
                    },
                    {
                        "error-message": "This user security level is not allowed in secure-mode.",
                        "value": "autocomplete() or //security-policies/secure-mode=false() or \n                                            ./user-sec-level = 'auth-priv'"
                    }
                ],
                "delete-condition": {
                    "error-message": "Not possible to delete a snmpv3 user while it is associated with a configured snmp-target.",
                    "value": "not(../snmp-target[snmpv3-user= current()/snmpv3-user-name])"
                },
                "user-class": "-w:SA,NA -r:*"
            },
            "snmpv3-user-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[a-z_.][a-z0-9_\\-.]*[$]?"
                ],
                "description": "SNMPv3 user name."
            },
            "user-sec-level": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "auth-priv": {
                            "value": "1"
                        }
                    },
                    {
                        "auth-no-priv": {
                            "value": "2"
                        }
                    },
                    {
                        "no-auth-no-priv": {
                            "value": "3"
                        }
                    }
                ],
                "default": "no-auth-no-priv",
                "description": "Specifies the SNMPv3 user security level.\n                                     Note: when NE is in secure-mode, only auth-priv is allowed."
            },
            "auth-protocol": {
                "yangType": "leaf",
                "when": "../user-sec-level != 'no-auth-no-priv'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "SHA": {
                            "value": "1"
                        }
                    }
                ],
                "default": "SHA",
                "description": "Specifies the authentication protocol that the SNMPv3 user being created will use."
            },
            "auth-passphrase": {
                "yangType": "leaf",
                "when": "../user-sec-level != 'no-auth-no-priv'",
                "type": "string",
                "length": "8..64",
                "mandatory": "true",
                "description": "Specifies the SNMPv3 authentication pass phrase.",
                "password": "true"
            },
            "priv-protocol": {
                "yangType": "leaf",
                "when": "../user-sec-level = 'auth-priv'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "AES128": {
                            "value": "1"
                        }
                    },
                    {
                        "AES192": {
                            "value": "2"
                        }
                    },
                    {
                        "AES256": {
                            "value": "3"
                        }
                    },
                    {
                        "DES": {
                            "value": "4"
                        }
                    }
                ],
                "default": "AES128",
                "description": "Specifies the privacy protocol that the SNMPv3 user being created will use."
            },
            "priv-passphrase": {
                "yangType": "leaf",
                "when": "../user-sec-level = 'auth-priv'",
                "type": "string",
                "length": "8..64",
                "mandatory": "true",
                "description": "Specifies the SNMPv3 privacy pass phrase.",
                "password": "true"
            }
        },
        "http-file-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "http-file-server": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "HTTP file server configuration",
                "user-class": "-w:SA,NA -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable file server access."
            },
            "http-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "User configurable switch to enable or disable HTTP protocol for file server access."
            },
            "https-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "User configurable switch to enable or disable HTTPS protocol for file server access."
            },
            "http-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "User configurable HTTP port.",
                "default": "8980"
            },
            "https-port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "User configurable HTTPS port.",
                "default": "8981"
            },
            "url-base": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..100",
                "default": "/transfer",
                "config": "false",
                "description": "The base URL use to redirect to the file transfer application."
            }
        },
        "dial-out-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "dial-out-server": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "name",
                "max-elements": "10",
                "description": "Dial-out server configuration and state. \nA dial-out-server configuration automatically triggers a connection against the server, with client-server functionality is inverted;\nthis connection is then used to establish a normal NBI session.",
                "user-class": "-w:NA,NE -r:*",
                "create-condition": {
                    "error-message": "dial-out-server address and port must be unique.",
                    "description": "Disallow creation of dial-out-servers with same address and port",
                    "value": "not(../dial-out-server[. != current()][address = current()/address and port = current()/port])"
                }
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Dial-out-server name."
            },
            "address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "Dial-out-server IPv4/IPv6 address or hostname.",
                "mandatory": "true"
            },
            "protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "netconf": {
                            "value": "1"
                        }
                    }
                ],
                "default": "netconf",
                "description": "Dial-out-server session type."
            },
            "port": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..65535",
                "description": "Dial-out-server session port.",
                "default": "4334"
            },
            "transport": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ssh": {
                            "value": "1"
                        }
                    }
                ],
                "config": "false",
                "description": "Dial-out-server transport protocol.",
                "persistency": "true"
            },
            "retry-policy": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "progressive-back-off": {
                            "value": "1",
                            "description": "Try to reconnect with an exponentional time interval."
                        }
                    },
                    {
                        "retry-then-stop": {
                            "value": "2",
                            "description": "Retry a fixed number of times with a fixed timeout interval."
                        }
                    },
                    {
                        "retry-forever": {
                            "value": "3",
                            "description": "Retry forever with a fixed timeout interval."
                        }
                    }
                ],
                "default": "progressive-back-off",
                "description": "Retry policy after a timeout."
            },
            "retry": {
                "yangType": "leaf",
                "when": "../retry-policy = 'retry-then-stop'",
                "type": "uint8",
                "range": "0 .. 5",
                "default": "3",
                "description": "Number of retries before giving up."
            },
            "timeout": {
                "yangType": "leaf",
                "when": "../retry-policy != 'progressive-back-off'",
                "type": "uint8",
                "range": "2..255",
                "units": "seconds",
                "default": "10",
                "description": "Wait time until timeout."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "auto-connect": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If true, automatically tries to connect to this dial-out-server. Note that a server with auto-connect false can still be connected manually via the call-home RPC."
            },
            "connection-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "connected": {
                            "value": "1",
                            "description": "Session is currently established with 'home'."
                        }
                    },
                    {
                        "connecting": {
                            "value": "2",
                            "description": "Running through the retries; also used if connected, and session abruptly is terminated."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "All retries have failed, no further attempts are being done to connect to it."
                        }
                    },
                    {
                        "closed": {
                            "value": "4",
                            "description": "session was established, and was gracefully closed."
                        }
                    },
                    {
                        "disabled": {
                            "value": "5",
                            "description": "Enabled parameter is false."
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "Connection state to the dial-out-server.",
                "notify": "true"
            }
        },
        "data-model": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "protocols": {
                                "data-model": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "name",
                "description": "Available YANG Data models for loading/unloading.",
                "system-managed": "true",
                "edit-condition": {
                    "error-message": "openroadm model cannot be toggled manually",
                    "value": "not(name='openroadm')"
                },
                "user-class": "-w:SA,NA -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "config": "false",
                "description": "Data model description.",
                "persistency": "true"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Model name."
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Allows to load/unload this data model.A loaded data model means that it can be used via the management interfaces."
            }
        },
        "scheduled-tasks": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "scheduled-tasks": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "description": "Container of individual user-configurable scheduled commands.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "task": "list"
        },
        "task": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "scheduled-tasks": {
                                "task": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/mgmt-protocols",
                "key": "name",
                "description": "User configurable scheduled task. Can define single occurrence or periodic commands.",
                "create-condition": [
                    {
                        "error-message": "Maximum number of scheduled tasks already reached.",
                        "value": "count(../task) <= 20"
                    },
                    {
                        "error-message": "Non-periodic tasks require start-time to be provided.",
                        "value": "newvalue(frequency) or newvalue(start-time)"
                    }
                ],
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Identifier of the scheduled task."
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enable switch of this task; allows user to disable a task without deleting it."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "inhibited",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "command": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..1024",
                "mandatory": "true",
                "description": "Command that is scheduled. Content will depend on the command-type.",
                "edit-condition": {
                    "error-message": "Current user cannot schedule this command due to access denied.",
                    "description": "Command being scheduled needs to be accessible by current user. If task is added via ZTP, it is implicitly allowed.",
                    "value": "request-info('internal') or authorize-command(., whoami()/user-group)"
                }
            },
            "command-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "cli": {
                            "value": "1",
                            "description": "CLI command."
                        }
                    }
                ],
                "default": "cli",
                "description": "Type of configured command."
            },
            "frequency": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "pattern": [
                    "(((1000)|(0*\\d{1,3}))w)? *(((1000)|(0*\\d{1,3}))d)? *(((1000)|(0*\\d{1,3}))h)? *(((1000)|(0*\\d{1,3}))m)? *(((1000)|(0*\\d{1,3}))s)?"
                ],
                "description": "Frequency interval for setting up a periodic scheduled task.\n                                 If empty (default value), represents a single-occurrence task.\n                                 Frequency interval is provided using the following syntax:\n                                    '[xw] [xd] [xh] [xm] [xs]'\n                                 where:\n                                     w(eeks), d(ays), h(ours), m(inutes), s(seconds).\n                                 Examples:\n                                    2w          - two weeks\n                                    5d 12h      - 5 days and 12 hours\n                                    1h 7m 30s   - 1 hour and 7 minutes and 30 seconds"
            },
            "start-time": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    },
                    {
                        "type": "string",
                        "length": "5..8",
                        "pattern": [
                            "\\d{2}:\\d{2}(:\\d{2})?"
                        ],
                        "description": "Timestamp with hours-minutes and optionally seconds.\n                     Leading zero is required (04:00 instead of 4:00).\n                     Examples:\n                        23:00     (same as 23:00:00)\n                        01:43:30\n                    "
                    }
                ],
                "description": "Timestamp to start the task. For periodic tasks, this is the timestamp for the first trigger of the task.\n                                 If not provided, uses current time as start-time."
            },
            "end-time": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "never": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    },
                    {
                        "type": "string",
                        "length": "5..8",
                        "pattern": [
                            "\\d{2}:\\d{2}(:\\d{2})?"
                        ],
                        "description": "Timestamp with hours-minutes and optionally seconds.\n                     Leading zero is required (04:00 instead of 4:00).\n                     Examples:\n                        23:00     (same as 23:00:00)\n                        01:43:30\n                    "
                    }
                ],
                "description": "Timestamp to stop the periodic task.\n                                 Not relevant for single-occurrence tasks.",
                "default": "never",
                "when": "../frequency != ''"
            },
            "persistent": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "If true, this scheduled task will persist a system restart."
            },
            "task-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "scheduled": {
                            "value": "1",
                            "description": "Task is enabled and will run when the time comes."
                        }
                    },
                    {
                        "disabled": {
                            "value": "2",
                            "description": "Task is disabled by user."
                        }
                    },
                    {
                        "finished": {
                            "value": "3",
                            "description": "Task has reached its end-time, or single occurrence task was already executed."
                        }
                    },
                    {
                        "ongoing": {
                            "value": "4",
                            "description": "Task is enabled and is currently running"
                        }
                    }
                ],
                "default": "scheduled",
                "config": "false",
                "description": "Current operational state of the scheduled task.",
                "persistency": "true"
            },
            "next-run": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "never": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    },
                    {
                        "type": "string",
                        "length": "5..8",
                        "pattern": [
                            "\\d{2}:\\d{2}(:\\d{2})?"
                        ],
                        "description": "Timestamp with hours-minutes and optionally seconds.\n                     Leading zero is required (04:00 instead of 4:00).\n                     Examples:\n                        23:00     (same as 23:00:00)\n                        01:43:30\n                    "
                    }
                ],
                "description": "Next run timestamp. May be 'never' for finished tasks.",
                "default": "never",
                "config": "false",
                "persistency": "true"
            },
            "previous-run": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "never": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                        ],
                        "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                    },
                    {
                        "type": "string",
                        "length": "5..8",
                        "pattern": [
                            "\\d{2}:\\d{2}(:\\d{2})?"
                        ],
                        "description": "Timestamp with hours-minutes and optionally seconds.\n                     Leading zero is required (04:00 instead of 4:00).\n                     Examples:\n                        23:00     (same as 23:00:00)\n                        01:43:30\n                    "
                    }
                ],
                "description": "Previous task run timestamp.",
                "default": "never",
                "config": "false",
                "persistency": "true"
            },
            "previous-result": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "success": {
                            "value": "1"
                        }
                    },
                    {
                        "fail": {
                            "value": "2"
                        }
                    }
                ],
                "config": "false",
                "description": "Previous task run result.",
                "when": "../previous-run != 'never'",
                "persistency": "true"
            },
            "previous-output": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "config": "false",
                "description": "Output of the previous task run.",
                "when": "../previous-run != 'never'",
                "persistency": "true"
            }
        },
        "ztp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "ztp": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/ztp",
                "config": "false",
                "description": "Zero Touch Provisioning status.\n                         Please see RPC 'change-ztp-mode' for ZTP configuration.",
                "user-class": "-w:SA -r:*",
                "persistency": "all-true",
                "notify": "all-true"
            },
            "ztp-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "enabled",
                "description": "User set mode of ZTP. This flag is set via change-ztp-mode RPC that is allowed even when NBI is locked.",
                "config": "false"
            },
            "ztp-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ztp-init": {
                            "value": "0"
                        }
                    },
                    {
                        "dhcp-in-progress": {
                            "value": "1"
                        }
                    },
                    {
                        "image-download-in-progress": {
                            "value": "2"
                        }
                    },
                    {
                        "image-install-in-progress": {
                            "value": "3"
                        }
                    },
                    {
                        "custom-script-execution-in-progress": {
                            "value": "4"
                        }
                    },
                    {
                        "multi-chassis-setup-in-progress": {
                            "value": "5"
                        }
                    },
                    {
                        "configuration-apply-in-progress": {
                            "value": "6"
                        }
                    },
                    {
                        "ztp-completed": {
                            "value": "7"
                        }
                    },
                    {
                        "ztp-state-unknown": {
                            "value": "8"
                        }
                    },
                    {
                        "ztp-disabled": {
                            "value": "9"
                        }
                    },
                    {
                        "wait-before-ztp-restart": {
                            "value": "10"
                        }
                    },
                    {
                        "ztp-disable-in-progress": {
                            "value": "11"
                        }
                    },
                    {
                        "cleanup-on-ztp-completion": {
                            "value": "12"
                        }
                    }
                ],
                "default": "ztp-init",
                "description": "Current state of ZTP service",
                "config": "false"
            },
            "ztp-details": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Additional information on the current state",
                "config": "false"
            },
            "ztp-completion-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-completed": {
                            "value": "1"
                        }
                    },
                    {
                        "completed": {
                            "value": "2"
                        }
                    }
                ],
                "default": "not-completed",
                "description": "Summarized completion status of ZTP on the node",
                "config": "false"
            }
        },
        "transfer": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "transfer": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/transfer",
                "config": "false",
                "description": "Information associated with file transfer.",
                "persistency": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "transfer-status": "list"
        },
        "transfer-status": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "transfer": {
                                "transfer-status": {
                                    "filetype": "",
                                    "operation": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/transfer",
                "key": "filetype operation",
                "description": "Status of the last operation for this filetype.\n                            This object will only exist if at least one of the operation of that kind was done for that filetype.",
                "persistency": "all-true",
                "notify": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "filetype": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "database": {
                            "value": "1",
                            "description": "Database"
                        }
                    },
                    {
                        "swimage": {
                            "value": "2",
                            "description": "SW Image"
                        }
                    },
                    {
                        "krp": {
                            "value": "3",
                            "description": "Key replacement package (KRP)"
                        }
                    },
                    {
                        "script": {
                            "value": "5",
                            "description": " Scripts to download from the remote Server"
                        }
                    },
                    {
                        "debug-log": {
                            "value": "6",
                            "description": "Debug Logs"
                        }
                    },
                    {
                        "pm-logs": {
                            "value": "7",
                            "description": "PM Logs"
                        }
                    },
                    {
                        "local-certificate": {
                            "value": "8",
                            "description": "PKCS#12 bundle that contains x509v3 local certificate + password protected private key"
                        }
                    },
                    {
                        "trusted-certificate": {
                            "value": "9",
                            "description": "PKCS#7 bundle that contains x509v3 trusted certificate(Root or Intermediate CA)"
                        }
                    },
                    {
                        "fdr-log": {
                            "value": "10",
                            "description": "Flight Data Recorder(FDR) Logs"
                        }
                    },
                    {
                        "logs": {
                            "value": "11",
                            "description": "Specific logs"
                        }
                    },
                    {
                        "file": {
                            "value": "12",
                            "description": "Generic file"
                        }
                    },
                    {
                        "peer-certificate": {
                            "value": "13",
                            "description": "PKCS#12 bundle that contains x509v3 peer certificate + password protected private key"
                        }
                    }
                ],
                "description": "File transfer status per filetype.",
                "config": "false"
            },
            "operation": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "upload": {
                            "value": "1",
                            "description": "last operation upload."
                        }
                    },
                    {
                        "download": {
                            "value": "2",
                            "description": "last operation download."
                        }
                    }
                ],
                "description": "Last transfer operation.",
                "config": "false"
            },
            "last-completion-status": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Success indicates a successful operation.",
                "config": "false"
            },
            "last-transfer": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Last transfer Start Timestamp.",
                "config": "false"
            },
            "last-duration": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "pattern": [
                    "(((1000)|(0*\\d{1,3}))w)? *(((1000)|(0*\\d{1,3}))d)? *(((1000)|(0*\\d{1,3}))h)? *(((1000)|(0*\\d{1,3}))m)? *(((1000)|(0*\\d{1,3}))s)?"
                ],
                "description": "Last transfer duration.",
                "config": "false"
            },
            "transfer-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sync": {
                            "value": "1",
                            "description": "last transfer type sync."
                        }
                    },
                    {
                        "async": {
                            "value": "2",
                            "description": "last transfer type async"
                        }
                    }
                ],
                "description": "Last transfer type.",
                "config": "false"
            },
            "session-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..100",
                "description": "Last transfer session-id.",
                "when": ". != '' ",
                "config": "false"
            },
            "session-user-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "pattern": [
                    "[a-zA-Z_.][a-zA-Z0-9_\\-.]*[$]?"
                ],
                "description": "Last transfer session-user-name.",
                "when": ". != '' ",
                "config": "false"
            }
        },
        "networking": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "description": "Top level container for networking model.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "interface": "list",
            "vrf": "list",
            "routing": "container",
            "rib": "list",
            "access-control-list": "container",
            "dns": "container"
        },
        "interface": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "interface": {
                                    "if-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "if-name",
                "description": "The list of configured interfaces on the device.",
                "create-condition": {
                    "error-message": "Not possible to create such interfaces manually.",
                    "value": "not(if-type = ('ethernet', 'software-loopback')) or if-name = '1-AUX-2'"
                },
                "edit-condition": {
                    "error-message": "This interface must be of Ethernet type.",
                    "value": "if-type = 'ethernet' or not(if-name = '1-AUX-2')"
                },
                "logical-parent-type": "vrf",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "if-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "mandatory": "true",
                "description": "The name of the interface."
            },
            "if-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "A textual description of the interface."
            },
            "if-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ethernet": {
                            "value": "1",
                            "description": "For all Ethernet-like interfaces, regardless of speed, as per RFC 3635."
                        }
                    },
                    {
                        "software-loopback": {
                            "value": "2",
                            "description": "Software Loopback interface type."
                        }
                    },
                    {
                        "point-to-point": {
                            "value": "3",
                            "description": "Point to point interfaces associated with control channels."
                        }
                    },
                    {
                        "ppp": {
                            "value": "4",
                            "description": "RFC 1661 Point-to-Point Protocol (PPP) interface. A Link Control\n                        Protocol (LCP) for establishing and configuring the data-link connection and \n                        a family of Network Control Protocols (NCPs) for establishing and configuring\n                        different network-layer protocols will run over the interface."
                        }
                    },
                    {
                        "hdlc": {
                            "value": "5",
                            "description": "HDLC(High-Level Data Link Control)-like interface associated with OSCX channels."
                        }
                    }
                ],
                "mandatory": "true",
                "description": "The type of the interface.",
                "set-on-create-only": "true"
            },
            "supporting-port": {
                "yangType": "leaf",
                "when": "../if-type != 'software-loopback'",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Reference to the physical port that interface is currently mapped to.",
                "persistency": "true",
                "notify": "true"
            },
            "backup-port": {
                "yangType": "leaf",
                "when": [
                    "../if-type = 'ethernet'",
                    "not(/ne/equipment/chassis/required-type = 'G31')"
                ],
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Reference to the physical port that supports this interface (if applicable).",
                "persistency": "true",
                "notify": "true"
            },
            "protection-mode": {
                "yangType": "leaf",
                "when": [
                    "../if-type = 'ethernet'",
                    "not(/ne/equipment/chassis/required-type = 'G31')"
                ],
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "0",
                            "description": "Unknown/Transient protection state; output only."
                        }
                    },
                    {
                        "protected": {
                            "value": "1",
                            "description": "Protected by redundant ports."
                        }
                    },
                    {
                        "unprotected": {
                            "value": "2",
                            "description": "No port redundancy."
                        }
                    }
                ],
                "description": "Reference to user given protection mode for interface.",
                "default": "protected",
                "edit-condition": {
                    "error-message": "Invalid protection mode: unknown.",
                    "description": "The 'unknown' value is for output only.  It cannot be configured.",
                    "value": ". != 'unknown'"
                }
            },
            "protection-state": {
                "yangType": "leaf",
                "when": [
                    "../if-type = 'ethernet'",
                    "not(/ne/equipment/chassis/required-type = 'G31')"
                ],
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "0",
                            "description": "Unknown/Transient protection state; output only."
                        }
                    },
                    {
                        "protected": {
                            "value": "1",
                            "description": "Protected by redundant ports."
                        }
                    },
                    {
                        "unprotected": {
                            "value": "2",
                            "description": "No port redundancy."
                        }
                    }
                ],
                "description": " Reference to current state of protection of interface so by default its unknown.",
                "default": "unknown",
                "config": "false"
            },
            "vrf": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../vrf/name",
                "config": "false",
                "description": "VRF to which this interface is bound.",
                "persistency": "true"
            },
            "ipv4-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Controls whether IPv4 is enabled or disabled on this\n                interface. When IPv4 is enabled, this interface is\n                connected to an IPv4 stack, and the interface can send\n                and receive IPv4 packets.",
                "edit-condition": [
                    {
                        "error-message": "Cannot disable IPv4 on loopback interface.",
                        "value": ". = 'true' or\n                                        ../if-type != 'software-loopback'"
                    },
                    {
                        "error-message": "IPv4 cannot be disabled for this interface.",
                        "value": ". = 'true' or\n                                        not(is-craft-if(..))"
                    }
                ],
                "requires-confirmation": {
                    "when": ". = 'false'",
                    "description": "Disabling IPv4 may result in NE unreachability.  All configured IPv4 addresses will be deleted.  Are you sure you want to continue?"
                }
            },
            "ipv4-address-assignment-method": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "static": {
                            "value": "1"
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2"
                        }
                    }
                ],
                "description": "IPv4 address assignment method.",
                "default": "static",
                "requires-confirmation": {
                    "when": "current() != 'dhcp'",
                    "description": "Disabling DHCP may result in NE unreachability.\n                                                   After disabling DHCP, IPv4 addresses should be configured manually.\n                                                   Are you sure you want to continue?"
                },
                "edit-condition": [
                    {
                        "error-message": "This interface does not support DHCP.",
                        "value": ". = 'static' or\n                                        not(../if-type = ('software-loopback', 'ppp', 'hdlc'))"
                    },
                    {
                        "error-message": "Cannot enable DHCP while static IPv4 address is configured.",
                        "value": ". = 'static' or\n                                        (../ipv4-address/origin != 'static')"
                    },
                    {
                        "error-message": "Cannot enable DHCP while IPv4 is disabled.",
                        "value": ". = 'static' or\n                                        ../ipv4-enabled = 'true'"
                    },
                    {
                        "error-message": "This interface does not support DHCP.",
                        "value": ". = 'static' or is-dcn-if(..)"
                    }
                ]
            },
            "ipv6-enabled": {
                "yangType": "leaf",
                "when": "../if-type != 'ppp' and ../if-type != 'hdlc'",
                "type": "boolean",
                "default": "true",
                "description": "Controls whether IPv6 is enabled or disabled on this\n                interface. When IPv6 is enabled, this interface is\n                connected to an IPv6 stack, and the interface can send\n                and receive IPv6 packets.",
                "edit-condition": [
                    {
                        "error-message": "Cannot disable IPv6 on loopback interface.",
                        "value": ". = 'true' or\n                                        ../if-type != 'software-loopback'"
                    },
                    {
                        "error-message": "This interface does not support IPv6.",
                        "value": ". = 'false' or\n                                        not(is-craft-if(..))"
                    }
                ],
                "requires-confirmation": {
                    "when": ". = 'false'",
                    "description": "Disabling IPv6 may result in NE unreachability.  All configured IPv6 addresses will be deleted.  Are you sure you want to continue?"
                }
            },
            "ipv6-address-assignment-method": {
                "yangType": "leaf",
                "when": "../if-type != 'ppp' and ../if-type != 'hdlc'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "static": {
                            "value": "1"
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2"
                        }
                    }
                ],
                "description": "IPv6 address assignment method.",
                "default": "static",
                "requires-confirmation": {
                    "when": "current() != 'dhcp'",
                    "description": "Disabling DHCPv6 may result in NE unreachability.\n                                                   After disabling DHCPv6, IPv6 addresses should be configured manually.\n                                                   Are you sure you want to continue?"
                },
                "edit-condition": [
                    {
                        "error-message": "This interface does not support DHCPv6.",
                        "value": ". = 'static' or\n                                        ../if-type != 'software-loopback'"
                    },
                    {
                        "error-message": "Cannot enable DHCPv6 while static IPv6 address is configured.",
                        "value": ". = 'static' or\n                                        (../ipv6-address/origin != 'static')"
                    },
                    {
                        "error-message": "Cannot enable DHCPv6 while IPv6 is disabled.",
                        "value": ". = 'static' or\n                                        ../ipv6-enabled = 'true'"
                    },
                    {
                        "error-message": "This interface does not support DHCPv6.",
                        "value": ". = 'static' or is-dcn-if(..)"
                    }
                ]
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object.",
                "when": [
                    "if-type != 'software-loopback'",
                    "../if-type != 'ethernet'"
                ],
                "edit-condition": {
                    "error-message": "This interface does not support maintenance state.",
                    "value": ". != 'maintenance'"
                }
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "ipv4-address": "list",
            "ipv6-address": "list",
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "ipv4-address": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "interface": {
                                    "ipv4-address": {
                                        "ip": ""
                                    },
                                    "if-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "ip",
                "description": "The IPv4 address on the interface.",
                "create-condition": [
                    {
                        "error-message": "Unsupported IP address on this interface.",
                        "value": "../if-name != 'CRAFT' or (ip = '169.254.0.1' and netmask = '255.255.0.0')"
                    },
                    {
                        "error-message": "Unsupported static IP address on CRAFT interface.",
                        "value": "not(is-craft-if(..) and origin = 'static')"
                    },
                    {
                        "error-message": "This interface has IPv4 disabled.",
                        "value": "../ipv4-enabled = 'true'"
                    },
                    {
                        "error-message": "Only one static IPv4 address may be configured for this interface.",
                        "value": "count(../ipv4-address[origin = 'static']) <= 1"
                    },
                    {
                        "error-message": "Cannot configure static IPv4 address when DHCP is enabled on the interface.",
                        "description": "Cannot configure static IPv4 address when DHCP is enabled on the interface.",
                        "value": "request-info('internal') or ../ipv4-address-assignment-method = 'static'"
                    },
                    {
                        "error-message": "This address is already configured in another interface.",
                        "value": "not(ip = ../../interface[if-name != current()/../if-name]/ipv4-address[origin = 'static']/ip)"
                    }
                ],
                "volatile-config": {
                    "when": "origin != 'static'"
                },
                "edit-condition": [
                    {
                        "error-message": "This address is already configured as a static route destination.",
                        "post-transaction": "true",
                        "value": "not(//ipv4-static-route[substring-before(newvalue(ipv4-destination-prefix), '/') =\n                                              current()/ip])"
                    },
                    {
                        "error-message": "This subnet is already configured as a static route destination.",
                        "post-transaction": "true",
                        "value": "not(//ipv4-static-route[get-netmask(ipv4-destination-prefix) = $prefix])"
                    },
                    {
                        "error-message": "Software loopback interfaces require a network mask of 255.255.255.255.",
                        "value": "netmask = '255.255.255.255' or\n                                        ../if-type != 'software-loopback'"
                    },
                    {
                        "error-message": "The network mask of 255.255.255.255 cannot be chosen for ethernet interfaces.",
                        "value": "netmask != '255.255.255.255' or\n                                        not(../if-type != 'software-loopback')"
                    },
                    {
                        "error-message": "The network identifier is zero.",
                        "value": "$prefix != 0"
                    },
                    {
                        "error-message": "The network identifier is invalid.",
                        "value": "$prefix != $nm_uint32"
                    },
                    {
                        "error-message": "The host identifier is zero.",
                        "value": "netmask = '255.255.255.255' or\n                                        $suffix != 0"
                    },
                    {
                        "error-message": "The host identifier is invalid.",
                        "value": "netmask = '255.255.255.255' or\n                                        $suffix != $hm_uint32"
                    },
                    {
                        "error-message": "This subnet is already configured in another interface.",
                        "post-transaction": "true",
                        "value": "not(../../interface[if-name != current()/../if-name]/\n                                                ipv4-address[get-prefix(ip, netmask) = $prefix][origin = 'static'])"
                    },
                    {
                        "error-message": "This subnet is already configured in a static route.",
                        "post-transaction": "true",
                        "value": "not(//ipv4-static-route[get-netmask(ipv4-destination-prefix) = $prefix])"
                    },
                    {
                        "error-message": "IPv4 address is not configurable.",
                        "description": "Cannot modify DHCP assigned IPv4 address.",
                        "value": "request-info('internal') or origin = 'static'"
                    },
                    {
                        "error-message": "IPv4 addresses are not configurable on this interface.",
                        "value": "not(../if-type = 'point-to-point')"
                    }
                ],
                "delete-condition": {
                    "post-transaction": "true",
                    "error-message": "LO-MGMT IPv4 address needs to be configured when OSPF router-id-mode is 'use-loopback'.",
                    "value": "if (is-lo-if(..) and\n                                          //ospf-instance[router-id-mode = 'use-loopback']) then\n                                              count(../ipv4-address) > 0\n                                          else true()"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ip": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?",
                    "[0-9\\.]*",
                    "[^1].*|.([^2].*)?|.{2}([^7].*)?|.{3}([^\\.].*)?",
                    "[^2].*|.([^2].*)?|.{2}([^4-9].*)?|.{3}([^\\.].*)?",
                    "[^2].*|.([^3-5].*)?|.{2}([^0-9].*)?|.{3}([^\\.].*)?"
                ],
                "description": "The IPv4 addresses on the interface. The following\n                     addresses are disallowed from being configured:\n                     1. Addresses beginning with 0 (current network)\n                     2. Addresses beginning with 127 (loopback addresses)\n                     3. Addresses beginning with 224 up to 255 (broadcast,\n                            multicast and experimental addresses)",
                "mandatory": "true"
            },
            "netmask": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])",
                    "(((255\\.){3}(255|254|252|248|240|224|192|128|0))|((255\\.){2}(255|254|252|248|240|224|192|128|0)\\.0)|((255\\.)(255|254|252|248|240|224|192|128|0)(\\.0){2})|((255|254|252|248|240|224|192|128|0)(\\.0){3}))"
                ],
                "description": "The subnet specified as a netmask for a particular address.\n                    Only valid netmasks are allowed to be configured.",
                "mandatory": "true"
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "static": {
                            "value": "1",
                            "description": "Indicates that the address has been statically\n                        configured - for example, using NETCONF or a Command Line\n                        Interface."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates an address that has been assigned to this\n                        system by a DHCP server."
                        }
                    },
                    {
                        "auto-config": {
                            "value": "3",
                            "description": "Indicates an address created by autoconfiguration."
                        }
                    }
                ],
                "default": "static",
                "config": "false",
                "description": "IPv4 address assignment method.",
                "persistency": "true",
                "notify": "true"
            }
        },
        "ipv6-address": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "interface": {
                                    "ipv6-address": {
                                        "ip": ""
                                    },
                                    "if-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "when": "../if-type != 'ppp' and ../if-type != 'oscx'",
                "key": "ip",
                "description": "The IPv6 address on the interface.",
                "volatile-config": {
                    "when": "origin != 'static'"
                },
                "create-condition": [
                    {
                        "error-message": "This interface has IPv6 disabled.",
                        "value": "../ipv6-enabled = 'true'"
                    },
                    {
                        "error-message": "Only one static IPv6 address may be configured for this interface.",
                        "value": "count(../ipv6-address[origin = 'static']) <= 1"
                    },
                    {
                        "error-message": "Cannot configure a static IPv6 address when DHCPv6 is enabled on the interface.",
                        "description": "Cannot configure a static IPv6 address when DHCPv6 is enabled on the interface.",
                        "value": "request-info('internal') or ../ipv6-address-assignment-method = 'static'"
                    },
                    {
                        "error-message": "This prefix is already configured in another interface.",
                        "post-transaction": "true",
                        "value": "all(for $ipv6 in ../../interface/ipv6-address[ . != current()][origin = 'static'] return\n                                                $ipv6/prefix-length != prefix-length\n                                              or\n                                                not(compare-sequences(get-prefix-ipv6($ipv6/ip, prefix-length), $current-prefix)))"
                    },
                    {
                        "error-message": "This address is already configured in another interface.",
                        "post-transaction": "true",
                        "value": "not(to-lower(ip) = to-lower(../../interface/ipv6-address[ . != current()]/ip))"
                    },
                    {
                        "error-message": "The unspecified address cannot be configured.",
                        "value": "not($ip_word1 = 0 and\n                                              $ip_word2 = 0 and\n                                              $ip_word3 = 0 and\n                                              $ip_word4 = 0)"
                    },
                    {
                        "error-message": "The loopback address cannot be configured.",
                        "value": "not($ip_word1 = 0 and\n                                              $ip_word2 = 0 and\n                                              $ip_word3 = 0 and\n                                              $ip_word4 = 1)"
                    },
                    {
                        "error-message": "IPv4 mapped IPv6 addresses cannot be configured.",
                        "value": "not($ip_word1 = 0 and\n                                              $ip_word2 = 0 and\n                                              $ip_word3 = 65535)"
                    },
                    {
                        "error-message": "Multicast addresses cannot be configured.",
                        "description": "The prefix ff00::/8 is disallowed.",
                        "value": "not($ip_word1 >= 4278190080 and\n                                              $ip_word1 <= 4294901760)"
                    },
                    {
                        "error-message": "Link local addresses cannot be configured.",
                        "description": "The prefix fe80::/10 is disallowed.",
                        "value": "not($ip_word1 >= 4269801472 and\n                                              $ip_word1 <= 4273930240)"
                    },
                    {
                        "error-message": "The subnet-router anycast address cannot be configured.",
                        "value": "not($ip_word3 = 0 and\n                                              $ip_word4 = 0)"
                    },
                    {
                        "error-message": "This IPv6 interface identifier cannot be configured.",
                        "description": "The interface identifiers 0200:5EFF:FE00:0000-FEFF:FFFF are disallowed, mapping to the IANA Ethernet block and Proxy Mobile IPv6.",
                        "value": "not($ip_word3  = 33578751   and\n                                              $ip_word4 >= 4261412864 and\n                                              $ip_word4 <= 4278190079)"
                    },
                    {
                        "error-message": "Reserved subnet anycast addresses cannot be configured.",
                        "description": "The interface identifiers FDFF:FFFF:FFFF:FF80-FFFF are disallowed.",
                        "value": "not($ip_word3  = 4261412863 and\n                                              $ip_word4 >= 4294967168)"
                    }
                ],
                "edit-condition": [
                    {
                        "error-message": "This address is already configured as a static route destination.",
                        "post-transaction": "true",
                        "value": "not(//ipv6-static-route[substring-before(newvalue(ipv6-destination-prefix), '/') =\n                                            current()/ip])"
                    },
                    {
                        "error-message": "This prefix is already configured as a static route destination.",
                        "post-transaction": "true",
                        "value": "count(//ipv6-static-route[compare-sequences((get-prefix-ipv6(substring-before(ipv6-destination-prefix, '/'),\n                                        substring-after(ipv6-destination-prefix, '/'))), $current-prefix)= true()]) = 0"
                    },
                    {
                        "error-message": "Software loopback interfaces require a prefix length of 128.",
                        "value": "request-info('internal') or\n                                        prefix-length = 128 or\n                                        ../if-type != 'software-loopback'"
                    },
                    {
                        "error-message": "The prefix length of 128 cannot be chosen for ethernet interfaces.",
                        "value": "prefix-length != 128 or\n                                        not(../if-type != 'software-loopback')"
                    },
                    {
                        "error-message": "IPv6 address is not configurable.",
                        "value": "request-info('internal') or\n                                        origin = 'static'"
                    },
                    {
                        "error-message": "IPv6 addresses are not configurable on this interface.",
                        "value": "request-info('internal') or\n                                        not(../if-type ='point-to-point')"
                    },
                    {
                        "error-message": "Prefix lengths higher than 64 are not supported.",
                        "value": "prefix-length <= 64 or\n                                        ../if-type = 'software-loopback'"
                    }
                ],
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ip": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                    "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?",
                    "[0-9a-fA-F:\\.]*"
                ],
                "description": "The IPv6 address on the interface",
                "mandatory": "true"
            },
            "prefix-length": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..128",
                "mandatory": "true",
                "description": "The length of the subnet prefix. Only valid prefixes are\n                    allowed to be configured."
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "static": {
                            "value": "1",
                            "description": "Indicates that the address has been statically\n                        configured - for example, using NETCONF or a Command Line\n                        Interface."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates an address that has been assigned to this\n                        system by a DHCP server."
                        }
                    },
                    {
                        "auto-config": {
                            "value": "3",
                            "description": "Indicates an address created by autoconfiguration."
                        }
                    }
                ],
                "default": "static",
                "config": "false",
                "description": "IPv6 address assignment method.",
                "persistency": "true",
                "notify": "true"
            }
        },
        "vrf": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "vrf": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "name",
                "description": "Virtual Routing and Forwarding instance.",
                "system-managed": "true",
                "persistency": "all-true",
                "logical-parent-type": "port",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "config": "false",
                "description": "Description of the VRF and its intended purpose."
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "description": "Name of the VRF."
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "mgmt": {
                            "value": "0",
                            "description": "Management VRF."
                        }
                    },
                    {
                        "internal": {
                            "value": "1",
                            "description": "Internal VRF."
                        }
                    }
                ],
                "config": "false",
                "description": "VRF type."
            },
            "chassis-name": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../equipment/chassis/name",
                "config": "false",
                "description": "Associated chassis name to this VRF."
            }
        },
        "routing": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/networking/routing",
                "description": "Container of routing subsystem.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ipv4-static-route": "list",
            "ipv6-static-route": "list",
            "ospf-instance": "list",
            "ip-monitoring": "list"
        },
        "ipv4-static-route": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ipv4-static-route": {
                                        "ipv4-destination-prefix": "",
                                        "vrf": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/routing",
                "key": "ipv4-destination-prefix vrf",
                "description": "A list of IPv4 static routes.",
                "volatile-config": {
                    "when": "origin = 'dhcp'"
                },
                "create-condition": [
                    {
                        "error-message": "LO-MGMT as route interface not allowed.",
                        "value": "interface != 'LO-MGMT'"
                    },
                    {
                        "error-message": "At least one of 'next-hop-address' or 'interface' attributes must be specified.",
                        "value": "newvalue(next-hop-address) or newvalue(interface)"
                    },
                    {
                        "error-message": "The host bits in the destination address should be set to zero.",
                        "value": "convert($destIp, 'ipv4-to-binary') = $my-netmask"
                    },
                    {
                        "error-message": "This static route is already configured.",
                        "value": "not(../ipv4-static-route[. != current()]\n                                                                 [get-netmask(ipv4-destination-prefix) = $my-netmask])"
                    },
                    {
                        "error-message": "This destination address is already configured as one of the interface addresses",
                        "value": "not(//ipv4-address[ip = $destIp])"
                    }
                ],
                "delete-condition": {
                    "error-message": "Routes created via DHCP cannot be manually deleted.",
                    "description": "Routes created via DHCP cannot be manually deleted.",
                    "value": "request-info('internal') or origin != 'dhcp'"
                },
                "edit-condition": {
                    "error-message": "This static route network is already configured on some interface.",
                    "value": "not(//ipv4-address[get-prefix(ip, netmask)= $my-netmask])"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ipv4-destination-prefix": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                ],
                "description": "IPv4 destination prefix.",
                "mandatory": "true"
            },
            "advertised": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "When set to YES, the static route is advertised in the routing\n          protocol. For OSPF, the static route will be advertised as an \n          AS external route, if OSPF is configured as an ASBR.",
                "set-on-create-only": "true"
            },
            "next-hop-address": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                ],
                "description": "IPv4 address of the next-hop.",
                "set-on-create-only": "true"
            },
            "vrf": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../vrf/name",
                "description": "VRF associated with this static route.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Not possible to associate an internal VRF to a static route.",
                    "value": "ancestor::networking/vrf[name = current()]/type != 'internal'"
                }
            },
            "distance": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "default": "1",
                "description": "distance of the next-hop.",
                "set-on-create-only": "true"
            },
            "interface": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../interface/if-name",
                "description": "Interface associated with this static route.  The VRF bound\n          to this interface needs to match the static-route provided\n          vrf.",
                "when": "not(db-value(..)) or string(.) != ''",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "It is required to specify next-hop-address when interface type is not ethernet.",
                        "value": "autocomplete() or string(../next-hop-address) != '' or  //interface[if-name = .]/if-type = 'ethernet'"
                    },
                    {
                        "error-message": "The provided interface's VRF needs to match the static route VRF.",
                        "value": "autocomplete() or ancestor::networking/interface[if-name = current()]/vrf = ../vrf"
                    }
                ]
            },
            "monitoring-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unmonitored": {
                            "value": "1",
                            "description": "static-route is not part of any ip monitoring instance."
                        }
                    },
                    {
                        "ok": {
                            "value": "2",
                            "description": "static-route is part of an ip monitoring instance in 'ok' state."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "static-route is part of an ip monitoring instance in 'failed' state."
                        }
                    }
                ],
                "default": "unmonitored",
                "config": "false",
                "description": "The current state of the monitoring."
            },
            "monitoring-instance": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Monitoring instance name, applicable only if this route is being monitored.",
                "persistency": "true",
                "when": "not(db-value(..)) or string(.) != ''"
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "manual": {
                            "value": "1",
                            "description": "Indicates the ipv4 route has been manually configured."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates ipv4 route has been assigned to this\n                  system by a DHCP server."
                        }
                    }
                ],
                "default": "manual",
                "description": "Route address assignment method.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Cannot manually set a route to origin dhcp.",
                    "description": "Cannot mannually set the origin of the route as dhcp.",
                    "value": "request-info('internal') or . != 'dhcp' "
                }
            }
        },
        "ipv6-static-route": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ipv6-static-route": {
                                        "ipv6-destination-prefix": "",
                                        "vrf": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/routing",
                "key": "ipv6-destination-prefix vrf",
                "description": "A list of IPv6 static routes.",
                "volatile-config": {
                    "when": "origin = 'dhcp'"
                },
                "delete-condition": {
                    "error-message": "Routes created via DHCP cannot be manually deleted.",
                    "description": "Routes created via DHCP cannot be manually deleted.",
                    "value": "request-info('internal') or origin != 'dhcp'"
                },
                "create-condition": [
                    {
                        "error-message": "This static route is already configured.",
                        "value": "not(to-lower(ipv6-destination-prefix) = to-lower(../ipv6-static-route[ . != current()]/ipv6-destination-prefix))"
                    },
                    {
                        "error-message": "LO-MGMT as route interface not allowed.",
                        "value": "interface != 'LO-MGMT'"
                    },
                    {
                        "error-message": "At least one of 'next-hop-address' or 'interface' attributes must be specified.",
                        "value": "newvalue(next-hop-address) or newvalue(interface)"
                    },
                    {
                        "error-message": "The host bits in the destination address should be set to zero.",
                        "value": "compare-sequences(convert($ipv6Address, 'ipv6-to-binary'), get-prefix-ipv6($ipv6Address, $ipv6Prefix)) = true() \n                                         or boolean($ipv6Prefix = '0' and convert($ipv6Address, 'ipv6-to-binary') = (0,0,0,0))"
                    },
                    {
                        "error-message": "This destination network is already configured",
                        "value": "count(//ipv6-static-route[ . != current()]\n                                         [compare-sequences(get-prefix-ipv6(substring-before(ipv6-destination-prefix, '/'), \n                                         substring-after(ipv6-destination-prefix, '/')),\n                                         (get-prefix-ipv6($ipv6Address, $ipv6Prefix))) = true()]) = 0"
                    },
                    {
                        "error-message": "This destination address is already configured as one of the interface addresses",
                        "value": "not(//ipv6-address[ip = $destIp])"
                    }
                ],
                "edit-condition": [
                    {
                        "error-message": "Cannot support ipv6 prefix-length larger than 64.",
                        "value": "re-match(ipv6-destination-prefix ,'.*/(([0-9])|([1-5][0-9])|(6[0-4]))')"
                    },
                    {
                        "error-message": "IPv6 destination prefix can not be link-local network.",
                        "value": "re-match(ipv6-destination-prefix ,'[^f^F].*|.([^e^E].*)|.{2}([^8].*)|.{3}([^0].*)|.{4}([^:].*).*/(([0-9])|([1-5][0-9])|(6[0-4]))')"
                    },
                    {
                        "error-message": "This static route network is already configured on some interface.",
                        "value": "count(//ipv6-address[compare-sequences((get-prefix-ipv6(ip, prefix-length)),\n                                                  (get-prefix-ipv6($ipv6Address, $ipv6Prefix))) = true()]) = 0"
                    }
                ],
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ipv6-destination-prefix": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                    "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                ],
                "description": "IPv6 destination prefix.",
                "mandatory": "true"
            },
            "vrf": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../vrf/name",
                "description": "VRF associated with this static route.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Not possible to associate an internal VRF to a static route.",
                    "value": "ancestor::networking/vrf[name = current()]/type != 'internal'"
                }
            },
            "advertised": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "When set to YES, the static route is advertised in the routing\n          protocol. For OSPF, the static route will be advertised as an\n          AS external route, if OSPF is configured as an ASBR.",
                "set-on-create-only": "true"
            },
            "next-hop-address": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                    "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                ],
                "description": "IPv6 address of the next-hop.",
                "set-on-create-only": "true"
            },
            "distance": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..255",
                "default": "1",
                "description": "distance of the next-hop.",
                "set-on-create-only": "true"
            },
            "interface": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../interface/if-name",
                "description": "Interface associated with this static route.  The VRF bound\n          to this interface needs to match the static-route provided\n          vrf.",
                "when": "not(db-value(..)) or string(.) != ''",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "It is required to specify next-hop-address when interface type is not ethernet.",
                        "value": "autocomplete() or string(../next-hop-address) != '' or  //interface[if-name = .]/if-type = 'ethernet'"
                    },
                    {
                        "error-message": "The provided interface's VRF needs to match the static route VRF.",
                        "value": "autocomplete() or ancestor::networking/interface[if-name = current()]/vrf = ../vrf"
                    }
                ]
            },
            "monitoring-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unmonitored": {
                            "value": "1",
                            "description": "Indicates that this static-route is not part of any ip monitoring instance."
                        }
                    },
                    {
                        "ok": {
                            "value": "2",
                            "description": "Indicates that this static-route is not part of a ip monitoring instance whose monitoring status is ok."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "Indicates that this static-route is not part of a ip monitoring instance whose monitoring status is failed."
                        }
                    }
                ],
                "default": "unmonitored",
                "config": "false",
                "description": "The current state of the monitoring"
            },
            "monitoring-instance": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "config": "false",
                "description": "Monitoring Instance Name.",
                "persistency": "true",
                "when": "not(db-value(..)) or string(.) != ''"
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "manual": {
                            "value": "1",
                            "description": "Indicates the ipv6 route has been manually configured."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates ipv6 route has been assigned to this\n                  system by a DHCP server."
                        }
                    }
                ],
                "default": "manual",
                "description": "route address assignment method.",
                "set-on-create-only": "true",
                "edit-condition": {
                    "error-message": "Cannot manually set a route to origin dhcp.",
                    "description": "Cannot mannually set the origin of the route as dhcp.",
                    "value": "request-info('internal') or . != 'dhcp' "
                }
            }
        },
        "ospf-instance": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "key": "instance-id",
                "description": "OSPF protocol instances.",
                "logical-parent-type": "ipv4-address",
                "create-condition": [
                    {
                        "error-message": "Only one instance of ospfv2 is supported.",
                        "value": "count(../ospf-instance[version='ospfv2']) <= 1"
                    },
                    {
                        "error-message": "Only one instance of ospfv3 is supported.",
                        "value": "count(../ospf-instance[version='ospfv3']) <= 1"
                    },
                    {
                        "error-message": "OSPFv3 IPv6 instance-id should be in 0-31 range.",
                        "value": "instance-id <= 31 or version != 'ospfv3'"
                    }
                ],
                "edit-condition": {
                    "error-message": "LO-MGMT IPv4 address not set.",
                    "value": "router-id-mode != 'use-loopback'  or\n                        count(../../interface[if-name='LO-MGMT']/ipv4-address) != 0"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Textual description of the OSPF instance."
            },
            "router-id": {
                "yangType": "leaf",
                "when": "../router-id-mode = 'manual'",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"
                ],
                "description": "OSPF Router ID.",
                "mandatory": "true"
            },
            "instance-id": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 255",
                "description": "OSPF instance ID."
            },
            "version": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ospfv2": {
                            "value": "1"
                        }
                    },
                    {
                        "ospfv3": {
                            "value": "2"
                        }
                    }
                ],
                "default": "ospfv2",
                "description": "OSPF version v2 or v3",
                "set-on-create-only": "true"
            },
            "vrf": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../vrf/name",
                "config": "false",
                "description": "VRF associated with this OSPF instance.",
                "persistency": "true"
            },
            "router-id-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "use-loopback": {
                            "value": "1"
                        }
                    },
                    {
                        "manual": {
                            "value": "2"
                        }
                    }
                ],
                "default": "use-loopback",
                "description": "Flag to indicate router-id is loopback IP or manual configured."
            },
            "ospf-area": "list"
        },
        "ospf-area": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "ospf-area": {
                                            "ospf-area-id": ""
                                        },
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "key": "ospf-area-id",
                "description": "Configuration of ospf area.",
                "create-condition": {
                    "error-message": "No support for more than 5 areas",
                    "value": "count(../ospf-area) <= 5"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ospf-area-id": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"
                ],
                "description": "OSPF Router Area ID."
            },
            "ospf-area-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "normal": {
                            "value": "1"
                        }
                    }
                ],
                "default": "normal",
                "description": "OSPF Router Area Type."
            },
            "ospf-area-range": "list",
            "ospf-interface": "list"
        },
        "ospf-area-range": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "ospf-area": {
                                            "ospf-area-range": {
                                                "prefix": ""
                                            },
                                            "ospf-area-id": ""
                                        },
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "key": "prefix",
                "description": "Summarize routes matching address/mask -\n        Applicable to Area Border Routers (ABRs) only.",
                "create-condition": [
                    {
                        "error-message": "Area range prefix type doesn't match ospf version (ospfv2 requires ipv4-prefix, ospfv3 requires ipv6-prefix).",
                        "value": "if (../../version = 'ospfv3') then not(contains(prefix,'.')) \n                                                                              else not(contains(prefix,':'))"
                    },
                    {
                        "error-message": "Area range prefix can not represent default.",
                        "value": "not(contains(prefix,'/0'))"
                    },
                    {
                        "error-message": "No support for more than 500 IPv4 area summary prefixes.",
                        "value": "count(//ospf-instance[version='ospfv2']/ospf-area/ospf-area-range) <= 500"
                    },
                    {
                        "error-message": "No support for more than 500 IPv6 area summary prefixes.",
                        "value": "count(//ospf-instance[version='ospfv3']/ospf-area/ospf-area-range) <= 500"
                    }
                ],
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "prefix": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    }
                ],
                "description": "IPv4 or IPv6 prefix"
            },
            "advertise": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Advertise or hide."
            }
        },
        "ospf-interface": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "ospf-area": {
                                            "ospf-interface": {
                                                "ospf-if-name": ""
                                            },
                                            "ospf-area-id": ""
                                        },
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "key": "ospf-if-name",
                "description": "Configuration of interface in an ospf area.",
                "create-condition": [
                    {
                        "error-message": "Don't support OSPFv3 on this interface.",
                        "value": "../../version='ospfv2' or $interface-if-type!='ppp'"
                    },
                    {
                        "error-message": "OSPF not supported for craft interface",
                        "value": "ospf-if-name != 'CRAFT'"
                    },
                    {
                        "error-message": "No support for more than 250 interfaces.",
                        "value": "count(//ospf-instance[version='ospfv2']/ospf-area/ospf-interface) <= 250"
                    },
                    {
                        "error-message": "No support for more than 250 interfaces.",
                        "value": "count(//ospf-instance[version='ospfv3']/ospf-area/ospf-interface) <= 250"
                    },
                    {
                        "error-message": "Interface is already part of another ospf area.",
                        "value": "not(ospf-if-name = ../../ospf-area[ospf-area-id != current()/../ospf-area-id]/ospf-interface/ospf-if-name)"
                    }
                ],
                "edit-condition": {
                    "error-message": "LO-MGMT cannot have active routing mode",
                    "value": "not(ospf-if-name= 'LO-MGMT' and ospf-if-routing ='active')"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ospf-if-name": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../../interface/if-name",
                "description": "Reference of the interface in OSPF area."
            },
            "ospf-if-routing": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1",
                            "description": "ACTIVE - This link is advertised and routing messages are transported over this link."
                        }
                    },
                    {
                        "passive": {
                            "value": "2",
                            "description": "PASSIVE - This link is advertised, routing messages are not transported over this link."
                        }
                    },
                    {
                        "auto": {
                            "value": "3",
                            "description": "Auto - ospf-if-routing will be automatically derived from the interface type."
                        }
                    }
                ],
                "default": "auto",
                "description": "Specifies if routing is enabled and if so, if Routing is passive or active."
            },
            "enable": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Enable/disable OSPF protocol on the interface.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')"
            },
            "hello-interval": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..32767",
                "units": "seconds",
                "default": "10",
                "description": "Specifies the Hello Interval in seconds.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')",
                "edit-condition": {
                    "error-message": "The hello interval must be lesser than the dead interval",
                    "value": ". < ../router-dead-interval"
                }
            },
            "router-dead-interval": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "4..65535",
                "units": "seconds",
                "default": "40",
                "description": "Specifies the Router Dead Interval in seconds.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')",
                "edit-condition": {
                    "error-message": "The dead interval must be larger than the hello interval",
                    "value": ". > ../hello-interval"
                }
            },
            "retransmission-interval": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "2..3600",
                "units": "seconds",
                "default": "5",
                "description": "Specifies the Retransmission Interval in seconds.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')"
            },
            "transmit-delay": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "1..450",
                "units": "seconds",
                "default": "1",
                "description": "Estimated time needed to transmit Link State Update\n          (LSU) packets on the interface (seconds). LSAs have\n          their age incremented by this amount when advertised\n          on the interface. A sample value would be 1 second.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')"
            },
            "ospf-cost": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "1..65535",
                "default": "10",
                "description": "OSPF link cost.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')"
            },
            "ospf-network-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "broadcast": {
                            "value": "1"
                        }
                    },
                    {
                        "point-to-point": {
                            "value": "2"
                        }
                    }
                ],
                "default": "broadcast",
                "config": "false",
                "description": "OSPF Interface Network Types.",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')",
                "persistency": "true"
            },
            "priority": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0..255",
                "default": "1",
                "description": "Configure OSPF router priority. On multi-access network\n          this value is for Designated Router (DR) election. The\n          priority is ignored on other interface types. A router\n          with a higher priority will be preferred in the election\n          and a value of 0 indicates the router is not eligible to\n          become Designated Router or Backup Designated Router\n          (BDR).",
                "when": "(ospf-if-routing != 'passive') and (ospf-if-name != 'LO-MGMT')"
            },
            "ospf-auth-enable": {
                "yangType": "leaf",
                "when": [
                    "(../../../version = 'ospfv2')",
                    "((../../version = 'ospfv2') or (../../version = 'ospfv3')) and (ospf-if-name != 'LO-MGMT') and (ospf-if-routing != 'passive')"
                ],
                "type": "boolean",
                "default": "false",
                "description": "Enable/Disable Authentication."
            },
            "ospf-auth-algorithm": {
                "yangType": "leaf",
                "when": [
                    "(../../../version = 'ospfv2')",
                    "((../../version = 'ospfv2') or (../../version = 'ospfv3')) and (ospf-if-name != 'LO-MGMT') and (ospf-if-routing != 'passive')"
                ],
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "1"
                        }
                    },
                    {
                        "HMAC_SHA_256": {
                            "value": "2"
                        }
                    }
                ],
                "default": "HMAC_SHA_256",
                "description": "Cryptographic algorithm associated with key"
            },
            "ospf-auth-key": {
                "yangType": "leaf",
                "when": [
                    "(../../../version = 'ospfv2')",
                    "((../../version = 'ospfv2') or (../../version = 'ospfv3')) and (ospf-if-name != 'LO-MGMT') and (ospf-if-routing != 'passive')"
                ],
                "type": "string",
                "length": "0..256",
                "description": "Authentication key string in ASCII format.",
                "password": "true"
            },
            "ospfv3-ipsec-security-association": "list"
        },
        "ospfv3-ipsec-security-association": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "ospf-area": {
                                            "ospf-interface": {
                                                "ospfv3-ipsec-security-association": {
                                                    "spi": ""
                                                },
                                                "ospf-if-name": ""
                                            },
                                            "ospf-area-id": ""
                                        },
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "when": "(../../../version = 'ospfv3') and (../ospf-auth-enable = 'true')",
                "key": "spi",
                "min-elements": "1",
                "description": "A list of SAs created to protect OSPFv3 traffic. NOTE that\n          in ThanOS, we will always create both INBOUND and OUTBOUND\n          SAs automatically (i.e., for one user-created entry, there\n          will be two SAs automatically created).",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "spi": {
                "yangType": "leaf",
                "type": "uint32",
                "description": "A unique security parameter index (SPI) for this SA."
            },
            "ipsec-protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "esp": {
                            "value": "100"
                        }
                    }
                ],
                "default": "esp",
                "description": "Indicates the use of ESP or AH protocols."
            },
            "ipsec-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "transport": {
                            "value": "200"
                        }
                    }
                ],
                "default": "transport",
                "description": "Indicates IPsec mode. Only transport mode is supported \" +\n            \"in the initial releases."
            },
            "integrity-algorithm": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "ospfv3-ipsec-integrity-algorithm",
                "mandatory": "true",
                "description": "The cryptographic algorithm used to perform IPsec integrity protection."
            },
            "auth-key": "container"
        },
        "auth-key": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ospf-instance": {
                                        "ospf-area": {
                                            "ospf-interface": {
                                                "ospfv3-ipsec-security-association": {
                                                    "auth-key": {},
                                                    "spi": ""
                                                },
                                                "ospf-if-name": ""
                                            },
                                            "ospf-area-id": ""
                                        },
                                        "instance-id": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/networking/ospf",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ascii": {
                            "value": "1"
                        }
                    },
                    {
                        "hex": {
                            "value": "2"
                        }
                    }
                ],
                "default": "ascii",
                "description": "Indicates whether the integrity key is ASCII or hexadecimal encoded."
            },
            "key": {
                "yangType": "leaf",
                "type": "string",
                "length": "8..128",
                "description": "The pre-shared key for OSPFv3 IPsec integrity protection."
            }
        },
        "ip-monitoring": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "routing": {
                                    "ip-monitoring": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking/routing",
                "key": "name",
                "max-elements": "20",
                "description": "Monitoring instance configuration and state. A monitoring instance allows to periodically ping certain destinations whose result takes action on configured static-routes.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Name of the monitoring instance."
            },
            "probe-interval": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..60",
                "units": "seconds",
                "default": "5",
                "description": "The time between two consecutive pings in seconds"
            },
            "destination": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "mandatory": "true",
                "description": "The remote host to monitor.",
                "edit-condition": {
                    "error-message": "Ip versions of destination/next-hop/static-routes do not match",
                    "value": "autocomplete() or  $validate-ip-version"
                }
            },
            "drop-rate": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..10",
                "default": "1",
                "description": "The accepted drop rate of ping in 10% steps"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": " Start or Stop the monitoring of the destination by setting to true or false."
            },
            "monitoring-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "1",
                            "description": "Initial state before ping responses are received."
                        }
                    },
                    {
                        "ok": {
                            "value": "2",
                            "description": "Successfully pinging the Destination IP address."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "Pinging the destination IP Address has failed beyond the configured drop-rate."
                        }
                    },
                    {
                        "disabled": {
                            "value": "4",
                            "description": "Monitoring instance is administratively locked. No pings are sent, routes are active."
                        }
                    }
                ],
                "default": "unknown",
                "config": "false",
                "description": "The current state of the monitoring."
            },
            "action": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "1",
                            "description": "Indicates that no action will be take on the static routes under monitoring instance."
                        }
                    },
                    {
                        "withdraw": {
                            "value": "2",
                            "description": "Indicates that all static routes under monitoring instance will be withdrawn."
                        }
                    }
                ],
                "default": "withdraw",
                "description": "The action to take when the monitoring goes into 'failed' state."
            },
            "static-route": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "max-elements": "10",
                "description": "The list of connected static routes for this Monitoring instance.",
                "discover-values": "//ipv4-static-route | //ipv6-static-route",
                "edit-condition": [
                    {
                        "error-message": "At least one of the entry in static-route is not a valid ipv4/ipv6 static-route instance",
                        "value": "count(//ipv4-static-route[.=deref(current())]) + \n                                            count(//ipv6-static-route[.=deref(current())]) = count(seq(current()))"
                    },
                    {
                        "error-message": "Ip versions of destination/next-hop/static-routes do not match",
                        "value": "autocomplete() or  $validate-ip-version"
                    },
                    {
                        "error-message": "Interface of at least one of the static-routes does match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $exit-intf-match-val "
                    },
                    {
                        "error-message": "Ipv4 Subnet of at least one of the static-route's next-hop does not match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $subnet-match-val-ipv4 "
                    },
                    {
                        "error-message": "Ipv6 Subnet of at least one of the static-route's next-hop does not match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $subnet-match-val-ipv6"
                    },
                    {
                        "error-message": "Atleast one of the static-routes is part of another monitoring instance",
                        "value": "autocomplete() or $is-route-unique"
                    }
                ]
            },
            "next-hop": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "mandatory": "true",
                "description": "Defines the exit interface to use which can be ipv4/ipv6 source ip address or interface name or empty. \n           The monitoring instance will not be active until the exit-interface is configured.",
                "discover-values": "//interface[if-name != 'LO-MGMT']/ipv4-address/ip | //interface[if-name != 'LO-MGMT']/ipv6-address/ip",
                "edit-condition": [
                    {
                        "error-message": "Invalid interface name / ip address.",
                        "value": "autocomplete() or \n                                                 is-valid-ipv6-address(.) or is-valid-ipv4-address(.)"
                    },
                    {
                        "error-message": "Ip versions of destination/next-hop/static-routes do not match",
                        "value": "autocomplete() or  $validate-ip-version"
                    },
                    {
                        "error-message": "The ipv4 next-hop does not match any of the interface subnet",
                        "value": "autocomplete() or not(is-valid-ipv4-address(.))  or boolean(seq(($check-nexthop-subnet-ipv4))[. = 'true'])"
                    },
                    {
                        "error-message": "The ipv6 next-hop does not match any of the interface subnet",
                        "value": "autocomplete() or not(is-valid-ipv6-address(.))  or boolean(seq(($check-nexthop-subnet-ipv6))[. = 'true'])"
                    },
                    {
                        "error-message": "Interface of at least one of the static-routes does match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $exit-intf-match-val "
                    },
                    {
                        "error-message": "Ipv4 Subnet of at least one of the static-route's next-hop does not match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $subnet-match-val-ipv4 "
                    },
                    {
                        "error-message": "Ipv6 Subnet of at least one of the static-route's next-hop does not match the ip-monitoring next-hop interface.",
                        "value": "autocomplete() or $subnet-match-val-ipv6"
                    }
                ]
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            }
        },
        "rib": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "rib": {
                                    "rib-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "rib-name",
                "config": "false",
                "description": "Each entry represents a RIB identified by the 'name'\n            key. All routes in a RIB belong to the same address\n            family. For each routing instance, the system will \n            provide one system-controlled default RIB for each\n            supported address family.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "rib-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "The name of the RIB.",
                "config": "false"
            },
            "vrf": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../vrf/name",
                "description": "VRF to which this RIB is bound.",
                "config": "false"
            },
            "address-family": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ipv4-unicast": {
                            "value": "1"
                        }
                    },
                    {
                        "ipv6-unicast": {
                            "value": "2"
                        }
                    }
                ],
                "default": "ipv4-unicast",
                "description": "Address family.",
                "config": "false"
            },
            "route": "list"
        },
        "route": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "rib": {
                                    "route": {
                                        "destination-prefix": ""
                                    },
                                    "rib-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "destination-prefix",
                "description": "A list of system routes from various source, such as dynamic protocols and static route.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "destination-prefix": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    }
                ],
                "description": "IP destination prefix.",
                "config": "false"
            },
            "next-hop": "list"
        },
        "next-hop": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "rib": {
                                    "route": {
                                        "next-hop": {
                                            "interface": ""
                                        },
                                        "destination-prefix": ""
                                    },
                                    "rib-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "interface",
                "description": "Next-hop of a route item.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "interface": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../interface/if-name",
                "description": "Reference of the outgoing interface.",
                "config": "false"
            },
            "next-hop-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "description": "IP address of the next-hop.",
                "config": "false"
            }
        },
        "access-control-list": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "access-control-list": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa-acl",
                "description": "Attributes and objects pertaining to ACLs.",
                "user-class": "-w:SA -r:*",
                "system-managed": "true"
            },
            "acl": "list"
        },
        "acl": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "access-control-list": {
                                    "acl": {
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa-acl",
                "key": "name",
                "description": "Set of attributes associated with every access control list (ACL). An ACL can have one or more ACEs.",
                "edit-condition": {
                    "error-message": "Repeated type and interface.",
                    "value": "not(../acl[ name != current()/name][type=current()/type][interface=current()/interface])"
                },
                "user-class": "-w:SA -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..30",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Name of the ACL."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ipv4": {
                            "value": "10"
                        }
                    },
                    {
                        "ipv6": {
                            "value": "20"
                        }
                    }
                ],
                "mandatory": "true",
                "description": "Indicates the top-level type of ACL, i.e., what \n                                 fields from the associated IPv4 or IPv6 headers this ACL matches on.",
                "set-on-create-only": "true"
            },
            "interface": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../networking/interface/if-name",
                "mandatory": "true",
                "description": "A reference to the interface this filter \n                    shall be applied to.",
                "edit-condition": {
                    "error-message": "Only DCN, AUX1, AUX2 and PPP interface are supported",
                    "value": ". = 'DCN' or contains(., '-AUX-') or /ne/system/networking/interface[if-name=current()]/if-type = 'ppp'"
                },
                "set-on-create-only": "true"
            },
            "ace": "list"
        },
        "ace": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "access-control-list": {
                                    "acl": {
                                        "ace": {
                                            "sequence-id": ""
                                        },
                                        "name": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa-acl",
                "key": "sequence-id",
                "description": "Attributes pertaining to an access control entry (ACE). Every ACL can have one or more ACEs.",
                "create-condition": {
                    "error-message": "Source IP or destination IP or L4 ports or TTL or protocol are mandatory for ace creation.",
                    "value": "newvalue(source-ip-address) or newvalue(source-lower-port) or newvalue(source-upper-port) or \n                             newvalue(destination-ip-address) or newvalue(destination-lower-port) or \n                             newvalue(destination-upper-port) or newvalue(ttl) or newvalue(protocol)"
                },
                "edit-condition": [
                    {
                        "error-message": "source-upper-port must be higher than source-lower-port.",
                        "value": "protocol = 'icmp' or source-lower-port = 0 or source-upper-port = 0 or \n                                            source-lower-port <= source-upper-port"
                    },
                    {
                        "error-message": "destination-upper-port must be higher than destination-lower-port.",
                        "value": "protocol = 'icmp' or destination-lower-port = 0 or destination-upper-port = 0 or \n                                            destination-lower-port <= destination-upper-port"
                    },
                    {
                        "error-message": "Repeated ace configuration not allowed.",
                        "value": "deleted() or \n                                    not(../ace[sequence-id != current()/sequence-id and\n                                        protocol=current()/protocol and\n                                        (protocol='icmp' or \n                                            (source-lower-port=current()/source-lower-port and\n                                             source-upper-port=current()/source-upper-port and\n                                             destination-lower-port=current()/destination-lower-port and\n                                             destination-upper-port=current()/destination-upper-port)\n                                        ) and\n                                        source-ip-address=current()/source-ip-address and\n                                        destination-ip-address=current()/destination-ip-address and\n                                        ttl=current()/ttl and direction=current()/direction])"
                    }
                ],
                "user-class": "-w:SA -r:*"
            },
            "sequence-id": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "1..100",
                "description": "Sequence number that establishes the relative \n                        order of the ACE within an ACL"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "input": {
                            "value": "10"
                        }
                    },
                    {
                        "output": {
                            "value": "20"
                        }
                    }
                ],
                "default": "input",
                "description": "Based on the direction, this filter shall be applied \n                                     to incoming packets, or outgoing packets. Note that Input is \n                                     mandatory and output is an optional function.",
                "edit-condition": {
                    "error-message": "Access control supported only on input traffic.",
                    "value": " . = 'input' "
                }
            },
            "logging-action": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Flag to indicate if logging needs to be done once the ACE rule is matched."
            },
            "source-ip-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "any": {
                                    "value": "0",
                                    "description": "Applies for all ip ."
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "default": "any",
                "description": "Specifies the source IP of this filter. The\n                            values could be a valid IPv4/v6-address or Ipv4/v6-address/prefix.",
                "edit-condition": {
                    "error-message": "Invalid source-ip-address.",
                    "value": ". = 'any' or \n                                               (if (../../type = 'ipv4') then\n                                                    is-valid-ipv4-address(.)\n                                                else\n                                                   is-valid-ipv6-address(.))"
                }
            },
            "source-lower-port": {
                "yangType": "leaf",
                "when": "../protocol != 'icmp'",
                "type": "uint16",
                "range": "0..65535",
                "description": "The lower bound on the source Layer 4 TCP/UDP port number.\n                                     A value of zero for both indicates wildcarding.",
                "default": "0"
            },
            "source-upper-port": {
                "yangType": "leaf",
                "when": "../protocol != 'icmp'",
                "type": "uint16",
                "range": "0..65535",
                "description": "The upper bound on the source Layer 4 TCP/UDP port number.\n                                     A value of zero for both indicates wildcarding.",
                "default": "0"
            },
            "destination-ip-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "any": {
                                    "value": "0",
                                    "description": "Applies for all ip ."
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
                        ],
                        "description": "The ipv4-prefix type represents an IPv4 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 32. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The canonical format of an IPv4 prefix has all bits of\n      the IPv4 address set to zero that are not part of the\n      IPv4 prefix."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
                        ],
                        "description": "The ipv6-prefix type represents an IPv6 address prefix. \n      The prefix length is given by the number following the\n      slash character and must be less than or equal to 128. \n\n      A prefix length value of n corresponds to an IP address\n      mask that has n contiguous 1-bits from the most\n      significant bit (MSB) and all other bits set to 0.\n\n      The IPv6 address should have all bits that do not belong\n      to the prefix set to zero.\n\n      The canonical format of an IPv6 prefix has all bits of\n      the IPv6 address set to zero that are not part of the\n      IPv6 prefix.  Furthermore, the IPv6 address is represented\n      as defined in Section 4 of RFC 5952."
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "default": "any",
                "description": "Specifies the destination IP of this filter. The \n                            values could be a valid IPv4/v6-address or Ipv4/v6-address/prefix.",
                "edit-condition": {
                    "error-message": "Invalid destination-ip-address.",
                    "value": ". = 'any' or \n                                               (if (../../type = 'ipv4') then\n                                                    is-valid-ipv4-address(.)\n                                                else\n                                                   is-valid-ipv6-address(.))"
                }
            },
            "destination-lower-port": {
                "yangType": "leaf",
                "when": "../protocol != 'icmp'",
                "type": "uint16",
                "range": "0..65535",
                "description": "The lower bound on the destination Layer 4 TCP/UDP port number.\n                                     A value of zero for both indicates wildcarding.",
                "default": "0"
            },
            "destination-upper-port": {
                "yangType": "leaf",
                "when": "../protocol != 'icmp'",
                "type": "uint16",
                "range": "0..65535",
                "description": "The upper bound on the destination Layer 4 TCP/UDP port number.\n                                     A value of zero for both indicates wildcarding.",
                "default": "0"
            },
            "ttl": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "any": {
                                    "value": "0",
                                    "description": "Applies for all ttl values."
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint8",
                        "range": "1..255"
                    }
                ],
                "default": "any",
                "description": "IPv4 and IPv6 packet's time-to-live (TTL) hop limit. Default TTL value 255 is max hop"
            },
            "action": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "accept": {
                            "value": "10"
                        }
                    },
                    {
                        "reject": {
                            "value": "20"
                        }
                    },
                    {
                        "drop": {
                            "value": "30"
                        }
                    }
                ],
                "default": "drop",
                "description": "The action to be taken by the filter.",
                "edit-condition": {
                    "error-message": "Only 'accept' and 'drop' action supported.",
                    "value": " . != 'reject'"
                }
            },
            "protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "any": {
                            "value": "250",
                            "description": "Matches any protocol."
                        }
                    },
                    {
                        "ah": {
                            "value": "51",
                            "description": "Authentication Header."
                        }
                    },
                    {
                        "comp": {
                            "value": "108",
                            "description": "IP Compression"
                        }
                    },
                    {
                        "egp": {
                            "value": "8",
                            "description": "External Gateway Protocol"
                        }
                    },
                    {
                        "esp": {
                            "value": "50",
                            "description": "Encapsulating Security Payload"
                        }
                    },
                    {
                        "gre": {
                            "value": "47",
                            "description": "Generic Routing Encapsulation"
                        }
                    },
                    {
                        "icmp": {
                            "value": "1",
                            "description": "Internet Control Message Protocol"
                        }
                    },
                    {
                        "idrp": {
                            "value": "45",
                            "description": "Inter-Domain Routing Protocol"
                        }
                    },
                    {
                        "igmp": {
                            "value": "2",
                            "description": "Internet Group Management Protocol"
                        }
                    },
                    {
                        "igrp": {
                            "value": "88",
                            "description": "Interior Gateway Routing Protocol"
                        }
                    },
                    {
                        "isis": {
                            "value": "124",
                            "description": "Intermediate System-to-Intermediate System"
                        }
                    },
                    {
                        "ospf": {
                            "value": "89",
                            "description": "Open Shortest Path First"
                        }
                    },
                    {
                        "rsvp": {
                            "value": "46",
                            "description": "Resource Reservation Protocol"
                        }
                    },
                    {
                        "tcp": {
                            "value": "6",
                            "description": "Transmission Control Protocol"
                        }
                    },
                    {
                        "udp": {
                            "value": "17",
                            "description": "User Datagram Protocol"
                        }
                    },
                    {
                        "vrrp": {
                            "value": "112",
                            "description": "Virtual Router Redundancy Protocol"
                        }
                    }
                ],
                "default": "any",
                "description": "Internet Protocol number.  Refers to the protocol \n                                     payload.  In IPv6, this field is known as 'next-header', and \n                                     if extension headers are present, the protocol is present in \n                                     the 'upper-layer' header."
            }
        },
        "dns": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "dns": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "description": "Domain Name Server configuration",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Whether DNS is enabled."
            },
            "search": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "pattern": [
                    "(([A-Za-z0-9]*\\.)+[A-Za-z0-9]+)?"
                ],
                "description": "DNS-search-suffix name, should contain atleast single dot. \n                    To clear value, set to empty string.",
                "edit-condition": {
                    "error-message": "'search' must contain valid domain name with at least single dot. To clear value, set to empty string.",
                    "value": "re-match( .  ,'((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9])') or\n                      (. = '' )"
                }
            },
            "dns-server": "list"
        },
        "dns-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "networking": {
                                "dns": {
                                    "dns-server": {
                                        "address": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/networking",
                "key": "address",
                "description": "DNS server configuration.",
                "volatile-config": {
                    "when": "origin = 'dhcp'"
                },
                "create-condition": {
                    "error-message": "Maximum number of DNS servers allowed is 3",
                    "value": "count(../dns-server)  <= 3"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "description": "DNS address."
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "manual": {
                            "value": "1",
                            "description": "Indicates the dns address has been manually configured."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates dns address that has been assigned to this\n                                     system by a DHCP server."
                        }
                    }
                ],
                "description": "DNS address assignment method, user can convert\n                         DHCP configured DNS entry into a manual configured  by changing this attribute.",
                "edit-condition": {
                    "error-message": "Cannot manually set a dns-server to origin dhcp.",
                    "description": "Cannot manually set a dns-server to origin dhcp.",
                    "value": "request-info('internal') or . != 'dhcp' "
                }
            }
        },
        "clock": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "clock": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/time",
                "description": "System clock.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "current-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Indicates the current Date and Time of this NE.",
                "config": "false"
            },
            "universal-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Indicates the UTC Date and Time of this NE.",
                "config": "false"
            },
            "timezone": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "International_Date_Line_West[GMT-12:00]": {
                            "value": "1"
                        }
                    },
                    {
                        "Midway_Island-Samoa[GMT-11:00]": {
                            "value": "2"
                        }
                    },
                    {
                        "Hawaii[GMT-10:00]": {
                            "value": "3"
                        }
                    },
                    {
                        "Alaska[GMT-09:00]": {
                            "value": "4"
                        }
                    },
                    {
                        "Pacific_Time[US_and_Canada][GMT-08:00]": {
                            "value": "5"
                        }
                    },
                    {
                        "Arizona[GMT-07:00]": {
                            "value": "6"
                        }
                    },
                    {
                        "Mountain_Time[US_and_Canada][GMT-07:00]": {
                            "value": "7"
                        }
                    },
                    {
                        "CentralAmerica[GMT-06:00]": {
                            "value": "8"
                        }
                    },
                    {
                        "Central_Time[US_and_Canada][GMT-06:00]": {
                            "value": "9"
                        }
                    },
                    {
                        "Mexico_City-Tegucigalpa[GMT-06:00]": {
                            "value": "10"
                        }
                    },
                    {
                        "Saskatchewan[GMT-06:00]": {
                            "value": "11"
                        }
                    },
                    {
                        "Bagota-Lima-Quito[GMT-05:00]": {
                            "value": "12"
                        }
                    },
                    {
                        "Eastern_Time[US_and_Canada][GMT-05:00]": {
                            "value": "13"
                        }
                    },
                    {
                        "Indiana[East][GMT-05:00]": {
                            "value": "14"
                        }
                    },
                    {
                        "Caracas-La_Paz[GMT-04:30]": {
                            "value": "15"
                        }
                    },
                    {
                        "Atlantic_Time[Canada][GMT-04:00]": {
                            "value": "16"
                        }
                    },
                    {
                        "Santiago[GMT-04:00]": {
                            "value": "17"
                        }
                    },
                    {
                        "Newfoundland[GMT-03:30]": {
                            "value": "18"
                        }
                    },
                    {
                        "Brasilia[GMT-03:00]": {
                            "value": "19"
                        }
                    },
                    {
                        "Buenos_Aires-Georgetown[GMT-03:00]": {
                            "value": "20"
                        }
                    },
                    {
                        "Greenland[GMT-03:00]": {
                            "value": "21"
                        }
                    },
                    {
                        "Mid-Atlantic[GMT-02:00]": {
                            "value": "22"
                        }
                    },
                    {
                        "Azores[GMT-01:00]": {
                            "value": "23"
                        }
                    },
                    {
                        "Cape_Verde_Is.[GMT-01:00]": {
                            "value": "24"
                        }
                    },
                    {
                        "Casablanca-Monrovia[GMT]": {
                            "value": "25"
                        }
                    },
                    {
                        "Greenwich_Mean_Time:Dublin-Edinburgh-Lisbon-London[GMT]": {
                            "value": "26"
                        }
                    },
                    {
                        "Amsterdam-Copenhagen-Madrid-ParisVilnius[GMT+01:00]": {
                            "value": "27"
                        }
                    },
                    {
                        "Belgrade-Sarajevo-Skopje-Sofija-Zargreb[GMT+01:00]": {
                            "value": "28"
                        }
                    },
                    {
                        "Bratislava-Budapest-Ljublijana-Prague-Wasaw[GMT+01:00]": {
                            "value": "29"
                        }
                    },
                    {
                        "Brussels-Berlin-Bern-Rome-Stockholm-Vienna[GMT+01:00]": {
                            "value": "30"
                        }
                    },
                    {
                        "West_Central_Africa[GMT+01:00]": {
                            "value": "31"
                        }
                    },
                    {
                        "Athens-Istanbul-Minsk[GMT+02:00]": {
                            "value": "32"
                        }
                    },
                    {
                        "Bucharest[GMT+02:00]": {
                            "value": "33"
                        }
                    },
                    {
                        "Cairo[GMT+02:00]": {
                            "value": "34"
                        }
                    },
                    {
                        "Harare-Pretoria[GMT+02:00]": {
                            "value": "35"
                        }
                    },
                    {
                        "Helsinki-Riga-Tallinn[GMT+02:00]": {
                            "value": "36"
                        }
                    },
                    {
                        "Jerusalem[GMT+02:00]": {
                            "value": "37"
                        }
                    },
                    {
                        "Israel[GMT+02:00]": {
                            "value": "38"
                        }
                    },
                    {
                        "Baghdad[GMT+03:00]": {
                            "value": "39"
                        }
                    },
                    {
                        "Kuwait-Riyadh[GMT+03:00]": {
                            "value": "40"
                        }
                    },
                    {
                        "Moscow-St.Petersburg-Volgograd[GMT+03:00]": {
                            "value": "41"
                        }
                    },
                    {
                        "Nairobi[GMT+03:00]": {
                            "value": "42"
                        }
                    },
                    {
                        "Tehran[GMT+03:30]": {
                            "value": "43"
                        }
                    },
                    {
                        "Abu_Dhabi-Muscat[GMT+04:00]": {
                            "value": "44"
                        }
                    },
                    {
                        "Baku[GMT+04:00]": {
                            "value": "45"
                        }
                    },
                    {
                        "Tbilisi[GMT+04:00]": {
                            "value": "46"
                        }
                    },
                    {
                        "Kabul[GMT+04:30]": {
                            "value": "47"
                        }
                    },
                    {
                        "Ekaterinburg[GMT+05:00]": {
                            "value": "48"
                        }
                    },
                    {
                        "Islamabad-Karachi-Tashkent[GMT+05:00]": {
                            "value": "49"
                        }
                    },
                    {
                        "Mumbai-Calcutta-Chennai-New_Delhi[GMT+05:30]": {
                            "value": "50"
                        }
                    },
                    {
                        "Colombo[GMT+05:30]": {
                            "value": "51"
                        }
                    },
                    {
                        "Kathmandu[GMT+05:45]": {
                            "value": "52"
                        }
                    },
                    {
                        "Dhaka[GMT+06:00]": {
                            "value": "53"
                        }
                    },
                    {
                        "Almaty[GMT+06:00]": {
                            "value": "54"
                        }
                    },
                    {
                        "Rangoon[GMT+06:30]": {
                            "value": "55"
                        }
                    },
                    {
                        "Bangkok-Hanoi-Jakarta[GMT+07:00]": {
                            "value": "56"
                        }
                    },
                    {
                        "Beijing-Chongqing-Hong_Kong-Urumqi[GMT+08:00]": {
                            "value": "57"
                        }
                    },
                    {
                        "Perth[GMT+08:00]": {
                            "value": "58"
                        }
                    },
                    {
                        "Singapore-Kuala_Lumpur[GMT+08:00]": {
                            "value": "59"
                        }
                    },
                    {
                        "Taipei[GMT+08:00]": {
                            "value": "60"
                        }
                    },
                    {
                        "Osaka-Sapporo-Tokyo[GMT+09:00]": {
                            "value": "61"
                        }
                    },
                    {
                        "Seoul[GMT+09:00]": {
                            "value": "62"
                        }
                    },
                    {
                        "Yakutsk[GMT+09:00]": {
                            "value": "63"
                        }
                    },
                    {
                        "Adelaide[GMT+09:30]": {
                            "value": "64"
                        }
                    },
                    {
                        "Darwin[GMT+09:30]": {
                            "value": "65"
                        }
                    },
                    {
                        "Brisbane[GMT+10:00]": {
                            "value": "66"
                        }
                    },
                    {
                        "Canberra-Melbourne-Sydney[GMT+10:00]": {
                            "value": "67"
                        }
                    },
                    {
                        "Guam-Port_Moresby[GMT+10:00]": {
                            "value": "68"
                        }
                    },
                    {
                        "Hobart[GMT+10:00]": {
                            "value": "69"
                        }
                    },
                    {
                        "Vladivostok[GMT+10:00]": {
                            "value": "70"
                        }
                    },
                    {
                        "Magadan-Solomon_Is.-New_Caledonia[GMT+11:00]": {
                            "value": "71"
                        }
                    },
                    {
                        "Auckland-Wellington[GMT+12:00]": {
                            "value": "72"
                        }
                    },
                    {
                        "Fiji-Kamchatka-Marshall_Is.[GMT+12:00]": {
                            "value": "73"
                        }
                    },
                    {
                        "Eniwetok-Kwajalein[GMT+12:00]": {
                            "value": "74"
                        }
                    },
                    {
                        "Nuku_alofa[GMT+13:00]": {
                            "value": "75"
                        }
                    },
                    {
                        "Kiritimati[GMT+14:00]": {
                            "value": "76"
                        }
                    },
                    {
                        "Universal-Time-Coordinated": {
                            "value": "77"
                        }
                    }
                ],
                "default": "Universal-Time-Coordinated",
                "description": "Indicates the Name of the Time Zone of this NE."
            },
            "uptime": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..200",
                "config": "false",
                "description": "Indicates how long the system has been running."
            },
            "time-source": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ntp": {
                            "value": "1",
                            "description": "Indicates that NE uses NTP for synchronization."
                        }
                    },
                    {
                        "manual": {
                            "value": "2",
                            "description": "indicates that NE uses NE internal clock for Synchronization."
                        }
                    }
                ],
                "default": "manual",
                "config": "false",
                "description": "Indicates the source of the system current time."
            },
            "DST-active": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "config": "false",
                "description": "Whether daylight saving is active."
            }
        },
        "ntp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "ntp": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/time",
                "description": "Network Time Protocol Configuration.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ntp-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Whether ntp is enabled."
            },
            "ntp-auth-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Whether NTP authentication is enabled."
            },
            "ntp-active-server": {
                "yangType": "leaf",
                "type": "string",
                "config": "false",
                "description": "Currently active NTP server."
            },
            "ntp-key": "list",
            "ntp-server": "list"
        },
        "ntp-key": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "ntp": {
                                "ntp-key": {
                                    "key-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/time",
                "key": "key-id",
                "max-elements": "20",
                "description": "Keys to be used for NTP authentication.",
                "user-class": "-w:SA -r:*",
                "edit-condition": {
                    "error-message": "Not possible to edit/delete key as it is in use by a configured ntp-server.",
                    "value": "not(../ntp-server[auth-key-id = current()/key-id])"
                }
            },
            "key-id": {
                "yangType": "leaf",
                "type": "uint32",
                "range": "1..65534",
                "description": "NTP Key-ID."
            },
            "key-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sha-1": {
                            "value": "1",
                            "description": "Use sha-1 hash algorithm for NTP message digest computation"
                        }
                    },
                    {
                        "aes-cmac": {
                            "value": "2",
                            "description": "Use AES-CMAC hash algorithm for NTP message digest computation"
                        }
                    },
                    {
                        "sha-256": {
                            "value": "3",
                            "description": "Use sha-256 hash algorithm for NTP message digest computation"
                        }
                    },
                    {
                        "md5": {
                            "value": "4",
                            "description": "Use md5 hash algorithm for NTP message digest computation"
                        }
                    }
                ],
                "mandatory": "true",
                "description": "Hash algorithm for NTP message digest computation"
            },
            "key-value": {
                "yangType": "leaf",
                "type": "string",
                "length": "8..40",
                "mandatory": "true",
                "description": "NTP Key-value.",
                "password": "true",
                "edit-condition": {
                    "error-message": "Key cannot start with '#'.",
                    "value": "not(re-match(., '^#.*'))"
                }
            },
            "is-trusted": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Is trusted NTP key."
            }
        },
        "ntp-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "ntp": {
                                "ntp-server": {
                                    "ip-address": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/time",
                "key": "ip-address",
                "max-elements": "3",
                "description": "Configured NTP server.",
                "volatile-config": {
                    "when": "origin = 'dhcp'"
                },
                "logical-parent": "/ne/system/ntp/ntp-key[key-id = current()/auth-key-id]",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "ip-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "NTP Server IP address. Ipv4/Ipv6/hostname supported."
            },
            "origin": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "manual": {
                            "value": "1",
                            "description": "Indicates NTP address has been manually configured."
                        }
                    },
                    {
                        "dhcp": {
                            "value": "2",
                            "description": "Indicates NTP address that has been assigned to this\n                                system by a DHCP server."
                        }
                    }
                ],
                "description": "NTP address assignment method, user can convert\n                        DHCP configured NTP entry into a manual configured by changing this attribute.",
                "edit-condition": {
                    "error-message": "Cannot manually set a ntp-server to origin dhcp.",
                    "description": "Cannot mannually set the origin of ntp-server as dhcp.",
                    "value": "request-info('internal') or . != 'dhcp' "
                }
            },
            "auth-key-id": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "not-applicable": {
                                    "value": "0"
                                }
                            }
                        ]
                    },
                    {
                        "type": "uint32"
                    }
                ],
                "default": "not-applicable",
                "description": "Key ID to be used for this server.",
                "discover-values": "(seq(/ne/system/ntp/ntp-key/key-id), 'not-applicable')",
                "edit-condition": {
                    "error-message": "Invalid/non-trusted ntp auth-key-id.",
                    "value": " . = 'not-applicable' or \n                                        ( . = ../../ntp-key/key-id and\n                                          ../../ntp-key[key-id = current()]/is-trusted = 'true')"
                }
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "admin-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "lock": {
                            "value": "1"
                        }
                    },
                    {
                        "unlock": {
                            "value": "2"
                        }
                    },
                    {
                        "maintenance": {
                            "value": "3"
                        }
                    }
                ],
                "default": "unlock",
                "description": "The administrative state of the managed object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            },
            "avail-state": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "in-service",
                    "out-of-service",
                    "normal",
                    "abnormal",
                    "low-power",
                    "automatic",
                    "manual",
                    "equipment-not-present",
                    "equipment-mismatch",
                    "unassigned",
                    "faulted",
                    "partially-faulted",
                    "maintenance",
                    "supporting-faulted",
                    "facility-failure",
                    "auto-in-service",
                    "shutdown",
                    "in-test",
                    "upgrading",
                    "incomplete"
                ],
                "config": "false",
                "description": "Availability state of an entity."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "ntp-server-status": "container"
        },
        "ntp-server-status": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "ntp": {
                                "ntp-server": {
                                    "ntp-server-status": {},
                                    "ip-address": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/time",
                "config": "false",
                "description": "NTP server status.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "refid": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Reference clock type or address for the peer.",
                "config": "false"
            },
            "stratum": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Indicates the stratum of the remote peer.",
                "config": "false"
            },
            "type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..10",
                "description": "Type of the peer (local, unicast, multicast or broadcast)",
                "config": "false"
            },
            "when": {
                "yangType": "leaf",
                "type": "uint32",
                "units": "sec",
                "description": "Indicates time elapsed since last packet was received in seconds.",
                "config": "false"
            },
            "poll": {
                "yangType": "leaf",
                "type": "uint32",
                "units": "sec",
                "description": "Indicates the polling interval in seconds.",
                "config": "false"
            },
            "reach": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "Indicates the reachability of the configured server.\n                             This is an 8-bit shift register with the most recent probe in the 2^0 position.\n                             The value 377 indicates that all the recent probes have been answered.",
                "config": "false"
            },
            "delay": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "ms",
                "description": "Delay along path to the server in milliseconds.",
                "config": "false"
            },
            "offset": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "ms",
                "description": "Offset of clock to the peer in milliseconds.",
                "config": "false"
            },
            "jitter": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "3",
                "units": "ms",
                "description": "Jitter along path to the server in milliseconds.",
                "config": "false"
            },
            "auth-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ok": {
                            "value": "1"
                        }
                    },
                    {
                        "yes": {
                            "value": "2"
                        }
                    },
                    {
                        "bad": {
                            "value": "3"
                        }
                    },
                    {
                        "none": {
                            "value": "4"
                        }
                    }
                ],
                "default": "none",
                "description": "Authentication status of NTP server",
                "config": "false"
            },
            "condition": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..16",
                "description": "Condition of NTP server. Some of possible values: sys.peer/reject/candidate/...",
                "config": "false"
            }
        },
        "sw-services": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-services": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/sw-services",
                "description": "Information about the software services and containers on the node.",
                "user-class": "-w:NA -r:*",
                "persistency": "true",
                "system-managed": "true"
            },
            "sw-control-rule": "list",
            "sw-service": "list",
            "sw-container": "list"
        },
        "sw-control-rule": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-services": {
                                "sw-control-rule": {
                                    "service-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/sw-services",
                "key": "service-name",
                "description": "Optional service-specific custom rules to overide default action upon service failure.",
                "logical-parent": "/ne/system/sw-services/sw-service[sv-name = current()/service-name]",
                "discover-values": "//sw-service/sv-name",
                "create-condition": {
                    "error-message": "Invalid service name.",
                    "description": "Referenced service name must exist.",
                    "value": "boolean(../sw-service[sv-name = current()/service-name])"
                },
                "user-class": "-w:NA -r:*"
            },
            "service-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Name of the service to be monitored."
            },
            "fail-action": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system-restart": {
                            "value": "1",
                            "description": "Warm restart the system/card software immediately upon service failure."
                        }
                    },
                    {
                        "default-action": {
                            "value": "2",
                            "description": "Default policy of restarting the service, then rebooting the system if service not recovered."
                        }
                    },
                    {
                        "ignore": {
                            "value": "3",
                            "description": "No automatic action taken in case of service failure."
                        }
                    }
                ],
                "mandatory": "true",
                "description": "Action profile to be used in the case of service failure."
            }
        },
        "sw-service": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-services": {
                                "sw-service": {
                                    "sv-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/sw-services",
                "key": "sv-name",
                "config": "false",
                "description": "Software service running in the system.",
                "user-class": "-w:NA -r:*"
            },
            "sv-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "A unique Id for each service instance on the NE. Contains card type, shelf, slot information.",
                "config": "false"
            },
            "equipment": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../equipment/card/AID",
                "description": "Reference to the equipment on which the service is running.",
                "config": "false"
            },
            "location": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "host": {
                                    "value": "1"
                                }
                            }
                        ]
                    },
                    {
                        "type": "string",
                        "length": "1..128"
                    }
                ],
                "description": "Location where the service is running - host/container info.",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "off": {
                            "value": "1",
                            "description": "Default state of a service, indicates not being monitored."
                        }
                    },
                    {
                        "ok": {
                            "value": "2",
                            "description": "Indicates the service is ready and functional."
                        }
                    },
                    {
                        "fail": {
                            "value": "3",
                            "description": "Indicates the service failed to launch/turn-up or is unresponsive."
                        }
                    }
                ],
                "description": "Current status of the service.",
                "config": "false"
            },
            "state-details": {
                "yangType": "leaf",
                "type": "string",
                "description": "Brief description of the service status.",
                "config": "false"
            },
            "cpu-usage": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "Current usage of CPU by the service, in percentage. In a multi-core system, this indicates the overall usage relative to all cores.",
                "config": "false"
            },
            "memory-usage": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "Current usage of memory by the service, in percentage.",
                "config": "false"
            },
            "uptime": {
                "yangType": "leaf",
                "type": "string",
                "description": "Time since the service turned up, in days:hours:minutes.",
                "config": "false"
            },
            "last-start-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Time of the last service start/boot.",
                "config": "false"
            },
            "reboot-count": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "The number of times a service has restarted.",
                "config": "false"
            }
        },
        "sw-container": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-services": {
                                "sw-container": {
                                    "container-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/sw-services",
                "key": "container-name",
                "config": "false",
                "description": "List of OS-level containers.",
                "user-class": "-w:NA -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "description": "Brief description of the container instance.",
                "config": "false"
            },
            "container-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "A unique Id for each container.",
                "config": "false"
            },
            "equipment": {
                "yangType": "leaf",
                "type": "leafref",
                "path": "../../../../equipment/card/AID",
                "description": "Reference to the equipment on which the container is running.",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "off": {
                            "value": "1",
                            "description": "Default state of a container, indicates it is not launched yet."
                        }
                    },
                    {
                        "up": {
                            "value": "2",
                            "description": "Indicates the container is up and running."
                        }
                    },
                    {
                        "exited": {
                            "value": "3",
                            "description": "Indicates the container has exited."
                        }
                    }
                ],
                "description": "Current status of the container.",
                "config": "false"
            },
            "cpu-usage": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "Current usage of CPU by the container, in percentage. In a multi-core system, this indicates the overall usage relative to all cores.",
                "config": "false"
            },
            "memory-usage": {
                "yangType": "leaf",
                "type": "uint8",
                "range": "0 .. 100",
                "units": "percent",
                "description": "Current usage of memory by the container, in percentage.",
                "config": "false"
            },
            "uptime": {
                "yangType": "leaf",
                "type": "string",
                "description": "Time since the container started.",
                "config": "false"
            }
        },
        "file-servers": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "file-servers": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "description": "Container of all configured file-servers.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "file-server": "list"
        },
        "file-server": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "file-servers": {
                                "file-server": {
                                    "name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "User configurable file-server (e.g SFTP server), to be used by transfer operations (upload/download).",
                "edit-condition": {
                    "error-message": "Initial-path parameter is mandatory when protocol is file type.",
                    "value": "if (protocol = 'file') then initial-path != '' else true()"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Name of the server, as usable in download/upload commands."
            },
            "server-address": {
                "yangType": "leaf",
                "when": "../protocol != 'file'",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    },
                    {
                        "type": "string",
                        "length": "1..253",
                        "pattern": [
                            "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                        ],
                        "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                    }
                ],
                "description": "Address of the file-server",
                "mandatory": "true"
            },
            "server-port": {
                "yangType": "leaf",
                "when": "../protocol != 'file'",
                "type": "uint16",
                "description": "Port used for file transfer; if not provided, default will be used according with selected\n                                protocol."
            },
            "protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "sftp": {
                            "value": "1",
                            "description": "Represents sftp transfer protocol."
                        }
                    },
                    {
                        "ftp": {
                            "value": "3",
                            "description": "Represents ftp transfer protocol."
                        }
                    },
                    {
                        "scp": {
                            "value": "4",
                            "description": "Represents scp transfer protocol."
                        }
                    },
                    {
                        "http": {
                            "value": "5",
                            "description": "Represents http transfer protocol."
                        }
                    },
                    {
                        "https": {
                            "value": "6",
                            "description": "Represents https transfer protocol."
                        }
                    },
                    {
                        "file": {
                            "value": "7",
                            "description": "Represents local storage, including USB storage. Requires initial-path to be provided."
                        }
                    }
                ],
                "mandatory": "true",
                "description": "The file transfer protocol that this server supports.\n                                Non-secure protocols (ftp and http) are supported conditionally on configured security policies.",
                "edit-condition": {
                    "error-message": "HTTP/FTP protocols disabled via security policy.",
                    "value": "if (ancestor::system/security/security-policies/secure-mode = 'true') then\n                                            not( . = ('http', 'ftp'))\n                                        else \n                                            true()"
                }
            },
            "user-name": {
                "yangType": "leaf",
                "when": "../protocol != 'file'",
                "type": "string",
                "length": "0..64",
                "description": "User name credentials for the remote file server."
            },
            "password": {
                "yangType": "leaf",
                "when": "../protocol != 'file'",
                "type": "string",
                "length": "0..128",
                "description": "Password credentials for the remote file server.",
                "password": "true"
            },
            "initial-path": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "The directory in the file server that is used as source/destination.\n                                 If empty, means the root directory (/) on the server is the initial path.\n                                 Must be an absolute directory (e.g. starting with /)."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "sw-management": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "description": "Software management information.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "software-load": "list",
            "downloads": "container",
            "software-location": "list",
            "third-party-app": "list",
            "third-party-fw": "list"
        },
        "downloads": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "downloads": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "config": "false",
                "description": "Downloaded manifest files and associated image files.",
                "persistency": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "manifest": "list"
        },
        "manifest": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "downloads": {
                                    "manifest": {
                                        "manifest-file": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "manifest-file",
                "description": "Downloaded manifest file and it's information.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "manifest-file": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Manifest file",
                "config": "false"
            },
            "manifest-signature": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Manifest file signature",
                "length": "0..1024",
                "config": "false"
            },
            "downloaded-image": "list",
            "downloaded-on": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Manifest file downloaded timestamp",
                "config": "false"
            },
            "information": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Information on the manifest downloaded",
                "config": "false"
            }
        },
        "downloaded-image": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "downloads": {
                                    "manifest": {
                                        "downloaded-image": {
                                            "name": ""
                                        },
                                        "manifest-file": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "Downloaded software image files",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Downloaded software image name",
                "config": "false"
            },
            "signature": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?"
                ],
                "description": "Downloaded software image file signature",
                "length": "0..1024",
                "config": "false"
            }
        },
        "software-location": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-location": {
                                    "location-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "location-id",
                "config": "false",
                "description": "Software load information associated to each of the equipment.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "location-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Location of the equipment",
                "config": "false"
            },
            "software-load": "list"
        },
        "sw-management.software-load": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-load": {
                                    "swload-state": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "swload-state",
                "config": "false",
                "description": "Information on the Software Load present in the system.",
                "notify": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "swload-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1",
                            "description": "Active software load."
                        }
                    },
                    {
                        "inactive": {
                            "value": "2",
                            "description": "Inactive software load."
                        }
                    },
                    {
                        "installable": {
                            "value": "3",
                            "description": "Installable software load."
                        }
                    }
                ],
                "description": "Software load state",
                "config": "false"
            },
            "swload-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "description": "Software load version",
                "config": "false"
            },
            "swload-manifest": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "string",
                "length": "0..256",
                "description": "Software load manifest file",
                "config": "false"
            },
            "swload-prepared": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "boolean",
                "description": "Software load prepared",
                "config": "false"
            },
            "swload-status": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "status-unknown": {
                            "value": "0",
                            "description": "Software load status unknown."
                        }
                    },
                    {
                        "validate-in-progress": {
                            "value": "1",
                            "description": "Software load validation in progress."
                        }
                    },
                    {
                        "validate-complete": {
                            "value": "2",
                            "description": "Software load validation completed."
                        }
                    },
                    {
                        "validate-failed": {
                            "value": "3",
                            "description": "Software load validation failed."
                        }
                    },
                    {
                        "apply-in-progress": {
                            "value": "4",
                            "description": "Software load apply in progress."
                        }
                    },
                    {
                        "apply-complete": {
                            "value": "5",
                            "description": "Software load apply completed."
                        }
                    },
                    {
                        "apply-failed": {
                            "value": "6",
                            "description": "Software load apply failed."
                        }
                    },
                    {
                        "activate-in-progress": {
                            "value": "7",
                            "description": "Software load activation in progress."
                        }
                    },
                    {
                        "activate-failed": {
                            "value": "8",
                            "description": "Software load activation failed."
                        }
                    },
                    {
                        "activate-complete": {
                            "value": "9",
                            "description": "Software load activation completed."
                        }
                    },
                    {
                        "cancel-in-progress": {
                            "value": "10",
                            "description": "Software load cancel in progress."
                        }
                    },
                    {
                        "cancel-failed": {
                            "value": "11",
                            "description": "Software load cancel failed."
                        }
                    },
                    {
                        "cancel-complete": {
                            "value": "12",
                            "description": "Software load cancel completed."
                        }
                    },
                    {
                        "validate-timeout": {
                            "value": "13",
                            "description": "Software load validate timeout."
                        }
                    },
                    {
                        "apply-timeout": {
                            "value": "14",
                            "description": "Software load apply timeout."
                        }
                    },
                    {
                        "activate-timeout": {
                            "value": "15",
                            "description": "Software load activate timeout."
                        }
                    },
                    {
                        "cancel-timeout": {
                            "value": "16",
                            "description": "Software load cancel timeout."
                        }
                    }
                ],
                "description": "Software load current status.",
                "config": "false"
            },
            "swload-information": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "Software load information",
                "config": "false"
            },
            "swload-activation-type": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "direct": {
                            "value": "1",
                            "description": "No reboot type determined"
                        }
                    },
                    {
                        "warmstart": {
                            "value": "2",
                            "description": "Update requires warm reboot"
                        }
                    },
                    {
                        "coldstart": {
                            "value": "3",
                            "description": "Update requires cold reboot"
                        }
                    }
                ],
                "default": "direct",
                "description": "Software load activation type",
                "config": "false"
            },
            "swload-vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load vendor",
                "config": "false"
            },
            "swload-product": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load product",
                "config": "false"
            },
            "swload-label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load label",
                "config": "false"
            },
            "swload-delta-label": {
                "yangType": "leaf",
                "when": "../swload-state = 'active'",
                "type": "string",
                "length": "0..256",
                "description": "Software load delta label",
                "config": "false"
            },
            "swload-pkg-type": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "string",
                "length": "0..256",
                "description": "Software load package type",
                "config": "false"
            },
            "sw-component": "list",
            "packaged-fw": "list"
        },
        "software-location.software-load": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-location": {
                                    "software-load": {
                                        "swload-state": ""
                                    },
                                    "location-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "swload-state",
                "config": "false",
                "description": "Information on the Software Load present in the system.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "swload-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1",
                            "description": "Active software load."
                        }
                    },
                    {
                        "inactive": {
                            "value": "2",
                            "description": "Inactive software load."
                        }
                    },
                    {
                        "installable": {
                            "value": "3",
                            "description": "Installable software load."
                        }
                    }
                ],
                "description": "Software load state",
                "config": "false"
            },
            "swload-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "description": "Software load version",
                "config": "false"
            },
            "swload-manifest": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "string",
                "length": "0..256",
                "description": "Software load manifest file",
                "config": "false"
            },
            "swload-prepared": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "boolean",
                "description": "Software load prepared",
                "config": "false"
            },
            "swload-status": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "status-unknown": {
                            "value": "0",
                            "description": "Software load status unknown."
                        }
                    },
                    {
                        "validate-in-progress": {
                            "value": "1",
                            "description": "Software load validation in progress."
                        }
                    },
                    {
                        "validate-complete": {
                            "value": "2",
                            "description": "Software load validation completed."
                        }
                    },
                    {
                        "validate-failed": {
                            "value": "3",
                            "description": "Software load validation failed."
                        }
                    },
                    {
                        "apply-in-progress": {
                            "value": "4",
                            "description": "Software load apply in progress."
                        }
                    },
                    {
                        "apply-complete": {
                            "value": "5",
                            "description": "Software load apply completed."
                        }
                    },
                    {
                        "apply-failed": {
                            "value": "6",
                            "description": "Software load apply failed."
                        }
                    },
                    {
                        "activate-in-progress": {
                            "value": "7",
                            "description": "Software load activation in progress."
                        }
                    },
                    {
                        "activate-failed": {
                            "value": "8",
                            "description": "Software load activation failed."
                        }
                    },
                    {
                        "activate-complete": {
                            "value": "9",
                            "description": "Software load activation completed."
                        }
                    },
                    {
                        "cancel-in-progress": {
                            "value": "10",
                            "description": "Software load cancel in progress."
                        }
                    },
                    {
                        "cancel-failed": {
                            "value": "11",
                            "description": "Software load cancel failed."
                        }
                    },
                    {
                        "cancel-complete": {
                            "value": "12",
                            "description": "Software load cancel completed."
                        }
                    },
                    {
                        "validate-timeout": {
                            "value": "13",
                            "description": "Software load validate timeout."
                        }
                    },
                    {
                        "apply-timeout": {
                            "value": "14",
                            "description": "Software load apply timeout."
                        }
                    },
                    {
                        "activate-timeout": {
                            "value": "15",
                            "description": "Software load activate timeout."
                        }
                    },
                    {
                        "cancel-timeout": {
                            "value": "16",
                            "description": "Software load cancel timeout."
                        }
                    }
                ],
                "description": "Software load current status.",
                "config": "false"
            },
            "swload-information": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "Software load information",
                "config": "false"
            },
            "swload-activation-type": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "enumeration",
                "enum-value": [
                    {
                        "direct": {
                            "value": "1",
                            "description": "No reboot type determined"
                        }
                    },
                    {
                        "warmstart": {
                            "value": "2",
                            "description": "Update requires warm reboot"
                        }
                    },
                    {
                        "coldstart": {
                            "value": "3",
                            "description": "Update requires cold reboot"
                        }
                    }
                ],
                "default": "direct",
                "description": "Software load activation type",
                "config": "false"
            },
            "swload-vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load vendor",
                "config": "false"
            },
            "swload-product": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load product",
                "config": "false"
            },
            "swload-label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Software load label",
                "config": "false"
            },
            "swload-delta-label": {
                "yangType": "leaf",
                "when": "../swload-state = 'active'",
                "type": "string",
                "length": "0..256",
                "description": "Software load delta label",
                "config": "false"
            },
            "swload-pkg-type": {
                "yangType": "leaf",
                "when": "../swload-state = 'installable'",
                "type": "string",
                "length": "0..256",
                "description": "Software load package type",
                "config": "false"
            },
            "sw-component": "list",
            "packaged-fw": "list"
        },
        "sw-management.software-load.sw-component": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-load": {
                                    "sw-component": {
                                        "name": ""
                                    },
                                    "swload-state": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "Software load component details",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "description": "Package information",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "installed": {
                            "value": "1",
                            "description": "Software package installed"
                        }
                    },
                    {
                        "not-installed": {
                            "value": "2",
                            "description": "Software package not installed"
                        }
                    },
                    {
                        "installation-failed": {
                            "value": "3",
                            "description": "Software package install failed"
                        }
                    },
                    {
                        "unknown": {
                            "value": "4",
                            "description": "Software package state unknown"
                        }
                    }
                ],
                "default": "unknown",
                "description": "Package state",
                "config": "false"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Package version",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..256",
                "description": "Package name",
                "config": "false"
            },
            "sw-subcomponent": "list"
        },
        "software-location.software-load.sw-component": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-location": {
                                    "software-load": {
                                        "sw-component": {
                                            "name": ""
                                        },
                                        "swload-state": ""
                                    },
                                    "location-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "Software load component details",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "description": "Package information",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "installed": {
                            "value": "1",
                            "description": "Software package installed"
                        }
                    },
                    {
                        "not-installed": {
                            "value": "2",
                            "description": "Software package not installed"
                        }
                    },
                    {
                        "installation-failed": {
                            "value": "3",
                            "description": "Software package install failed"
                        }
                    },
                    {
                        "unknown": {
                            "value": "4",
                            "description": "Software package state unknown"
                        }
                    }
                ],
                "default": "unknown",
                "description": "Package state",
                "config": "false"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Package version",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..256",
                "description": "Package name",
                "config": "false"
            },
            "sw-subcomponent": "list"
        },
        "sw-management.software-load.sw-component.sw-subcomponent": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-load": {
                                    "sw-component": {
                                        "sw-subcomponent": {
                                            "name": ""
                                        },
                                        "name": ""
                                    },
                                    "swload-state": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "Software load subcomponent details",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "description": "Package information",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "installed": {
                            "value": "1",
                            "description": "Software package installed"
                        }
                    },
                    {
                        "not-installed": {
                            "value": "2",
                            "description": "Software package not installed"
                        }
                    },
                    {
                        "installation-failed": {
                            "value": "3",
                            "description": "Software package install failed"
                        }
                    },
                    {
                        "unknown": {
                            "value": "4",
                            "description": "Software package state unknown"
                        }
                    }
                ],
                "default": "unknown",
                "description": "Package state",
                "config": "false"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Package version",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..256",
                "description": "Package name",
                "config": "false"
            }
        },
        "software-location.software-load.sw-component.sw-subcomponent": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-location": {
                                    "software-load": {
                                        "sw-component": {
                                            "sw-subcomponent": {
                                                "name": ""
                                            },
                                            "name": ""
                                        },
                                        "swload-state": ""
                                    },
                                    "location-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "name",
                "description": "Software load subcomponent details",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..512",
                "description": "Package information",
                "config": "false"
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "installed": {
                            "value": "1",
                            "description": "Software package installed"
                        }
                    },
                    {
                        "not-installed": {
                            "value": "2",
                            "description": "Software package not installed"
                        }
                    },
                    {
                        "installation-failed": {
                            "value": "3",
                            "description": "Software package install failed"
                        }
                    },
                    {
                        "unknown": {
                            "value": "4",
                            "description": "Software package state unknown"
                        }
                    }
                ],
                "default": "unknown",
                "description": "Package state",
                "config": "false"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Package version",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..256",
                "description": "Package name",
                "config": "false"
            }
        },
        "sw-management.software-load.packaged-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-load": {
                                    "packaged-fw": {
                                        "equipment-type": "",
                                        "fw-name": ""
                                    },
                                    "swload-state": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "equipment-type fw-name",
                "description": "Firmware version included in this software-load.\n                             Versions for the same firmware can be different per equipment-type.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "equipment-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Type of the equipment (card, etc) that will use this firmware.",
                "config": "false"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Included version of the firmware.",
                "config": "false"
            }
        },
        "software-location.software-load.packaged-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "software-location": {
                                    "software-load": {
                                        "packaged-fw": {
                                            "equipment-type": "",
                                            "fw-name": ""
                                        },
                                        "swload-state": ""
                                    },
                                    "location-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "equipment-type fw-name",
                "description": "Firmware version included in this software-load.\n                             Versions for the same firmware can be different per equipment-type.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "equipment-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Type of the equipment (card, etc) that will use this firmware.",
                "config": "false"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "fw-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Included version of the firmware.",
                "config": "false"
            }
        },
        "third-party-app": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "third-party-app": {
                                    "app-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "app-name",
                "description": "List of 3rd party applications.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "app-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Third party app name."
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Third party app version."
            },
            "vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Third party app vendor."
            },
            "product": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Third party app product."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Third party app label."
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "running": {
                            "value": "1",
                            "description": "Third party app running."
                        }
                    },
                    {
                        "stopped": {
                            "value": "2",
                            "description": "Third party app stopped."
                        }
                    },
                    {
                        "failed": {
                            "value": "3",
                            "description": "Third party app failed."
                        }
                    }
                ],
                "default": "stopped",
                "description": "Third party app state."
            },
            "information": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "Third party app information."
            },
            "enable": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "Third-party-app enabled state. If enabled, app is started(app is enabled also upon system restart). If disabled, app is stopped."
            }
        },
        "third-party-fw": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "sw-management": {
                                "third-party-fw": {
                                    "fw-name": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "fw-name",
                "config": "false",
                "description": "List of 3rd party fw files available to be used to upgrade 3rd party equipment.",
                "persistency": "true",
                "notify": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "fw-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Name of the firmware.",
                "config": "false"
            },
            "file-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "valid": {
                            "value": "1",
                            "description": "fw file is present and is valid (crc matches)."
                        }
                    },
                    {
                        "invalid": {
                            "value": "2",
                            "description": "fw file is present but is invalid (crc doesn't match)."
                        }
                    },
                    {
                        "missing": {
                            "value": "3",
                            "description": "fw file is not present."
                        }
                    }
                ],
                "description": "Firmware file status.",
                "config": "false"
            },
            "path": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Path for the firmware image.",
                "config": "false"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Firmware version.",
                "config": "false"
            },
            "crc": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Cyclic redundancy check (CRC) of the firmware image, used to validate the file when present.",
                "config": "false"
            },
            "vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "The vendor of the firmware.",
                "config": "false"
            },
            "part-number": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "0..64",
                "max-elements": "50",
                "description": "The part-number of the firmware.",
                "config": "false"
            },
            "nsa-upgrade-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Versions from where the upgrade is non service affecting (nsa).",
                "config": "false"
            },
            "present-in-eqpt": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "max-elements": "80",
                "description": "List of resources that contain this version.",
                "persistency": "false",
                "config": "false"
            },
            "applicable-eqpt": {
                "yangType": "leaf-list",
                "type": "instance-identifier",
                "max-elements": "80",
                "description": "List of resources that this firmware can be applied apply.",
                "persistency": "false",
                "config": "false"
            }
        },
        "database": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "database": {
                                "database-type": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/swm",
                "key": "database-type",
                "config": "false",
                "description": "The list of the databases in the system.",
                "persistency": "false",
                "notify": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Database description",
                "config": "false"
            },
            "database-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1"
                        }
                    },
                    {
                        "onehour": {
                            "value": "2"
                        }
                    },
                    {
                        "oneday": {
                            "value": "3"
                        }
                    },
                    {
                        "oneweek": {
                            "value": "4"
                        }
                    },
                    {
                        "temp": {
                            "value": "5"
                        }
                    },
                    {
                        "manual": {
                            "value": "6"
                        }
                    },
                    {
                        "rollback": {
                            "value": "7"
                        }
                    }
                ],
                "description": "Database identifier.",
                "config": "false"
            },
            "database-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "1"
                        }
                    },
                    {
                        "inactive": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Indicates the state of the database.",
                "config": "false"
            },
            "database-version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..20",
                "description": "Indicates the database version.",
                "config": "false"
            },
            "database-vendor": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Vendor information of the database.",
                "config": "false"
            },
            "database-product": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Indicates the network element family this database belongs to.",
                "config": "false"
            },
            "ne-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User assigned name for this NE as present in this database.",
                "config": "false"
            },
            "node-controller-serial-number": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "Serial number of the node controller.",
                "config": "false"
            },
            "loopback-ipv4": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                ],
                "description": "loopback ipv4 address.",
                "config": "false"
            },
            "loopback-ipv6": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                    "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                ],
                "description": "loopback ipv6 address.",
                "config": "false"
            },
            "backup-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Indicates the database snapshot backup time.",
                "when": "string(.) != '' ",
                "config": "false"
            }
        },
        "telemetry": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "telemetry": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/telemetry",
                "description": "Top level configuration and state for the\n             device telemetry system.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "subscriptions": "container"
        },
        "subscriptions": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "telemetry": {
                                "subscriptions": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/telemetry",
                "description": "This container holds information for both persistent\n                     and dynamic telemetry subscriptions.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "dynamic": "container"
        },
        "dynamic": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "telemetry": {
                                "subscriptions": {
                                    "dynamic": {}
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/telemetry",
                "config": "false",
                "description": "This container holds information relating to dynamic\n                         telemetry subscriptions. A dynamic subscription is\n                         typically configured through an RPC channel, and does not\n                         persist across device restarts, or if the RPC channel is\n                         reset or otherwise torn down.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "dial-in-subscription": "list"
        },
        "dial-in-subscription": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "telemetry": {
                                "subscriptions": {
                                    "dynamic": {
                                        "dial-in-subscription": {
                                            "subscription-name": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/telemetry",
                "key": "subscription-name",
                "description": "List representation of telemetry subscriptions that\n                             are configured via an inline RPC, otherwise known\n                             as dynamic telemetry subscriptions.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "subscription-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..128",
                "description": "User configured identifier of the telemetry\n                 subscription. This value is used primarily for\n                 subscriptions configured locally on the network\n                 element. For dial-in subscription this name is \n                 configured by the NBI.",
                "config": "false"
            },
            "encoding": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "json": {
                            "value": "1"
                        }
                    },
                    {
                        "bytes": {
                            "value": "2"
                        }
                    },
                    {
                        "proto": {
                            "value": "3"
                        }
                    },
                    {
                        "ascii": {
                            "value": "4"
                        }
                    },
                    {
                        "json-ietf": {
                            "value": "5"
                        }
                    }
                ],
                "default": "json-ietf",
                "description": "Specifies the data encoding scheme to be used for data\n                 sent to and from the target device.  The encoding may\n                 be specified for all data, or optionally on a per-RPC\n                 basis if supported by the target.",
                "config": "false"
            },
            "transfer-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "stream": {
                            "value": "1",
                            "description": "Values streamed by the target."
                        }
                    },
                    {
                        "once": {
                            "value": "2",
                            "description": "Values sent once-off by the target."
                        }
                    },
                    {
                        "poll": {
                            "value": "3",
                            "description": "Values sent in response to a poll request."
                        }
                    }
                ],
                "default": "stream",
                "description": "Specifies the data transfer mode to the target device.",
                "config": "false"
            },
            "updates-only": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "A Boolean flag allowing to only send updates to the current state,\n                 when set to true the device will not send the initial current value,\n                 rather only changes to the initial value.",
                "config": "false"
            },
            "user-access": {
                "yangType": "leaf",
                "type": "string",
                "description": "Username in order to resolve paths according to user access.",
                "config": "false"
            },
            "subscription-paths": "list",
            "protocol": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ssh": {
                            "value": "1"
                        }
                    },
                    {
                        "grpc": {
                            "value": "2"
                        }
                    },
                    {
                        "json-rpc": {
                            "value": "3"
                        }
                    },
                    {
                        "websocket-rpc": {
                            "value": "4"
                        }
                    }
                ],
                "default": "grpc",
                "description": "Selection of the transport protocol for the telemetry\n                stream.",
                "config": "false"
            }
        },
        "subscription-paths": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "telemetry": {
                                "subscriptions": {
                                    "dynamic": {
                                        "dial-in-subscription": {
                                            "subscription-paths": {
                                                "subscription-path-id": ""
                                            },
                                            "subscription-name": ""
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/telemetry",
                "key": "subscription-path-id",
                "description": "List of single subscriptions paths keyed by\n                 subscription-path-id.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "subscription-path-id": {
                "yangType": "leaf",
                "type": "int32",
                "description": "Identifier of the single subscription path in the subscription list.",
                "config": "false"
            },
            "subscription-path": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..520",
                "mandatory": "true",
                "description": "Specifies a path in the data model path corresponding to\n                     the data in the message",
                "config": "false"
            },
            "subscription-path-origin": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Specifies the schema tree in order to disambiguate the path.",
                "config": "false"
            },
            "exclude-filter": {
                "yangType": "leaf",
                "type": "string",
                "description": "Optional filter expression to be used in filtering data\n                     elements from the subtree specified by the corresponding\n                     path.",
                "config": "false"
            },
            "subscription-path-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "target-defined": {
                            "value": "1",
                            "description": "Subcription updates are sent according with system definition."
                        }
                    },
                    {
                        "on-change": {
                            "value": "2",
                            "description": "Subscription updates are sent when there are changes."
                        }
                    },
                    {
                        "sample": {
                            "value": "3",
                            "description": "Subscription updates are sent periodically."
                        }
                    }
                ],
                "default": "target-defined",
                "description": "Specify how the device should return the values of the subscription-path",
                "config": "false"
            },
            "sample-interval": {
                "yangType": "leaf",
                "type": "uint64",
                "units": "milliseconds",
                "default": "0",
                "description": "Time in milliseconds between the device's sample of a\n                     telemetry data source. For example, setting this to 2000\n                     would require the local device to collect the telemetry\n                     data every 2000 milliseconds. There can be latency or jitter\n                     in transmitting the data, but the sample must occur at\n                     the specified interval.\n                     The timestamp must reflect the actual time when the data\n                     was sampled, not simply the previous sample timestamp +\n                     sample-interval.\n                     Set to 0 when optional. On the case of stream 'target-defined'\n                     it is automatically adjusted from 0 to 10 seconds.",
                "config": "false"
            },
            "heartbeat-interval": {
                "yangType": "leaf",
                "type": "uint64",
                "units": "milliseconds",
                "default": "0",
                "description": "Maximum time interval in milliseconds that may pass\n                     between updates from a device to a telemetry collector.\n                     If this interval expires, but there is no updated data to\n                     send (such as if suppress_updates has been configured), the\n                     device must send a telemetry message to the collector.\n                     Set to 0 when optional. On the case of stream 'target-defined'\n                     and 'sample-interface' was adjusted to 10 seconds if 'heartbeat-interval' was set\n                     and not lower than 10 sec it is automatically adjusted to 20 seconds.",
                "config": "false"
            },
            "suppress-redundant": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Boolean flag to control suppression of redundant\n                     telemetry updates to the collector platform. If this flag is\n                     set to TRUE, then the collector will only send an update at\n                     the configured interval if a subscribed data value has\n                     changed. Otherwise, the device will not send an update to\n                     the collector until expiration of the heartbeat interval.",
                "config": "false"
            }
        },
        "fdr": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system": {
                            "fdr": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/transfer",
                "description": "Flight Data Recorder(FDR)",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "streaming-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Allows live streaming of FDR information when Enabled"
            }
        },
        "topology": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "description": "Topology information related with this NE.",
                "user-class": "-w:NA,PR,TT -r:*",
                "system-managed": "true"
            },
            "lldp": "container",
            "icdp": "container",
            "inci": "container"
        },
        "lldp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "lldp": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "description": "Global LLDP configuration.",
                "system-managed": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "hold-on-timer": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "seconds",
                "default": "900",
                "description": "Time to keep neighbor information, in case neighbor does not have an explicit Time-To-Live (TTL) TLV."
            },
            "lldp-neighbor": "list",
            "lldp-port-statistics": "list"
        },
        "lldp-neighbor": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "lldp": {
                                "lldp-neighbor": {
                                    "lldp-port": "",
                                    "direction": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "lldp-port direction",
                "config": "false",
                "description": "LLDP remote system discovered by lldp-port.\n                                 This information is kept indefinitely, until the port is decomissioned, or the \n                                 data is manually cleared by user.",
                "notify": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "lldp-port": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Local port that is connected to this LLDP neighbor.",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Direction in which the neighbor was detected.",
                "config": "false"
            },
            "last-update": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Timestamp with the last time this neighbor info was updated.",
                "notify": "true",
                "config": "false"
            },
            "age": {
                "yangType": "leaf",
                "type": "uint64",
                "units": "seconds",
                "description": "Number of seconds since discovery.",
                "notify": "false",
                "config": "false"
            },
            "chassis-id-subtype": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "reserved": {
                            "value": "0",
                            "description": "Represents another subtype, not covered by the other options.\n                                             When reserved subtype is used, the chassis-id is displayed as a hex string."
                        }
                    },
                    {
                        "chassis-component": {
                            "value": "1",
                            "description": "Represents a chassis identifier based on the value of entPhysicalAlias object\n                                            (defined in IETF RFC 2737) for a chassis component (i.e., an entPhysicalClass value \n                                            of 'chassis(3)')"
                        }
                    },
                    {
                        "interface-alias": {
                            "value": "2",
                            "description": "Represents a chassis identifier based on the value of ifAlias object (defined in\n                                            IETF RFC 2863) for an interface on the containing chassis."
                        }
                    },
                    {
                        "port-component": {
                            "value": "3",
                            "description": "Represents a chassis identifier based on the value of entPhysicalAlias object\n                                            (defined in IETF RFC 2737) for a port or backplane component (i.e., entPhysicalClass \n                                            value of 'port(10)' or 'backplane(4)'), within the containing chassis."
                        }
                    },
                    {
                        "mac-address": {
                            "value": "4",
                            "description": "Represents a chassis identifier based on the value of a unicast source address\n                                            (encoded in network byte order and IEEE 802.3 canonical bit order), of a port on \n                                            the containing chassis as defined in IEEE Std 802-2001."
                        }
                    },
                    {
                        "network-address": {
                            "value": "5",
                            "description": "Represents a chassis identifier based on a network address, associated with\n                                            a particular chassis.  The encoded address is actually composed of two fields.  \n                                            The first field is a single octet, representing the IANA AddressFamilyNumbers \n                                            value for the specific address type, and the second field is the network\n                                            address value."
                        }
                    },
                    {
                        "interface-name": {
                            "value": "6",
                            "description": "Represents a chassis identifier based on the value of ifName object (defined in\n                                            IETF RFC 2863) for an interface on the containing chassis."
                        }
                    },
                    {
                        "local": {
                            "value": "7",
                            "description": "Represents a chassis identifier based on a locally defined value."
                        }
                    }
                ],
                "description": "This attribute describes the format of the chassis-id string.",
                "notify": "true",
                "config": "false"
            },
            "chassis-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "\n                            This attribute identifies the chassis component withing the LLDP remote system..\n                            This value needs to be interpreted according with the associated chassis-id-subtype, which identifies \n                            the format of this value.",
                "notify": "true",
                "config": "false"
            },
            "port-id-subtype": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "interface-alias": {
                            "value": "1",
                            "description": "Means that the port-id string identifies a particular instance of the ifAlias object (defined in IETF\n                                            RFC 2863).  If the particular ifAlias object does not contain any values, another port identifier type should be used."
                        }
                    },
                    {
                        "port-component": {
                            "value": "2",
                            "description": "Means that the port-id string identifies a particular instance of the entPhysicalAlias object (defined in IETF RFC 2737) \n                                            for a port or backplane component."
                        }
                    },
                    {
                        "mac-address": {
                            "value": "3",
                            "description": "Means that the port-id string identifies a particular unicast source address (encoded in network byte order\n                                            and IEEE 802.3 canonical bit order) associated with the port (IEEE Std 802-2001)."
                        }
                    },
                    {
                        "network-address": {
                            "value": "4",
                            "description": "Means that the port-id string identifies a network address associated with the port. The first octet contains\n                                            the IANA AddressFamilyNumbers enumeration value for the specific address type, and octets 2 through N contain the\n                                            networkAddress address value in network byte order."
                        }
                    },
                    {
                        "interface-name": {
                            "value": "5",
                            "description": "Means that the port-id string identifies a  particular instance of the ifName object (defined in IETF\n                                            RFC 2863). If the particular ifName object does not contain any values, another port identifier type should be used."
                        }
                    },
                    {
                        "agent-circuit-id": {
                            "value": "6",
                            "description": "Means that the port-id string identifies an agent-local identifier of the circuit (defined in RFC 3046)."
                        }
                    },
                    {
                        "local": {
                            "value": "7",
                            "description": "Means that the port-id string identifies a locally assigned port ID"
                        }
                    }
                ],
                "description": "This attribute describes the format of the port-id string.",
                "notify": "true",
                "config": "false"
            },
            "port-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "\n                            This attribute identifies the port within the LLDP remote system chassis.\n                            This value needs to be interpreted according with the associated port-id-subtype, which identifies\n                            the format of this value.",
                "notify": "true",
                "config": "false"
            },
            "port-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "The string value used to identify the description of the given port associated with the remote system.",
                "notify": "true",
                "config": "false"
            },
            "system-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "The string value used to identify the system name of the remote system.",
                "notify": "true",
                "config": "false"
            },
            "system-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "The string value used to identify the system description of the remote system.",
                "notify": "true",
                "config": "false"
            },
            "supported-capabilities": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "other",
                    "repeater",
                    "bridge",
                    "wlan-access-point",
                    "router",
                    "telephone",
                    "docsis-cable-device",
                    "station-only",
                    "c-vlan-component",
                    "s-vlan-component",
                    "two-port-mac-relay"
                ],
                "description": "This attribute describes the remote system supported capabilities.",
                "notify": "true",
                "config": "false"
            },
            "enabled-capabilities": {
                "yangType": "leaf",
                "type": "bits",
                "bit-value": [
                    "other",
                    "repeater",
                    "bridge",
                    "wlan-access-point",
                    "router",
                    "telephone",
                    "docsis-cable-device",
                    "station-only",
                    "c-vlan-component",
                    "s-vlan-component",
                    "two-port-mac-relay"
                ],
                "description": "This attribute describes the remote system enabled capabilities.",
                "notify": "true",
                "config": "false"
            },
            "ttl": {
                "yangType": "leaf",
                "type": "uint32",
                "units": "seconds",
                "description": "Remote system info Time-To-Live (TTL); the number of seconds until information expires.\n                                    If the remote system deosn't provide a ttl value, this parameter is set to the global hold-on-timer.",
                "notify": "true",
                "config": "false"
            },
            "management-address": "list",
            "custom-tlv": "list"
        },
        "management-address": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "lldp": {
                                "lldp-neighbor": {
                                    "management-address": {
                                        "address-subtype": "",
                                        "address": ""
                                    },
                                    "lldp-port": "",
                                    "direction": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "address-subtype address",
                "description": "Management address information about a particular chassis\n                            component.  There may be multiple management addresses\n                            configured on the remote system identified by a particular\n                            index whose information is received on the local system.  \n                            Each management address should have distinct 'management address\n                            type' (subtype) and 'management address' (address).",
                "notify": "all-true",
                "config": "false",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "address-subtype": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ipV4": {
                            "value": "1",
                            "description": "IP version 4"
                        }
                    },
                    {
                        "ipV6": {
                            "value": "2",
                            "description": "IP version 6"
                        }
                    },
                    {
                        "nsap": {
                            "value": "3",
                            "description": "NSAP"
                        }
                    },
                    {
                        "hdlc": {
                            "value": "4",
                            "description": "HDLC (8-bit multidrop)"
                        }
                    },
                    {
                        "bbn1822": {
                            "value": "5",
                            "description": "BBN 1822"
                        }
                    },
                    {
                        "all802": {
                            "value": "6",
                            "description": "802 (includes all 802 media plus Ethernet 'canonical\n              format')"
                        }
                    },
                    {
                        "e163": {
                            "value": "7",
                            "description": "E.163"
                        }
                    },
                    {
                        "e164": {
                            "value": "8",
                            "description": "E.164 (SMDS, FrameRelay, ATM)"
                        }
                    },
                    {
                        "f69": {
                            "value": "9",
                            "description": "F.69 (Telex)"
                        }
                    },
                    {
                        "x121": {
                            "value": "10",
                            "description": "X.121 (X.25, Frame Relay)"
                        }
                    },
                    {
                        "ipx": {
                            "value": "11",
                            "description": "IPX (Internetwork Packet Exchange)"
                        }
                    },
                    {
                        "appletalk": {
                            "value": "12",
                            "description": "Appletalk"
                        }
                    },
                    {
                        "decnetIV": {
                            "value": "13",
                            "description": "DECnet IV"
                        }
                    },
                    {
                        "banyanVines": {
                            "value": "14",
                            "description": "Banyan Vines"
                        }
                    },
                    {
                        "e164withNsap": {
                            "value": "15",
                            "description": "E.164 with NSAP format subaddress"
                        }
                    },
                    {
                        "dns": {
                            "value": "16",
                            "description": "DNS (Domain Name System)"
                        }
                    },
                    {
                        "distinguishedName": {
                            "value": "17",
                            "description": "Distinguished Name (per X.500)"
                        }
                    },
                    {
                        "asNumber": {
                            "value": "18",
                            "description": "Autonomous System Number"
                        }
                    },
                    {
                        "xtpOverIpv4": {
                            "value": "19",
                            "description": "XTP over IP version 4"
                        }
                    },
                    {
                        "xtpOverIpv6": {
                            "value": "20",
                            "description": "XTP over IP version 6"
                        }
                    },
                    {
                        "xtpNativeModeXTP": {
                            "value": "21",
                            "description": "XTP native mode XTP"
                        }
                    },
                    {
                        "fibreChannelWWPN": {
                            "value": "22",
                            "description": "Fibre Channel World-Wide Port Name"
                        }
                    },
                    {
                        "fibreChannelWWNN": {
                            "value": "23",
                            "description": "Fibre Channel World-Wide Node Name"
                        }
                    },
                    {
                        "gwid": {
                            "value": "24",
                            "description": "Gateway Identifier"
                        }
                    },
                    {
                        "l2vpn": {
                            "value": "25",
                            "description": "AFI for L2VPN information"
                        }
                    },
                    {
                        "mplsTpSectionEndpointIdentifier": {
                            "value": "26",
                            "description": "MPLS-TP Section Endpoint Identifier"
                        }
                    },
                    {
                        "mplsTpLspEndpointIdentifier": {
                            "value": "27",
                            "description": "MPLS-TP LSP Endpoint Identifier"
                        }
                    },
                    {
                        "mplsTpPseudowireEndpointIdentifier": {
                            "value": "28",
                            "description": "MPLS-TP Pseudowire Endpoint Identifier"
                        }
                    },
                    {
                        "eigrpCommonServiceFamily": {
                            "value": "16384",
                            "description": "EIGRP Common Service Family"
                        }
                    },
                    {
                        "eigrpIpv4ServiceFamily": {
                            "value": "16385",
                            "description": "EIGRP IPv4 Service Family"
                        }
                    },
                    {
                        "eigrpIpv6ServiceFamily": {
                            "value": "16386",
                            "description": "EIGRP IPv6 Service Family"
                        }
                    },
                    {
                        "lispCanonicalAddressFormat": {
                            "value": "16387",
                            "description": "LISP Canonical Address Format (LCAF)"
                        }
                    },
                    {
                        "bgpLs": {
                            "value": "16388",
                            "description": "BGP-LS"
                        }
                    },
                    {
                        "48BitMac": {
                            "value": "16389",
                            "description": "48-bit MAC"
                        }
                    },
                    {
                        "64BitMac": {
                            "value": "16390",
                            "description": "64-bit MAC"
                        }
                    }
                ],
                "description": "\n                                The type of management address identifier encoding used in the associated 'address' attribute.",
                "config": "false"
            },
            "address": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "\n                                The string value used to identify the management address component associated with the remote system.  The purpose\n                                of this address is to contact the management entity.",
                "config": "false"
            },
            "if-subtype": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unknown": {
                            "value": "1",
                            "description": "Interface is not known"
                        }
                    },
                    {
                        "if-index": {
                            "value": "2",
                            "description": "Interface identifier based on the ifIndex MIB object."
                        }
                    },
                    {
                        "system-port-number": {
                            "value": "3",
                            "description": "Interface identifier based on the system port numbering convetion."
                        }
                    }
                ],
                "description": "\n                                This attribute describes the basis of a particular type of\n                                interface associated with the management address.",
                "config": "false"
            },
            "if-id": {
                "yangType": "leaf",
                "type": "uint32",
                "description": "The integer value used to identify the interface number regarding the management address component associated with\n                                        the remote system.",
                "config": "false"
            },
            "address-oid": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "The Object Identifier (OID) value used to identify the type of hardware component or protocol entity associated with the \n                                        management address advertised by the remote system agent.",
                "config": "false"
            }
        },
        "custom-tlv": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "lldp": {
                                "lldp-neighbor": {
                                    "custom-tlv": {
                                        "oui": "",
                                        "subtype": ""
                                    },
                                    "lldp-port": "",
                                    "direction": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "oui subtype",
                "description": "List of Organizational Specific TLVs (Type-Lengh-Value) parameters.",
                "notify": "all-true",
                "config": "false",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "oui": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..6",
                "description": "The Organization Unique Identifier (OUI) of this TLV. Hexadecimal representation of the 24 bit identier.",
                "config": "false"
            },
            "subtype": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "The sub-type identifier of the TLV in the scope of the OUI.",
                "config": "false"
            },
            "value": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..507",
                "description": "The value of the TLV.",
                "config": "false"
            }
        },
        "lldp-port-statistics": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "lldp": {
                                "lldp-port-statistics": {
                                    "lldp-port": "",
                                    "direction": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "lldp-port direction",
                "config": "false",
                "description": "LLDP frame reception statistics for a particular port and direction.\n                \n                        All counter values in a particular entry shall be maintained on a continuing basis and shall not be deleted\n                        upon expiration of TTL timing counters associated with the LLDP neighbor information.\n                \n                        All statistical counters associated with a particular port on the local LLDP agent become frozen whenever the\n                        lldp-admin-status is disabled for the same port.",
                "notify": "all-true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "lldp-port": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Local port that is associated with the LLDP agent.",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Direction associated with lldp statistics.",
                "config": "false"
            },
            "last-change-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The timestamp associated with the last time this port received LLDP updates.",
                "config": "false"
            },
            "last-clear-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "The timestamp associated with the last time this port was cleared.",
                "default": "0000-01-01T00:00:00Z",
                "config": "false"
            },
            "total-ageouts": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of the times that a neighbor’s information\n                            is deleted from the lldp-neighbor list due to TTL timer\n                            expiration.",
                "default": "0",
                "config": "false"
            },
            "total-discarded-frames": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of all LLDPDUs received and then discarded.",
                "config": "false"
            },
            "error-frames": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of all LLDPDUs received at the port with one or more\n                            detectable errors.",
                "config": "false"
            },
            "total-frames-in": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of all LLDP frames received at the port.",
                "config": "false"
            },
            "total-frames-out": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of all LLDP frames transmitted through the port.",
                "config": "false"
            },
            "total-discarded-tlvs": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "A count of all TLVs received at the port and discarded for any\n                            reason.",
                "config": "false"
            },
            "total-unrecognized-tlvs": {
                "yangType": "leaf",
                "type": "uint64",
                "description": "This counter provides a count of all TLVs not recognized by\n                            the receiving LLDP local agent.",
                "config": "false"
            }
        },
        "icdp": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "icdp": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "description": "Contains ICDP (Infinera Carrier Discovery Protocol) data.\n                             This is a proprietary mechanism that allows Network Elements to\n                             auto-discover their neighbors using carrier OFEC-GCC over L1 line interfaces.",
                "system-managed": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "global-switch": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Global switch for ICDP.\n                                 If disabled, inhibits further discovery using ICDP; however, existing data will be kept."
            },
            "carrier-neighbor": "list"
        },
        "carrier-neighbor": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "icdp": {
                                "carrier-neighbor": {
                                    "local-carrier": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "local-carrier",
                "config": "false",
                "description": "Neighbor node discovered by the local-carrier via ICDP.\n                                 This information is kept indefinitely, until the carrier is deleted, or the \n                                 data is manually cleared by user.",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "local-carrier": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Local carrier instance that has discovered this neighbor node.\n                                     Each carrier can discover up to one node.\n                                     It is possible for multiple collocated carriers to discover the same\n                                     node multiple times (each time connected to a different remote carrier).",
                "config": "false"
            },
            "last-update": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Timestamp with the last time this neighbor info was updated.",
                "notify": "true",
                "config": "false"
            },
            "age": {
                "yangType": "leaf",
                "type": "uint64",
                "units": "seconds",
                "description": "Number of seconds since discovery.",
                "notify": "false",
                "config": "false"
            },
            "local-carrier-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "description": "AID of local carrier.",
                "notify": "true",
                "config": "false"
            },
            "ne-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Id of the remote network element.",
                "notify": "true",
                "config": "false"
            },
            "ne-type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "Type of the remote network element.",
                "notify": "true",
                "config": "false"
            },
            "remote-carrier-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..64",
                "description": "AID of the remote carrier connected to the local carrier.\n                                     Implies a specific remote port id.",
                "notify": "true",
                "config": "false"
            },
            "ipv4-loopback-address": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                ],
                "description": "IPv4 loopback address of the neighbor; may be empty if not configured.",
                "notify": "true",
                "config": "false"
            },
            "ipv6-loopback-address": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                    "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                ],
                "description": "IPv6 loopback address of the neighbor; may be empty if not configured.",
                "notify": "true",
                "config": "false"
            }
        },
        "inci": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "inci": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "description": "INCI is Inter-NE Communication Interface, Information related to Inter NE inter-op feature.",
                "system-managed": "true",
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "inci-enabled": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "false",
                "description": "This is a NE level switch to control the INCI feature."
            },
            "inci-neighbor": "list"
        },
        "inci-neighbor": {
            "definition": {
                "jpath": {
                    "ne": {
                        "topology": {
                            "inci": {
                                "inci-neighbor": {
                                    "neighbor-id": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/topology",
                "key": "neighbor-id",
                "description": "List of provisioned INCI Neighbors.",
                "edit-condition": {
                    "error-message": "neighbor-address need to be unique.",
                    "value": "count(//inci-neighbor[. != current()][neighbor-address = current()/neighbor-address]) = 0"
                },
                "user-class": "-w:NA,PR,TT -r:*"
            },
            "neighbor-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Node-ID of provisioned neighbor."
            },
            "neighbor-address": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "string",
                        "pattern": [
                            "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                        ],
                        "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                    },
                    {
                        "type": "string",
                        "pattern": [
                            "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                            "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                        ],
                        "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                    }
                ],
                "description": "IP address of the provisioned remote neighbor NE.",
                "mandatory": "true"
            },
            "neighbor-port": {
                "yangType": "leaf",
                "type": "uint32",
                "default": "8800",
                "config": "false",
                "description": "Port number used for communication with GX NE."
            },
            "connection-status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "connected": {
                            "value": "1",
                            "description": "Remote NE is connected."
                        }
                    },
                    {
                        "not-connected": {
                            "value": "2",
                            "description": "Remote NE is not connected."
                        }
                    },
                    {
                        "mismatch": {
                            "value": "3",
                            "description": "Mismatch between provisioned Node Name with discovered node name."
                        }
                    },
                    {
                        "unknown": {
                            "value": "4",
                            "description": "Remote NE is unknown."
                        }
                    }
                ],
                "default": "unknown",
                "config": "false",
                "description": "Connection status with this Neighbor."
            },
            "configured-node-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "mandatory": "true",
                "description": "User provisioned name of remote NE. Used to compare against the discovered-node-name."
            },
            "discovered-node-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "config": "false",
                "description": "Name of remote NE as sent by the remote NE."
            },
            "discovered-node-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "config": "false",
                "description": "Node ID of remote node as received from remote node."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "oper-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "enabled": {
                            "value": "1"
                        }
                    },
                    {
                        "disabled": {
                            "value": "2"
                        }
                    }
                ],
                "default": "disabled",
                "config": "false",
                "description": "The operational state of this object."
            }
        },
        "system-capabilities": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "config": "false",
                "description": "Top level container for all capability information.\n                         This data is read-only, and expected to be informative to the user\n                         regarding what are the system capabilities.\n                         This information is static and independent on current configuration.\n                         Capabilities can be updated only:\n                         - with SW upgrade\n                         - with a dedicated capabilities file update (for specific cases only)",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "equipment-capabilities": "container"
        },
        "equipment-capabilities": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "description": "Top level container for all equipment capabilities.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "gadt": "container",
            "supported-chassis": "list",
            "supported-card": "list",
            "tom-type": "list"
        },
        "gadt": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "gadt": {}
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "description": "Golden Application Description Table - provides human readable details for carrier-mode applications.",
                "persistency": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..5",
                "description": "Table version.",
                "config": "false"
            },
            "application-description": "list"
        },
        "application-description": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "gadt": {
                                    "application-description": {
                                        "application": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "application",
                "config": "false",
                "description": "Detailed description of application ID",
                "persistency": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "application": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "The optical transport application ID this mode is optimized for.",
                "config": "false"
            },
            "application-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..1024",
                "description": "Detailed description of application ID",
                "config": "false"
            }
        },
        "supported-chassis": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-chassis": {
                                    "chassis-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "chassis-type",
                "description": "Capability information for supported chassis.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Human readable description for this chassis-type.",
                "config": "false"
            },
            "chassis-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "chassis",
                "description": "Chassis type name.",
                "config": "false"
            },
            "controller-redundancy-supported": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this chassis supports controller redundancy or not.",
                "config": "false"
            },
            "power-control-supported": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this chassis supports power control or not.",
                "config": "false"
            },
            "depth": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "mm",
                "description": "Chassis depth in millimeters.",
                "config": "false"
            },
            "height": {
                "yangType": "leaf",
                "type": "uint8",
                "units": "RUs",
                "description": "Chassis height in RUs (Rack Units).",
                "config": "false"
            },
            "number-of-front-slots": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Number of equipment holder slots in the front plate on the chassis.",
                "config": "false"
            },
            "number-of-rear-slots": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Number of equipment holder slots in the back plate on the chassis.",
                "config": "false"
            },
            "leds": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..20",
                "max-elements": "10",
                "description": "List of LEDs available in the chassis.",
                "config": "false"
            },
            "supported-slot": "list"
        },
        "supported-slot": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-chassis": {
                                    "supported-slot": {
                                        "slot-name": ""
                                    },
                                    "chassis-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "slot-name",
                "description": "Capability for each slot within each supported chassis.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "slot-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "Name of the slot.",
                "config": "false"
            },
            "slot-location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "front": {
                            "value": "1"
                        }
                    },
                    {
                        "rear": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Physical location of the slot in the chassis",
                "config": "false"
            },
            "slot-vertical-position": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Position of the slot vertically in the chassis, counting\n                                         from the top of the chassis, in RUs.\n                                         Example: position 3 means third RU starting from the top of the chassis.",
                "config": "false"
            },
            "slot-horizontal-position": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Position of the slot horizontally in the chassis within the current RU, counting\n                                         from the left of the chassis.\n                                         For back slots, the position is counted also from the left, from a point of view facing\n                                         the rear of the chassis.",
                "config": "false"
            },
            "possible-card-types": {
                "yangType": "leaf-list",
                "type": "identityref",
                "base": "card",
                "description": "List of possible card types in this slot.",
                "config": "false"
            },
            "configuration-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "system-configured": {
                            "value": "1",
                            "description": "Means system automaticaly configures the card in slot, and user cannot\n                                                 make changes to that."
                        }
                    },
                    {
                        "user-configured": {
                            "value": "2",
                            "description": "Means that user can provision or unprovision cards in this slot."
                        }
                    }
                ],
                "description": "Configuration mode for the cards in this slot.",
                "config": "false"
            },
            "auto-provision-capable": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this slot supports card auto-provisioning.",
                "config": "false"
            },
            "default-card": {
                "yangType": "leaf",
                "type": "string",
                "description": "Card that exists in this slot by default.",
                "config": "false"
            },
            "requires-blank-when-empty": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "not-applicable": {
                            "value": "0"
                        }
                    },
                    {
                        "optional": {
                            "value": "1"
                        }
                    },
                    {
                        "required": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Whether this slot requires a BLANK filler card when empty.",
                "config": "false"
            },
            "reset-power": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "4",
                "units": "W",
                "description": "Reset power consumption for this card, at 55ºC",
                "config": "false"
            }
        },
        "supported-card": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "card-type",
                "description": "Capability information for supported card.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Human readable description for this card-type.",
                "config": "false"
            },
            "card-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "card",
                "description": "Card type name.",
                "config": "false"
            },
            "sw-support-revision": {
                "yangType": "leaf",
                "type": "uint16",
                "default": "0",
                "config": "false",
                "description": "Software revision currently installed.",
                "when": ". != (0, 255)"
            },
            "supported-subtype": {
                "yangType": "leaf-list",
                "type": "string",
                "description": "Supported card subtypes; may be empty if card doesn't support subtypes.",
                "config": "false"
            },
            "card-width": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "single-slot": {
                            "value": "1"
                        }
                    },
                    {
                        "double-slot": {
                            "value": "2"
                        }
                    },
                    {
                        "half-slot": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Number of slots this card occupies.",
                "config": "false"
            },
            "card-height": {
                "yangType": "leaf",
                "type": "uint8",
                "units": "RUs",
                "description": "Card height in RUs.",
                "config": "false"
            },
            "is-field-replaceable": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this card-type is a field replaceable unit (FRU).",
                "config": "false"
            },
            "category": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "controller": {
                            "value": "1"
                        }
                    },
                    {
                        "line-card": {
                            "value": "2"
                        }
                    },
                    {
                        "fan": {
                            "value": "3"
                        }
                    },
                    {
                        "power-supply": {
                            "value": "4"
                        }
                    },
                    {
                        "other": {
                            "value": "5"
                        }
                    }
                ],
                "config": "false",
                "description": "Card category."
            },
            "max-power-draw": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "2",
                "units": "W",
                "config": "false",
                "description": "Maximum power draw for this card."
            },
            "leds": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..20",
                "max-elements": "10",
                "description": "List of LEDs available in the card.",
                "config": "false"
            },
            "location-led-support": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this card-type support location-led operation.",
                "config": "false"
            },
            "supported-port": "list",
            "gsct": "container",
            "gcmt": "container",
            "gapt": "container"
        },
        "supported-port": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "supported-port": {
                                        "port-name": ""
                                    },
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "port-name",
                "description": "Capabilities for each port in each supported card.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "port-name": {
                "yangType": "leaf",
                "type": "string",
                "description": "The port-name.",
                "config": "false"
            },
            "port-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "line": {
                            "value": "1",
                            "description": "Refers to line-side 'colored' CWDM or DWDM optical module/transceiver."
                        }
                    },
                    {
                        "tributary": {
                            "value": "2",
                            "description": "Refers to standard 'grey' interfaces/transceivers to interface with other client equipment."
                        }
                    },
                    {
                        "usb": {
                            "value": "3",
                            "description": "USB port."
                        }
                    },
                    {
                        "comm": {
                            "value": "4",
                            "description": "Communication ports."
                        }
                    },
                    {
                        "uplink": {
                            "value": "5",
                            "description": "Refers to ports of an aggregation function that connect to an adjunct line function."
                        }
                    },
                    {
                        "tributary-subport": {
                            "value": "6",
                            "description": "Same as tributary, but for scenarios where the main tributary port is split into multiple subports."
                        }
                    }
                ],
                "config": "false",
                "description": "The port type. Each port type supports different features and services."
            },
            "leds": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..20",
                "max-elements": "10",
                "description": "List of LEDs available for each port of this card.",
                "config": "false"
            },
            "supported-tom": "list"
        },
        "supported-tom": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "supported-port": {
                                        "supported-tom": {
                                            "tom-type": "",
                                            "tom-subtype-group": ""
                                        },
                                        "port-name": ""
                                    },
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "tom-type tom-subtype-group",
                "description": "Capability information for supported TOM (Transceiver Optical Module) in the scope\n                                         of this particular card.",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "tom-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "tom",
                "description": "TOM type name.",
                "config": "false"
            },
            "tom-subtype-group": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..32",
                "description": "TOM subtype group.",
                "cli-hidden": {
                    "when": ". = ''"
                },
                "config": "false"
            },
            "supported-subtype": {
                "yangType": "leaf-list",
                "type": "string",
                "max-elements": "30",
                "description": "Supported subtypes for this TOM type in this particular card/port.",
                "config": "false"
            },
            "supported-phy-modes": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GE": {
                            "value": "1",
                            "description": "100GE"
                        }
                    },
                    {
                        "200GE": {
                            "value": "2",
                            "description": "200GE"
                        }
                    },
                    {
                        "400GE": {
                            "value": "3",
                            "description": "400GE"
                        }
                    },
                    {
                        "4x100GE": {
                            "value": "4",
                            "description": "4x100GE"
                        }
                    },
                    {
                        "100G": {
                            "value": "5",
                            "description": "100G"
                        }
                    },
                    {
                        "4x10G": {
                            "value": "6",
                            "description": "4x10G"
                        }
                    },
                    {
                        "4x10GE": {
                            "value": "7",
                            "description": "4x10GE"
                        }
                    },
                    {
                        "1GE": {
                            "value": "8",
                            "description": "1GE"
                        }
                    },
                    {
                        "2G5": {
                            "value": "9",
                            "description": "2G5"
                        }
                    },
                    {
                        "10G": {
                            "value": "10",
                            "description": "10G"
                        }
                    },
                    {
                        "10GE": {
                            "value": "11",
                            "description": "10GE"
                        }
                    },
                    {
                        "2G5E": {
                            "value": "12",
                            "description": "2G5E"
                        }
                    },
                    {
                        "40GE": {
                            "value": "13",
                            "description": "40GE"
                        }
                    },
                    {
                        "40G": {
                            "value": "14",
                            "description": "40G"
                        }
                    },
                    {
                        "4x100G": {
                            "value": "15",
                            "description": "4x100G"
                        }
                    },
                    {
                        "200G": {
                            "value": "16",
                            "description": "200G"
                        }
                    }
                ],
                "description": "The phy-mode that are supported in this TOM for this card.",
                "config": "false"
            },
            "default-phy-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "100GE": {
                            "value": "1",
                            "description": "100GE"
                        }
                    },
                    {
                        "200GE": {
                            "value": "2",
                            "description": "200GE"
                        }
                    },
                    {
                        "400GE": {
                            "value": "3",
                            "description": "400GE"
                        }
                    },
                    {
                        "4x100GE": {
                            "value": "4",
                            "description": "4x100GE"
                        }
                    },
                    {
                        "100G": {
                            "value": "5",
                            "description": "100G"
                        }
                    },
                    {
                        "4x10G": {
                            "value": "6",
                            "description": "4x10G"
                        }
                    },
                    {
                        "4x10GE": {
                            "value": "7",
                            "description": "4x10GE"
                        }
                    },
                    {
                        "1GE": {
                            "value": "8",
                            "description": "1GE"
                        }
                    },
                    {
                        "2G5": {
                            "value": "9",
                            "description": "2G5"
                        }
                    },
                    {
                        "10G": {
                            "value": "10",
                            "description": "10G"
                        }
                    },
                    {
                        "10GE": {
                            "value": "11",
                            "description": "10GE"
                        }
                    },
                    {
                        "2G5E": {
                            "value": "12",
                            "description": "2G5E"
                        }
                    },
                    {
                        "40GE": {
                            "value": "13",
                            "description": "40GE"
                        }
                    },
                    {
                        "40G": {
                            "value": "14",
                            "description": "40G"
                        }
                    },
                    {
                        "4x100G": {
                            "value": "15",
                            "description": "4x100G"
                        }
                    },
                    {
                        "200G": {
                            "value": "16",
                            "description": "200G"
                        }
                    }
                ],
                "description": "The phy-mode that is used by default in this TOM for this card.",
                "config": "false"
            }
        },
        "gsct": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gsct": {},
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "description": "Golden Subtype Constraint Table - contains additional restrictions on supported\n                                     carrier modes (defined by gcmt), based on card subtype.",
                "persistency": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..5",
                "description": "Table version.",
                "config": "false"
            },
            "subtype-constraint": "list"
        },
        "subtype-constraint": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gsct": {
                                        "subtype-constraint": {
                                            "subtype": ""
                                        }
                                    },
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "subtype",
                "config": "false",
                "description": "List of subtype constraints.",
                "persistency": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Subtype description.",
                "config": "false"
            },
            "subtype": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..20",
                "description": "Card Subtype. Represents a group of related PONs for a card type to which these constraints applies.",
                "config": "false"
            },
            "min-capacity": {
                "yangType": "leaf",
                "type": "int16",
                "units": "Gbps",
                "description": "The minimum capacity supported by this subtype.",
                "config": "false"
            },
            "max-capacity": {
                "yangType": "leaf",
                "type": "int16",
                "units": "Gbps",
                "description": "The maximum capacity supported by this subtype. -1 means there is no maximum capacity constraint.",
                "config": "false"
            },
            "supported-applications": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..15",
                "description": "List of applications supported by this subtype. If this list is empty, then this constraint is not applicable.",
                "config": "false"
            },
            "unsupported-applications": {
                "yangType": "leaf-list",
                "type": "string",
                "length": "1..15",
                "description": "List of applications not supported by this subtype. If this list is empty, then this constraint is not applicable.",
                "config": "false"
            }
        },
        "gcmt": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gcmt": {},
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "description": "Golden Carrier Mode Table - provides list of supported carrier modes in this card.\n                                     Applicable for cards that support configurable optical carriers (transponders).\n                                     To be used as reference, and in pre-provisioning scenarios.\n                                     Once card is physically present, its discovered supported modes will be used instead of these.",
                "persistency": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..5",
                "description": "Table version.",
                "config": "false"
            },
            "golden-carrier-mode": "list"
        },
        "golden-carrier-mode": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gcmt": {
                                        "golden-carrier-mode": {
                                            "carrier-mode": ""
                                        }
                                    },
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "carrier-mode",
                "config": "false",
                "description": "List of golden carrier modes.",
                "persistency": "all-true",
                "access-condition": "status = ('supported','candidate','deprecated')",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "carrier-mode": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "An acronymized code (handle) that is indicative of the optical carrier line mode (4-tuple) combination. \n                         The format is as follows:\n                            <Capacity><ClientMode>.<Baud Rate><Application ID>\n                         Examples:\n                            - 600E.84P\n                            - 100X.73U\n                            - 325M.66P",
                "config": "false"
            },
            "capacity": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "Gbps",
                "config": "false",
                "description": "The net capacity of the optical carrier."
            },
            "client-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "ethernet": {
                            "value": "10"
                        }
                    },
                    {
                        "ethernet-otn": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "This indicates digital client modes of the signal\n                         that is mapped into, and transported by the carriers within this\n                         superchannel."
            },
            "baud-rate": {
                "yangType": "leaf",
                "type": "decimal64",
                "fraction-digits": "7",
                "units": "GBaud",
                "config": "false",
                "description": "The modulated symbol rate."
            },
            "application": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..15",
                "description": "The optical transport application ID this mode is optimized for.",
                "config": "false"
            },
            "compatibility-id": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "Identifies the compatible carrier modes that can be applied simultaneously",
                "config": "false"
            },
            "status": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "supported": {
                            "value": "1"
                        }
                    },
                    {
                        "candidate": {
                            "value": "2"
                        }
                    },
                    {
                        "experimental": {
                            "value": "3"
                        }
                    },
                    {
                        "deprecated": {
                            "value": "4"
                        }
                    },
                    {
                        "diagnostic": {
                            "value": "5"
                        }
                    }
                ],
                "description": "Describes carrier mode release status.",
                "config": "false"
            }
        },
        "gapt": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gapt": {},
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "description": "Golden Advanced Parameters Table - provides a list of known advanced parameters that this card supports.",
                "persistency": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "version": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..5",
                "description": "Table version.",
                "config": "false"
            },
            "golden-advanced-parameter": "list",
            "applicable-resource-type": {
                "yangType": "leaf-list",
                "type": "string",
                "description": "The managed resource type(s) that are applicable for this particular advanced parameter.",
                "config": "false"
            }
        },
        "golden-advanced-parameter": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "supported-card": {
                                    "gapt": {
                                        "golden-advanced-parameter": {
                                            "name": ""
                                        }
                                    },
                                    "card-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/carrier-types",
                "key": "name",
                "config": "false",
                "description": "A set of all optical carrier advanced parameters discovered from the equipment.",
                "persistency": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "A human readable description of this advanced parameter.",
                "config": "false"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "The name of the advanced parameter.",
                "config": "false"
            },
            "type": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Indicates the data type of the advanced parameter.",
                "config": "false"
            },
            "supported-values": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "This list indicates the possible values that this parameter can take as input. It is a list of ranges. \n                            E.g.'1-4, 10-14' indicating two ranges from 1 to 4 and 10 to 14. Or it could be a list of discrete \n                            numbers like '10, 20, 30, 40'. Spaces are optional.",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "transmit": {
                            "value": "10"
                        }
                    },
                    {
                        "receive": {
                            "value": "20"
                        }
                    },
                    {
                        "transmit-and-receive": {
                            "value": "30"
                        }
                    }
                ],
                "description": "Advanced parameter is applicable to the specified direction.",
                "config": "false"
            },
            "multiplicity": {
                "yangType": "leaf",
                "type": "uint8",
                "description": "Identifies number of values user need to enter for this advanced parameter. \n                            Same range or allowed-values will apply for each entry.",
                "config": "false"
            },
            "configuration-impact": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "no-change": {
                            "value": "10"
                        }
                    },
                    {
                        "no-reacquire": {
                            "value": "20"
                        }
                    },
                    {
                        "reacquire": {
                            "value": "30"
                        }
                    },
                    {
                        "full-config-pll-change": {
                            "value": "40"
                        }
                    },
                    {
                        "full-config-no-pll-change": {
                            "value": "50"
                        }
                    }
                ],
                "config": "false",
                "description": "Identifies the configuration steps to apply the change."
            },
            "service-impact": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "service-affecting": {
                            "value": "10"
                        }
                    },
                    {
                        "non-service-affecting": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "Identifies if applying this parameter change causes service impact. If it is service impacting, user must perform admin lock/maintenance/ToDO operation."
            }
        },
        "tom-type": {
            "definition": {
                "jpath": {
                    "ne": {
                        "system-capabilities": {
                            "equipment-capabilities": {
                                "tom-type": {
                                    "tom-type": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/capabilities",
                "key": "tom-type",
                "description": "Capability information for supported TOM (Transceiver Optical Module).",
                "config": "false",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..255",
                "description": "Human readable description for this TOM type.",
                "config": "false"
            },
            "tom-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "tom",
                "description": "TOM type name.",
                "config": "false"
            },
            "data-rate": {
                "yangType": "leaf",
                "type": "uint16",
                "units": "Gbps",
                "description": "The approximate data-rate for this TOM type.",
                "config": "false"
            },
            "support-third-party-toms": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "Whether this TOM type accepts third party TOMs in addition to supported Infinera TOMs.",
                "config": "false"
            },
            "generic-subtype": {
                "yangType": "leaf",
                "when": "../support-third-party-toms = true()",
                "type": "string",
                "description": "3rd party subtype for this TOM.",
                "config": "false"
            }
        },
        "protection": {
            "definition": {
                "jpath": {
                    "ne": {
                        "protection": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/protection-group",
                "description": "The top-level protection root node under which all other protection entities are present.",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "protection-group": "list"
        },
        "protection-group": {
            "definition": {
                "jpath": {
                    "ne": {
                        "protection": {
                            "protection-group": {
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/protection-group",
                "key": "name",
                "description": "Protection Group associates two Protection Units that are redundant to each other, one said Working, the other Protection Unit.\n\t\t\t\t             Each Protection Group entity forms a YPG.",
                "persistency": "all-true",
                "notify": "all-true",
                "requires-confirmation": {
                    "when": "(count(db-value(.)) = 0) and ($pu1/tributary-disable-action != 'laser-shut-off' or $pu2/tributary-disable-action != 'laser-shut-off') ",
                    "description": "The transport entity's TDA feature configuration will be overridden upon adding the PU to a YPG. Are you sure you want to continue?"
                },
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "A user configured name for the protection group."
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            },
            "protection-type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "y-cable": {
                            "value": "10"
                        }
                    }
                ],
                "mandatory": "true",
                "description": "Represents the protection type this PG has."
            },
            "pg-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "no-request": {
                            "value": "10",
                            "description": "No request."
                        }
                    },
                    {
                        "do-not-revert": {
                            "value": "20",
                            "description": "Do not revert."
                        }
                    },
                    {
                        "manual-to-working": {
                            "value": "30",
                            "description": "Manual to working."
                        }
                    },
                    {
                        "manual-to-protection": {
                            "value": "40",
                            "description": "Manual to protection."
                        }
                    },
                    {
                        "forced-to-working": {
                            "value": "50",
                            "description": "Force to working."
                        }
                    },
                    {
                        "forced-to-protection": {
                            "value": "60",
                            "description": "Force to protection."
                        }
                    },
                    {
                        "protection-lockout": {
                            "value": "70",
                            "description": "Lockout of protection."
                        }
                    },
                    {
                        "sf-on-working": {
                            "value": "80",
                            "description": "Signal fail on working."
                        }
                    },
                    {
                        "sf-on-protection": {
                            "value": "90",
                            "description": "Signal fail on protection."
                        }
                    },
                    {
                        "sd-on-working": {
                            "value": "100",
                            "description": "Signal degrade on working."
                        }
                    },
                    {
                        "sd-on-protection": {
                            "value": "110",
                            "description": "Signal degrade on protection."
                        }
                    },
                    {
                        "wait-to-restore": {
                            "value": "120",
                            "description": "Wait to restore."
                        }
                    },
                    {
                        "unavailable": {
                            "value": "130",
                            "description": "Unavailable."
                        }
                    }
                ],
                "default": "no-request",
                "config": "false",
                "description": "Protection group state"
            },
            "pg-request": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "clear": {
                            "value": "1"
                        }
                    },
                    {
                        "manual-to-working": {
                            "value": "2"
                        }
                    },
                    {
                        "manual-to-protection": {
                            "value": "3"
                        }
                    },
                    {
                        "forced-to-working": {
                            "value": "4"
                        }
                    },
                    {
                        "forced-to-protection": {
                            "value": "5"
                        }
                    },
                    {
                        "protection-lockout": {
                            "value": "6"
                        }
                    }
                ],
                "default": "clear",
                "description": "The management of protection switching action.",
                "traffic-affecting": "true"
            },
            "switching-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "unidirectional": {
                            "value": "10"
                        }
                    }
                ],
                "default": "unidirectional",
                "description": "Protection switching mode."
            },
            "reversion-mode": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "revertive": {
                            "value": "10"
                        }
                    },
                    {
                        "non-revertive": {
                            "value": "20"
                        }
                    }
                ],
                "default": "non-revertive",
                "description": "Enable or disable automatic reversion protection status after wtr-time delay."
            },
            "hold-off-timer": {
                "yangType": "leaf",
                "type": "uint16",
                "range": "0..10000",
                "units": "milliseconds",
                "default": "0",
                "description": "Switching trigger soaking time before switching, measured and set in 1-millisecond steps."
            },
            "wtr-timer": {
                "yangType": "leaf",
                "when": "../reversion-mode = 'revertive'",
                "type": "uint16",
                "range": "0..7200",
                "units": "seconds",
                "default": "300",
                "description": "Trigger clearance soaking time before reverting to the working protection unit, measured and set in 1-second steps. Only applicable in revertive mode."
            },
            "remaining-wtr": {
                "yangType": "leaf",
                "when": "../reversion-mode = 'revertive'",
                "type": "uint16",
                "range": "0..7200",
                "units": "seconds",
                "config": "false",
                "description": "The remaining time in the WTR timer, in seconds. Only applicable in Revertive mode."
            },
            "last-switch-trigger": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "clear": {
                            "value": "10"
                        }
                    },
                    {
                        "manual-to-working": {
                            "value": "20"
                        }
                    },
                    {
                        "manual-to-protection": {
                            "value": "30"
                        }
                    },
                    {
                        "forced-to-working": {
                            "value": "40"
                        }
                    },
                    {
                        "forced-to-protection": {
                            "value": "50"
                        }
                    },
                    {
                        "lockout": {
                            "value": "60"
                        }
                    },
                    {
                        "sf-on-working": {
                            "value": "70"
                        }
                    },
                    {
                        "sf-on-protection": {
                            "value": "80"
                        }
                    },
                    {
                        "sd-on-working": {
                            "value": "90"
                        }
                    },
                    {
                        "sd-on-protection": {
                            "value": "100"
                        }
                    },
                    {
                        "wtr": {
                            "value": "110"
                        }
                    }
                ],
                "default": "clear",
                "config": "false",
                "description": "Last switch trigger."
            },
            "working-pu": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "mandatory": "true",
                "description": "The working unit associated with the protection group.",
                "traffic-affecting": "true",
                "set-on-create-only": "true",
                "edit-condition": [
                    {
                        "error-message": "working-pu cannot be same with protection-pu.",
                        "value": ". != ../protection-pu"
                    },
                    {
                        "error-message": "The client port must exist.",
                        "value": "($pu1)"
                    },
                    {
                        "error-message": "Provided working-pu is already in use in another protection-group.",
                        "value": " not(/ne/protection/protection-group/protection-unit[name=.])"
                    },
                    {
                        "error-message": "The client ports must have the same service type.",
                        "value": "$pu1/service-type = $pu2/service-type "
                    },
                    {
                        "error-message": "The client ports must have the same fec-mode.",
                        "value": "if( $pu1/service-type = '100GBE') then\n                                            $workethernet/fec-mode = $protectionethernet/fec-mode\n                                        else\n                                            true()"
                    }
                ]
            },
            "protection-pu": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..32",
                "mandatory": "true",
                "description": "The protection unit associated with the protection group.",
                "traffic-affecting": {
                    "when": "$pu2/tributary-disable-action = 'laser-shut-off'"
                },
                "requires-confirmation": {
                    "when": "$pu2/tributary-disable-action != 'laser-shut-off'",
                    "description": "The transport entity's TDA feature configuration will be overridden upon adding the PU to a YPG. Are you sure you want to continue?"
                },
                "edit-condition": [
                    {
                        "error-message": "protection-pu cannot be same with working-pu.",
                        "value": ". != ../working-pu"
                    },
                    {
                        "error-message": "The client port must exist.",
                        "value": "($pu2)"
                    },
                    {
                        "error-message": "admin-state of original protection role is not lock.",
                        "value": "if (count(db-value(.)) != 0) then\n                                            if ($oldpu/admin-state = 'lock') then\n                                                true()\n                                            else\n                                                false()\n                                        else true() "
                    },
                    {
                        "error-message": "Provided protection-pu is already in used.",
                        "value": " not(/ne/protection/protection-group/protection-unit[name=.]) "
                    },
                    {
                        "error-message": "The client ports must have the same service type.",
                        "value": "$pu1/service-type =  $pu2/service-type "
                    },
                    {
                        "error-message": "The client ports must have the same fec-mode.",
                        "value": "if( $pu2/service-type = '100GBE') then\n                                            $workethernet/fec-mode = $protectionethernet/fec-mode\n                                        else\n                                            true()"
                    }
                ]
            },
            "client-side-olos-trigger": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Considers a local client-side RX OLOS defect as a trigger for switch-over."
            },
            "client-side-sd-trigger": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Considers a local client-side RX SD defect as a trigger for switch-over."
            },
            "network-side-csf-trigger": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "disabled": {
                            "value": "0"
                        }
                    },
                    {
                        "enabled": {
                            "value": "1"
                        }
                    }
                ],
                "default": "disabled",
                "description": "Considers a network-side ingress CSF defect as a trigger for switch-over."
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "protection-unit": "list"
        },
        "protection-unit": {
            "definition": {
                "jpath": {
                    "ne": {
                        "protection": {
                            "protection-group": {
                                "protection-unit": {
                                    "name": ""
                                },
                                "name": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/protection-group",
                "key": "name",
                "description": "Protection unit that identifier protection entitiy",
                "system-managed": "true",
                "persistency": "all-true",
                "notify": "all-true",
                "user-class": "-w:NA,NE,TT -r:*"
            },
            "name": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "pattern": [
                    "([A-Za-z0-9_\\-.,]*)"
                ],
                "description": "Protection unit name"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "transport-entity": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "config": "false",
                "description": "The transport entity associated with this protection unit."
            },
            "state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "active": {
                            "value": "10"
                        }
                    },
                    {
                        "standby": {
                            "value": "20"
                        }
                    },
                    {
                        "unavailable": {
                            "value": "30"
                        }
                    },
                    {
                        "unknown": {
                            "value": "40"
                        }
                    }
                ],
                "config": "false",
                "description": "Protection unit state"
            },
            "role": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "working": {
                            "value": "10"
                        }
                    },
                    {
                        "protection": {
                            "value": "20"
                        }
                    }
                ],
                "config": "false",
                "description": "Protection unit role"
            },
            "alarm-report-control": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "allowed": {
                            "value": "1",
                            "description": "Alarm reporting is allowed."
                        }
                    },
                    {
                        "inhibited": {
                            "value": "2",
                            "description": "Alarm reporting is inhibited."
                        }
                    }
                ],
                "default": "allowed",
                "description": "Controls the reporting of alarms for this particular object."
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label."
            }
        },
        "alarms": {
            "definition": {
                "jpath": {
                    "alarms": {}
                },
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "yangType": "container",
                "description": "Top level container for all system alarms, which are defined as an\n                     undesirable state in a resource that requires corrective action.",
                "startup-created": "true",
                "system-managed": "true",
                "logical-parent-type": "xcon",
                "user-class": "-w:NA"
            },
            "current-alarms": "container",
            "alarm-control": "container",
            "alarm-inventory": "list"
        },
        "current-alarms": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "current-alarms": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "config": "false",
                "description": "List of currently raised alarms.",
                "persistency": "all-true",
                "user-class": "-w:NA"
            },
            "number-of-alarms": {
                "yangType": "leaf",
                "type": "uint32",
                "description": "Number of currently raised alarms.",
                "config": "false"
            },
            "last-changed": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Timestamp of the last change in the current alarm list (either a raise or clear event).",
                "config": "false"
            },
            "alarm": "list"
        },
        "alarm": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "current-alarms": {
                            "alarm": {
                                "alarm-id": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "key": "alarm-id",
                "description": "Alarm instance that represents a raised alarm, when entry is created, or a cleared alarm,\n                             when entry is deleted.",
                "persistency": "all-true",
                "notify": "all-false",
                "config": "false",
                "user-class": "-w:NA"
            },
            "alarm-id": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Unique identifier of the alarm.\n                Based on resource + probable cause.\n                Note: this id is intended as an alarm identifier, but it is not intended to provide any additional information.\n                Other fields exist to provide this additional information.",
                "config": "false"
            },
            "resource": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Existing system resource.",
                "weak-link": "true",
                "discover-values": "/alarms/current-alarms/alarm/resource",
                "config": "false"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource.",
                "discover-values": "for $type in //alarm-severity-entry/resource-type return string($type)",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type.",
                "when": "string(.) != ''",
                "discover-values": "/alarms/current-alarms/alarm/AID"
            },
            "alarm-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "ALARM-TYPE",
                "description": "Type of alarm, based on an abbreviated code.",
                "config": "false"
            },
            "alarm-type-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Human friendly description of the type of the alarm.",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0"
                        }
                    },
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Direction of the alarm.",
                "config": "false"
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0"
                        }
                    },
                    {
                        "near-end": {
                            "value": "1"
                        }
                    },
                    {
                        "far-end": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Location of the alarm.",
                "config": "false"
            },
            "perceived-severity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "indeterminate": {
                            "value": "0"
                        }
                    },
                    {
                        "critical": {
                            "value": "1"
                        }
                    },
                    {
                        "major": {
                            "value": "2"
                        }
                    },
                    {
                        "minor": {
                            "value": "3"
                        }
                    },
                    {
                        "warning": {
                            "value": "4"
                        }
                    },
                    {
                        "not-reported": {
                            "value": "5"
                        }
                    },
                    {
                        "event": {
                            "value": "6"
                        }
                    },
                    {
                        "cleared": {
                            "value": "7"
                        }
                    }
                ],
                "description": "Severity of the alarm.",
                "config": "false"
            },
            "reported-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Occurrence timestamp for the alarm.",
                "config": "false"
            },
            "service-affecting": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "indeterminate": {
                            "value": "0"
                        }
                    },
                    {
                        "sa": {
                            "value": "1"
                        }
                    },
                    {
                        "nsa": {
                            "value": "2"
                        }
                    },
                    {
                        "sa-nsa": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Information on whether this alarm is service affecting or not.",
                "config": "false"
            },
            "alarm-category": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "communication": {
                            "value": "1"
                        }
                    },
                    {
                        "facility": {
                            "value": "2"
                        }
                    },
                    {
                        "equipment": {
                            "value": "3"
                        }
                    },
                    {
                        "environmental": {
                            "value": "4"
                        }
                    },
                    {
                        "processing-error": {
                            "value": "5"
                        }
                    },
                    {
                        "software": {
                            "value": "6"
                        }
                    },
                    {
                        "quality-of-service": {
                            "value": "7"
                        }
                    }
                ],
                "description": "Category of the alarm type.",
                "config": "false"
            },
            "additional-details": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Free string with additional relevant information provided by the system.",
                "config": "false"
            },
            "corrective-action": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "System provided information on how to correct the situation that triggered this alarm.",
                "config": "false"
            },
            "label": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "User label.",
                "config": "false"
            },
            "operator-state": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "none": {
                            "value": "1",
                            "description": "The alarm is not being taken care of."
                        }
                    },
                    {
                        "ack": {
                            "value": "2",
                            "description": "The alarm is being taken care of. Corrective action not taken yet or has failed."
                        }
                    },
                    {
                        "closed": {
                            "value": "3",
                            "description": "Corrective action taken successfully."
                        }
                    }
                ],
                "description": "State of the alarm according with operator action.",
                "default": "none",
                "config": "false"
            },
            "operator-text": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Text provided by operator when changing alarm state.",
                "when": "string(../operator-last-action) != ''",
                "config": "false"
            },
            "operator-name": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "Username that last changed the state of this alarm.",
                "when": "string(.) != ''",
                "config": "false"
            },
            "operator-last-action": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Timestamp when the alarm was last changed by operator.",
                "when": "string(.) != ''",
                "config": "false"
            }
        },
        "alarm-control": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "alarm-control": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "description": "Object related with alarm management control",
                "system-managed": "true",
                "user-class": "-w:NA"
            },
            "arc-behavior": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "leave-alarms": {
                            "value": "1",
                            "description": "When ARC is set to 'inhibit', leaves current alarms in a raised mode."
                        }
                    },
                    {
                        "clear-alarms": {
                            "value": "2",
                            "description": "When ARC is set to 'inhibit', clears current alarms."
                        }
                    }
                ],
                "default": "leave-alarms",
                "description": "System wide alarm-reporting-control (ARC) behavior switch."
            },
            "alarm-severity-profile": "container"
        },
        "alarm-severity-profile": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "alarm-control": {
                            "alarm-severity-profile": {}
                        }
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "description": "Initialization of Alarm Severity Profile.",
                "system-managed": "true",
                "user-class": "-w:NA"
            },
            "alarm-severity-entry": "list"
        },
        "alarm-severity-entry": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "alarm-control": {
                            "alarm-severity-profile": {
                                "alarm-severity-entry": {
                                    "resource-type": "",
                                    "alarm-type": "",
                                    "direction": "",
                                    "location": ""
                                }
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "key": "resource-type alarm-type direction location",
                "description": "Individual entry in alarm-severity-profile, allows to configure the severity for one particular alarm.",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:NA"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource."
            },
            "alarm-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "ALARM-TYPE",
                "description": "Type of alarm, based on an abbreviated code."
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0"
                        }
                    },
                    {
                        "ingress": {
                            "value": "1"
                        }
                    },
                    {
                        "egress": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Configured direction for the current resource type."
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0"
                        }
                    },
                    {
                        "near-end": {
                            "value": "1"
                        }
                    },
                    {
                        "far-end": {
                            "value": "2"
                        }
                    }
                ],
                "description": "Configured location for the current resource type."
            },
            "severity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "critical": {
                            "value": "1"
                        }
                    },
                    {
                        "major": {
                            "value": "2"
                        }
                    },
                    {
                        "minor": {
                            "value": "3"
                        }
                    },
                    {
                        "warning": {
                            "value": "4"
                        }
                    },
                    {
                        "not-reported": {
                            "value": "5"
                        }
                    },
                    {
                        "event": {
                            "value": "6"
                        }
                    }
                ],
                "description": "Configured severity for the current resource type."
            },
            "service-affecting": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "indeterminate": {
                            "value": "0"
                        }
                    },
                    {
                        "sa": {
                            "value": "1"
                        }
                    },
                    {
                        "nsa": {
                            "value": "2"
                        }
                    },
                    {
                        "sa-nsa": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Configured service affecting for the current resource type.",
                "config": "false"
            }
        },
        "alarm-inventory": {
            "definition": {
                "jpath": {
                    "alarms": {
                        "alarm-inventory": {
                            "alarm-type": ""
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "key": "alarm-type",
                "config": "false",
                "description": "Inventory with all possible alarm types for the system, containing\n                         static information for each alarm type.",
                "persistency": "all-true",
                "user-class": "-w:NA"
            },
            "alarm-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "ALARM-TYPE",
                "description": "Type of alarm, based on an abbreviated code.",
                "config": "false"
            },
            "resource-type": {
                "yangType": "leaf-list",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "max-elements": "50",
                "description": "Type of resources to which this alarm applies.",
                "config": "false"
            },
            "alarm-category": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "communication": {
                            "value": "1"
                        }
                    },
                    {
                        "facility": {
                            "value": "2"
                        }
                    },
                    {
                        "equipment": {
                            "value": "3"
                        }
                    },
                    {
                        "environmental": {
                            "value": "4"
                        }
                    },
                    {
                        "processing-error": {
                            "value": "5"
                        }
                    },
                    {
                        "software": {
                            "value": "6"
                        }
                    },
                    {
                        "quality-of-service": {
                            "value": "7"
                        }
                    }
                ],
                "description": "List of possible categories of this alarm type. The same alarm may have different categories, depending on the resource-type it applies to.",
                "max-elements": "10",
                "config": "false"
            },
            "alarm-type-description": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..128",
                "description": "Human friendly description of the type of the alarm.",
                "when": ".!=''",
                "config": "false"
            },
            "corrective-action": {
                "yangType": "leaf",
                "type": "string",
                "length": "0..256",
                "description": "System provided information on how to correct the situation that triggered this alarm.",
                "when": ".!=''",
                "config": "false"
            },
            "default-severity": {
                "yangType": "leaf-list",
                "type": "enumeration",
                "enum-value": [
                    {
                        "critical": {
                            "value": "1"
                        }
                    },
                    {
                        "major": {
                            "value": "2"
                        }
                    },
                    {
                        "minor": {
                            "value": "3"
                        }
                    },
                    {
                        "warning": {
                            "value": "4"
                        }
                    },
                    {
                        "not-reported": {
                            "value": "5"
                        }
                    },
                    {
                        "event": {
                            "value": "6"
                        }
                    }
                ],
                "description": "List of possible default severities for this alarm type. The same alarm may have different default severities depending of the resource-type it applies to.",
                "max-elements": "10",
                "config": "false"
            },
            "service-affecting": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "indeterminate": {
                            "value": "0"
                        }
                    },
                    {
                        "sa": {
                            "value": "1"
                        }
                    },
                    {
                        "nsa": {
                            "value": "2"
                        }
                    },
                    {
                        "sa-nsa": {
                            "value": "3"
                        }
                    }
                ],
                "description": "Information on whether this alarm is service affecting or not. In some cases, the same alarm may be simultaneously 'sa' and 'nsa', depending on the resource-type it applies to.",
                "config": "false"
            }
        },
        "pm": {
            "definition": {
                "jpath": {
                    "pm": {}
                },
                "namespace": "http://infinera.com/yang/ioa/pm",
                "yangType": "container",
                "description": "Top level container for all Performance Management (pm) data and configuration.",
                "user-class": "-w:NA,NE,TT",
                "startup-created": "true",
                "system-managed": "true",
                "logical-parent-type": "xcon"
            },
            "real-time-pm-data": "container",
            "current-pm-data": "container",
            "history-pm-data": "container",
            "pm-control": "container",
            "pm-profile": "container",
            "pm-catalog": "container"
        },
        "real-time-pm-data": {
            "definition": {
                "jpath": {
                    "pm": {
                        "real-time-pm-data": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "config": "false",
                "description": "Container for real-time-pm entries.",
                "persistency": "true",
                "cli-hidden": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "real-time-pm": "list"
        },
        "real-time-pm": {
            "definition": {
                "jpath": {
                    "pm": {
                        "real-time-pm-data": {
                            "real-time-pm": {
                                "resource": "",
                                "parameter": "",
                                "direction": "",
                                "location": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "resource parameter direction location",
                "description": "Individual real-time-pm record. Contains data updated continuously in real-time.",
                "persistency": "true",
                "skip-db": "true",
                "run-rpc": "RPC /ioa-pm:get-pm[data-type='real-time']/\n                    filter[filter-id=(count(/get-pm/filter) + 1)]\n                        [ if (is-wildcard(current()/resource))  then true() else resource=deref(current()/resource) ]\n                        [ if (is-wildcard(current()/parameter)) then true() else parameter=current()/parameter ]\n                        [ if (is-wildcard(current()/direction)) then true() else direction=current()/direction ]\n                        [ if (is-wildcard(current()/location))  then true() else location=current()/location ]\n                        [ if (ctx-value(current()/resource-type)) then resource-type=current()/resource-type else true() ]\n                        [ if (ctx-value(current()/AID)) then AID=current()/AID else true() ]",
                "content": "CREATE (for $entry in /get-pm/pm-record[period='pm-real-time'] return\n                                    /pm/real-time-pm-data/real-time-pm[resource = deref($entry/resource)]\n                                                                      [resource-type = $entry/resource-type]\n                                                                      [AID = $entry/AID]\n                                                                      [parameter = $entry/parameter]\n                                                                      [direction = $entry/direction]\n                                                                      [location = $entry/location]\n                                                                      [pm-value = $entry/pm-value]\n                                                                      [pm-value-min = $entry/pm-value-min]\n                                                                      [pm-value-max = $entry/pm-value-max]\n                                                                      [pm-value-avg = $entry/pm-value-avg]\n                                                                      [pm-unit = $entry/pm-unit]\n                                    )",
                "config": "false",
                "user-class": "-w:NA,NE,TT"
            },
            "resource": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Existing system resource.",
                "config": "false"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource.",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge).",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "ingress": {
                            "value": "2"
                        }
                    },
                    {
                        "egress": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter direction.",
                "config": "false"
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "near-end": {
                            "value": "2"
                        }
                    },
                    {
                        "far-end": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter location.",
                "config": "false"
            },
            "pm-value": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter value. Provided for real-time PM and counters.",
                "config": "false"
            },
            "pm-value-min": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter minimum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-max": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter maximum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-avg": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter average value. Provided for gauges.",
                "config": "false"
            },
            "pm-unit": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0",
                            "description": "Not applicable"
                        }
                    },
                    {
                        "dBm": {
                            "value": "1"
                        }
                    },
                    {
                        "ms": {
                            "value": "2"
                        }
                    },
                    {
                        "ps": {
                            "value": "3"
                        }
                    },
                    {
                        "ps/nm": {
                            "value": "4"
                        }
                    },
                    {
                        "dB": {
                            "value": "5"
                        }
                    },
                    {
                        "seconds": {
                            "value": "6"
                        }
                    },
                    {
                        "packets": {
                            "value": "7"
                        }
                    },
                    {
                        "events": {
                            "value": "8"
                        }
                    },
                    {
                        "octets": {
                            "value": "9"
                        }
                    },
                    {
                        "bits": {
                            "value": "10"
                        }
                    },
                    {
                        "blocks": {
                            "value": "11"
                        }
                    },
                    {
                        "times": {
                            "value": "12"
                        }
                    },
                    {
                        "percent": {
                            "value": "13"
                        }
                    },
                    {
                        "bit-ratio": {
                            "value": "14"
                        }
                    },
                    {
                        "C": {
                            "value": "15"
                        }
                    },
                    {
                        "frames": {
                            "value": "16"
                        }
                    },
                    {
                        "W": {
                            "value": "17"
                        }
                    },
                    {
                        "V": {
                            "value": "18"
                        }
                    },
                    {
                        "A": {
                            "value": "19"
                        }
                    },
                    {
                        "rpm": {
                            "value": "20"
                        }
                    },
                    {
                        "ps2": {
                            "value": "21"
                        }
                    },
                    {
                        "mA": {
                            "value": "22"
                        }
                    },
                    {
                        "words": {
                            "value": "23"
                        }
                    },
                    {
                        "cw": {
                            "value": "24"
                        }
                    },
                    {
                        "nm": {
                            "value": "25"
                        }
                    },
                    {
                        "bytes": {
                            "value": "26"
                        }
                    },
                    {
                        "errors": {
                            "value": "27"
                        }
                    },
                    {
                        "MHz": {
                            "value": "28"
                        }
                    }
                ],
                "description": "Unit of the PM parameter value.",
                "config": "false"
            }
        },
        "current-pm-data": {
            "definition": {
                "jpath": {
                    "pm": {
                        "current-pm-data": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "config": "false",
                "description": "Container for current-pm entries.",
                "cli-hidden": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "current-pm": "list"
        },
        "current-pm": {
            "definition": {
                "jpath": {
                    "pm": {
                        "current-pm-data": {
                            "current-pm": {
                                "resource": "",
                                "parameter": "",
                                "direction": "",
                                "location": "",
                                "period": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "resource parameter direction location period",
                "description": "Individual current-pm record. Contains the current bin being counted (bin zero).",
                "skip-db": "true",
                "run-rpc": "RPC /ioa-pm:get-pm[data-type='current']/\n                        filter[filter-id=(count(/get-pm/filter) + 1)]\n                            [ if (is-wildcard(current()/resource))  then true() else resource=deref(current()/resource) ]\n                            [ if (is-wildcard(current()/parameter)) then true() else parameter=current()/parameter ]\n                            [ if (is-wildcard(current()/direction)) then true() else direction=current()/direction ]\n                            [ if (is-wildcard(current()/location))  then true() else location=current()/location ]\n                            [ if (is-wildcard(current()/period))  then true() else period=current()/period ]\n                            [ if (ctx-value(current()/resource-type)) then resource-type=current()/resource-type else true() ]\n                            [ if (ctx-value(current()/AID)) then AID=current()/AID else true() ]",
                "content": "CREATE (for $entry in /get-pm/pm-record[bin=0][period != 'pm-real-time'] return\n                                        /pm/current-pm-data/current-pm[resource = deref($entry/resource)]\n                                                                        [resource-type = $entry/resource-type]\n                                                                        [AID = $entry/AID]\n                                                                        [parameter = $entry/parameter]\n                                                                        [direction = $entry/direction]\n                                                                        [location = $entry/location]\n                                                                        [period = $entry/period]\n                                                                        [pm-value-min = $entry/pm-value-min]\n                                                                        [pm-value-max = $entry/pm-value-max]\n                                                                        [pm-value-avg = $entry/pm-value-avg]\n                                                                        [pm-unit = $entry/pm-unit]\n                                        )",
                "config": "false",
                "user-class": "-w:NA,NE,TT"
            },
            "period": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PERIOD",
                "description": "Time period for PM data.",
                "config": "false"
            },
            "monitoring-date-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Monitoring date and time that this data refers to.\n                         For real-time and current PM, it represents the start time of the PM data collection.\n                         For history PM, it represents the start time of the bin.",
                "config": "false"
            },
            "resource": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Existing system resource.",
                "config": "false"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource.",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge).",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "ingress": {
                            "value": "2"
                        }
                    },
                    {
                        "egress": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter direction.",
                "config": "false"
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "near-end": {
                            "value": "2"
                        }
                    },
                    {
                        "far-end": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter location.",
                "config": "false"
            },
            "pm-value": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter value. Provided for real-time PM and counters.",
                "config": "false"
            },
            "pm-value-min": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter minimum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-max": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter maximum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-avg": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter average value. Provided for gauges.",
                "config": "false"
            },
            "pm-unit": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0",
                            "description": "Not applicable"
                        }
                    },
                    {
                        "dBm": {
                            "value": "1"
                        }
                    },
                    {
                        "ms": {
                            "value": "2"
                        }
                    },
                    {
                        "ps": {
                            "value": "3"
                        }
                    },
                    {
                        "ps/nm": {
                            "value": "4"
                        }
                    },
                    {
                        "dB": {
                            "value": "5"
                        }
                    },
                    {
                        "seconds": {
                            "value": "6"
                        }
                    },
                    {
                        "packets": {
                            "value": "7"
                        }
                    },
                    {
                        "events": {
                            "value": "8"
                        }
                    },
                    {
                        "octets": {
                            "value": "9"
                        }
                    },
                    {
                        "bits": {
                            "value": "10"
                        }
                    },
                    {
                        "blocks": {
                            "value": "11"
                        }
                    },
                    {
                        "times": {
                            "value": "12"
                        }
                    },
                    {
                        "percent": {
                            "value": "13"
                        }
                    },
                    {
                        "bit-ratio": {
                            "value": "14"
                        }
                    },
                    {
                        "C": {
                            "value": "15"
                        }
                    },
                    {
                        "frames": {
                            "value": "16"
                        }
                    },
                    {
                        "W": {
                            "value": "17"
                        }
                    },
                    {
                        "V": {
                            "value": "18"
                        }
                    },
                    {
                        "A": {
                            "value": "19"
                        }
                    },
                    {
                        "rpm": {
                            "value": "20"
                        }
                    },
                    {
                        "ps2": {
                            "value": "21"
                        }
                    },
                    {
                        "mA": {
                            "value": "22"
                        }
                    },
                    {
                        "words": {
                            "value": "23"
                        }
                    },
                    {
                        "cw": {
                            "value": "24"
                        }
                    },
                    {
                        "nm": {
                            "value": "25"
                        }
                    },
                    {
                        "bytes": {
                            "value": "26"
                        }
                    },
                    {
                        "errors": {
                            "value": "27"
                        }
                    },
                    {
                        "MHz": {
                            "value": "28"
                        }
                    }
                ],
                "description": "Unit of the PM parameter value.",
                "config": "false"
            },
            "validity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "complete": {
                            "value": "1",
                            "description": "valid throughout an entire period interval"
                        }
                    },
                    {
                        "suspect": {
                            "value": "2",
                            "description": "either an error occurred during the period interval or the period\n                                                      interval in which measurements were taken is not the nominal one.\n                                                      (e.g. change of clock time, data-supervision being disabled)"
                        }
                    },
                    {
                        "partial": {
                            "value": "3",
                            "description": "indicates that PM collection is still occurring for this bin,\n                                                      the collection has been continuously been collected since the start\n                                                      of the bin, and there were no invalid readings in the bin"
                        }
                    }
                ],
                "description": "PM parameter validity.",
                "config": "false"
            }
        },
        "history-pm-data": {
            "definition": {
                "jpath": {
                    "pm": {
                        "history-pm-data": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "config": "false",
                "description": "Container for history-pm entries.",
                "cli-hidden": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "history-pm": "list"
        },
        "history-pm": {
            "definition": {
                "jpath": {
                    "pm": {
                        "history-pm-data": {
                            "history-pm": {
                                "resource": "",
                                "parameter": "",
                                "direction": "",
                                "location": "",
                                "period": "",
                                "bin": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "resource parameter direction location period bin",
                "description": "Individual history-pm record. Contains performance bins (history records) stored in the system.",
                "skip-db": "true",
                "run-rpc": "RPC /ioa-pm:get-pm[data-type='history']/\n                        filter[filter-id=(count(/get-pm/filter) + 1)]\n                            [ if (is-wildcard(current()/resource))  then true() else resource=deref(current()/resource) ]\n                            [ if (is-wildcard(current()/parameter)) then true() else parameter=current()/parameter ]\n                            [ if (is-wildcard(current()/direction)) then true() else direction=current()/direction ]\n                            [ if (is-wildcard(current()/location))  then true() else location=current()/location ]\n                            [ if (is-wildcard(current()/period))  then true() else period=current()/period ]\n                            [ if (is-wildcard(current()/bin))  then true() else bin=current()/bin ]\n                            [ if (ctx-value(current()/resource-type)) then resource-type=current()/resource-type else true() ]\n                            [ if (ctx-value(current()/AID)) then AID=current()/AID else true() ]",
                "content": "CREATE (for $entry in /get-pm/pm-record[bin != 0] return\n                                        /pm/history-pm-data/history-pm[resource = deref($entry/resource)]\n                                                                        [resource-type = $entry/resource-type]\n                                                                        [AID = $entry/AID]\n                                                                        [parameter = $entry/parameter]\n                                                                        [direction = $entry/direction]\n                                                                        [location = $entry/location]\n                                                                        [period = $entry/period]\n                                                                        [bin = $entry/bin]\n                                                                        [pm-value-min = $entry/pm-value-min]\n                                                                        [pm-value-max = $entry/pm-value-max]\n                                                                        [pm-value-avg = $entry/pm-value-avg]\n                                                                        [pm-unit = $entry/pm-unit]\n                                        )",
                "config": "false",
                "user-class": "-w:NA,NE,TT"
            },
            "period": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PERIOD",
                "description": "Time period for PM data.",
                "config": "false"
            },
            "monitoring-date-time": {
                "yangType": "leaf",
                "type": "string",
                "pattern": [
                    "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                ],
                "description": "Monitoring date and time that this data refers to.\n                         For real-time and current PM, it represents the start time of the PM data collection.\n                         For history PM, it represents the start time of the bin.",
                "config": "false"
            },
            "resource": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Existing system resource.",
                "config": "false"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource.",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge).",
                "config": "false"
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "ingress": {
                            "value": "2"
                        }
                    },
                    {
                        "egress": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter direction.",
                "config": "false"
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "near-end": {
                            "value": "2"
                        }
                    },
                    {
                        "far-end": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter location.",
                "config": "false"
            },
            "pm-value": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter value. Provided for real-time PM and counters.",
                "config": "false"
            },
            "pm-value-min": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter minimum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-max": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter maximum value. Provided for gauges.",
                "config": "false"
            },
            "pm-value-avg": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "PM parameter average value. Provided for gauges.",
                "config": "false"
            },
            "pm-unit": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0",
                            "description": "Not applicable"
                        }
                    },
                    {
                        "dBm": {
                            "value": "1"
                        }
                    },
                    {
                        "ms": {
                            "value": "2"
                        }
                    },
                    {
                        "ps": {
                            "value": "3"
                        }
                    },
                    {
                        "ps/nm": {
                            "value": "4"
                        }
                    },
                    {
                        "dB": {
                            "value": "5"
                        }
                    },
                    {
                        "seconds": {
                            "value": "6"
                        }
                    },
                    {
                        "packets": {
                            "value": "7"
                        }
                    },
                    {
                        "events": {
                            "value": "8"
                        }
                    },
                    {
                        "octets": {
                            "value": "9"
                        }
                    },
                    {
                        "bits": {
                            "value": "10"
                        }
                    },
                    {
                        "blocks": {
                            "value": "11"
                        }
                    },
                    {
                        "times": {
                            "value": "12"
                        }
                    },
                    {
                        "percent": {
                            "value": "13"
                        }
                    },
                    {
                        "bit-ratio": {
                            "value": "14"
                        }
                    },
                    {
                        "C": {
                            "value": "15"
                        }
                    },
                    {
                        "frames": {
                            "value": "16"
                        }
                    },
                    {
                        "W": {
                            "value": "17"
                        }
                    },
                    {
                        "V": {
                            "value": "18"
                        }
                    },
                    {
                        "A": {
                            "value": "19"
                        }
                    },
                    {
                        "rpm": {
                            "value": "20"
                        }
                    },
                    {
                        "ps2": {
                            "value": "21"
                        }
                    },
                    {
                        "mA": {
                            "value": "22"
                        }
                    },
                    {
                        "words": {
                            "value": "23"
                        }
                    },
                    {
                        "cw": {
                            "value": "24"
                        }
                    },
                    {
                        "nm": {
                            "value": "25"
                        }
                    },
                    {
                        "bytes": {
                            "value": "26"
                        }
                    },
                    {
                        "errors": {
                            "value": "27"
                        }
                    },
                    {
                        "MHz": {
                            "value": "28"
                        }
                    }
                ],
                "description": "Unit of the PM parameter value.",
                "config": "false"
            },
            "validity": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "complete": {
                            "value": "1",
                            "description": "valid throughout an entire period interval"
                        }
                    },
                    {
                        "suspect": {
                            "value": "2",
                            "description": "either an error occurred during the period interval or the period\n                                                      interval in which measurements were taken is not the nominal one.\n                                                      (e.g. change of clock time, data-supervision being disabled)"
                        }
                    },
                    {
                        "partial": {
                            "value": "3",
                            "description": "indicates that PM collection is still occurring for this bin,\n                                                      the collection has been continuously been collected since the start\n                                                      of the bin, and there were no invalid readings in the bin"
                        }
                    }
                ],
                "description": "PM parameter validity.",
                "config": "false"
            },
            "bin": {
                "yangType": "leaf",
                "type": "uint16",
                "description": "Bin number of history PM. Most recent bins have lowest numbers.",
                "config": "false"
            }
        },
        "pm-control": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-control": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "description": "Configuration for currently existing resources in the system that support PM data.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "pm-resource": "list"
        },
        "pm-resource": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-control": {
                            "pm-resource": {
                                "resource": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "resource",
                "description": "PM configuration per resource instance.",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:NA,NE,TT"
            },
            "resource": {
                "yangType": "leaf",
                "type": "instance-identifier",
                "description": "Existing system resource."
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource.",
                "config": "false"
            },
            "AID": {
                "yangType": "leaf",
                "type": "string",
                "length": "1..64",
                "config": "false",
                "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
            },
            "real-time-supervision": {
                "yangType": "leaf",
                "type": "boolean",
                "default": "true",
                "description": "Real-time data supervision for this resource."
            },
            "pm-control-entry": "list"
        },
        "pm-control-entry": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-control": {
                            "pm-resource": {
                                "pm-control-entry": {
                                    "period": "",
                                    "direction": "",
                                    "location": ""
                                },
                                "resource": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "period direction location",
                "description": "PM configuration for one particular resource, for one particular period, direction and location.",
                "system-managed": "true",
                "persistency": "all-true",
                "user-class": "-w:NA,NE,TT"
            },
            "period": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PERIOD",
                "description": "Time period for PM data."
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "ingress": {
                            "value": "2"
                        }
                    },
                    {
                        "egress": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter direction."
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "near-end": {
                            "value": "2"
                        }
                    },
                    {
                        "far-end": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter location."
            },
            "supported-parameters": {
                "yangType": "leaf-list",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "config": "false",
                "max-elements": "100",
                "description": "List of PM parameters that this resource type supports for this direction/location."
            },
            "data-supervision": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "PM data supervision for this resource."
            },
            "tca-supervision": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "TCA supervision for this resource.",
                "when": "../tca-supervisionable != 'false'"
            },
            "pm-threshold": "list"
        },
        "pm-threshold": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-control": {
                            "pm-resource": {
                                "pm-control-entry": {
                                    "pm-threshold": {
                                        "parameter": ""
                                    },
                                    "period": "",
                                    "direction": "",
                                    "location": ""
                                },
                                "resource": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "parameter",
                "description": "Per resource instance/parameter TCA threshold configuration. Needs to be explicitly created by the user, otherwise\n                                     TCA configuration is done per resource-type (in the pm-threshold-profile list).\n                                     This object allows to have per resource instance TCA threshold configuration, deviating from per resource-type TCA\n                                     configuration.\n                                     The absence of this object for a particular resource/parameter implies that the profile is used\n                                     instead.",
                "create-condition": {
                    "error-message": "This parameter is not supported by this resource.",
                    "value": "autocomplete() or parameter = $possible-tcas"
                },
                "edit-condition": {
                    "error-message": "low-threshold must be less than high-threshold.",
                    "value": "if ((newvalue(low-threshold) or newvalue(high-threshold)) and\n                                boolean(low-threshold) and low-threshold != 'na' and\n                                boolean(high-threshold) and high-threshold != 'na') then\n                                    low-threshold <= high-threshold\n                            else\n                                true()"
                },
                "user-class": "-w:NA,NE,TT"
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge)."
            },
            "low-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "$related-profile-entry/default-low-threshold",
                "description": "Configured low threshold value for this parameter for this individual resource.",
                "when": "boolean($related-profile-entry/default-low-threshold) and $related-profile-entry/default-low-threshold != 'not-supported'",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid $1 value."
                        },
                        "value": ". != 'not-supported'"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be less then the min-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and not($related-profile-entry/min-value = ('na','not-supported'))) then\n                                . >= $related-profile-entry/min-value\n                            else\n                                true()"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be greater then the max-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and  not($related-profile-entry/max-value = ('na','not-supported'))) then\n                                . <= $related-profile-entry/max-value\n                            else\n                                true()"
                    }
                ]
            },
            "high-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "$related-profile-entry/default-high-threshold",
                "description": "Configured high threshold value for this parameter for this individual resource.",
                "when": "boolean($related-profile-entry/default-high-threshold) and $related-profile-entry/default-high-threshold != 'not-supported'",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid $1 value."
                        },
                        "value": ". != 'not-supported'"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be less then the min-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and not($related-profile-entry/min-value = ('na','not-supported'))) then\n                                . >= $related-profile-entry/min-value\n                            else\n                                true()"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be greater then the max-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and  not($related-profile-entry/max-value = ('na','not-supported'))) then\n                                . <= $related-profile-entry/max-value\n                            else\n                                true()"
                    }
                ]
            }
        },
        "pm-profile": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-profile": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "description": "PM profile which contains information on all resources that support PM data, together with its related default configuration.\n            Changing this configuration has impact on newly created objects.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "pm-profile-entry": "list"
        },
        "pm-profile-entry": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-profile": {
                            "pm-profile-entry": {
                                "resource-type": "",
                                "direction": "",
                                "location": "",
                                "period": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "resource-type direction location period",
                "description": "PM configuration per resource type.",
                "system-managed": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "resource-type": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "RESOURCE-TYPE",
                "description": "Type of resource."
            },
            "period": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PERIOD",
                "description": "Time period for PM data."
            },
            "direction": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "ingress": {
                            "value": "2"
                        }
                    },
                    {
                        "egress": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter direction."
            },
            "location": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "all": {
                            "value": "0"
                        }
                    },
                    {
                        "na": {
                            "value": "1",
                            "description": "Not-applicable"
                        }
                    },
                    {
                        "near-end": {
                            "value": "2"
                        }
                    },
                    {
                        "far-end": {
                            "value": "3"
                        }
                    }
                ],
                "default": "all",
                "description": "PM parameter location."
            },
            "default-data-supervision": {
                "yangType": "leaf",
                "type": "boolean",
                "description": "For newly created resources of this type, whether they have PM data supervision automatically enabled or not."
            },
            "default-tca-supervision": {
                "yangType": "leaf",
                "when": "../pm-threshold-profile",
                "type": "boolean",
                "description": "For newly created resources of this type, whether they have PM threshold crossing supervision automatically enabled or not."
            },
            "pm-threshold-profile": "list"
        },
        "pm-threshold-profile": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-profile": {
                            "pm-profile-entry": {
                                "pm-threshold-profile": {
                                    "parameter": ""
                                },
                                "resource-type": "",
                                "direction": "",
                                "location": "",
                                "period": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "parameter",
                "description": "PM configuration per parameter, for this resource type.",
                "system-managed": "true",
                "persistency": "all-true",
                "edit-condition": {
                    "error-message": "low-threshold must be less than high-threshold.",
                    "value": "if ((newvalue(low-threshold) or newvalue(high-threshold)) and\n                                boolean(low-threshold) and low-threshold != 'na' and\n                                boolean(high-threshold) and high-threshold != 'na') then\n                                    low-threshold <= high-threshold\n                            else\n                                true()"
                },
                "user-class": "-w:NA,NE,TT"
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge)."
            },
            "low-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "$related-profile-entry/default-low-threshold",
                "description": "Configured low threshold value for resources that have this parameter.",
                "when": "boolean($related-profile-entry/default-low-threshold) and $related-profile-entry/default-low-threshold != 'not-supported'",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid $1 value."
                        },
                        "value": ". != 'not-supported'"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be less then the min-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and not($related-profile-entry/min-value = ('na','not-supported'))) then\n                                . >= $related-profile-entry/min-value\n                            else\n                                true()"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be greater then the max-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and  not($related-profile-entry/max-value = ('na','not-supported'))) then\n                                . <= $related-profile-entry/max-value\n                            else\n                                true()"
                    }
                ]
            },
            "high-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "$related-profile-entry/default-high-threshold",
                "description": "Configured high threshold value for resources that have this parameter.",
                "when": "boolean($related-profile-entry/default-high-threshold) and $related-profile-entry/default-high-threshold != 'not-supported'",
                "edit-condition": [
                    {
                        "error-message": {
                            "value": "Invalid $1 value."
                        },
                        "value": ". != 'not-supported'"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be less then the min-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and not($related-profile-entry/min-value = ('na','not-supported'))) then\n                                . >= $related-profile-entry/min-value\n                            else\n                                true()"
                    },
                    {
                        "error-message": {
                            "value": "$1 cannot be greater then the max-value $2."
                        },
                        "value": "if (not(. = ('na','not-supported')) and  not($related-profile-entry/max-value = ('na','not-supported'))) then\n                                . <= $related-profile-entry/max-value\n                            else\n                                true()"
                    }
                ]
            },
            "default-low-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "System defined default value for low threshold for this parameter.",
                "config": "false",
                "when": ". != 'not-supported'"
            },
            "default-high-threshold": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "System defined default value for high threshold for this parameter.",
                "config": "false",
                "when": ". != 'not-supported'"
            },
            "min-value": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "Minimum value for this parameter.",
                "config": "false",
                "when": ". != 'na'"
            },
            "max-value": {
                "yangType": "leaf",
                "type": "union",
                "union-value": [
                    {
                        "type": "uint64"
                    },
                    {
                        "type": "int64"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "2"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "4"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "7"
                    },
                    {
                        "type": "decimal64",
                        "fraction-digits": "18"
                    },
                    {
                        "type": "enumeration",
                        "enum-value": [
                            {
                                "na": {
                                    "value": "0",
                                    "description": "Not applicable"
                                }
                            },
                            {
                                "not-supported": {
                                    "value": "1",
                                    "description": "Not supported; applicable for PM thresholds only."
                                }
                            }
                        ]
                    }
                ],
                "default": "na",
                "description": "Maximum value for this parameter.",
                "config": "false",
                "when": ". != 'na'"
            }
        },
        "pm-catalog": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-catalog": {}
                    }
                },
                "yangType": "container",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "config": "false",
                "description": "PM catalog which contains information on all PM parameters, such as units and type",
                "system-managed": "true",
                "persistency": "true",
                "user-class": "-w:NA,NE,TT"
            },
            "pm-parameter": "list"
        },
        "pm-parameter": {
            "definition": {
                "jpath": {
                    "pm": {
                        "pm-catalog": {
                            "pm-parameter": {
                                "parameter": ""
                            }
                        }
                    }
                },
                "yangType": "list",
                "namespace": "http://infinera.com/yang/ioa/pm",
                "key": "parameter",
                "description": "Catalog information for a single PM parameter.",
                "system-managed": "true",
                "persistency": "all-true",
                "config": "false",
                "user-class": "-w:NA,NE,TT"
            },
            "parameter": {
                "yangType": "leaf",
                "type": "identityref",
                "base": "PM-PARAMETER",
                "description": "PM parameter identifier (can be a counter or a gauge).",
                "config": "false"
            },
            "units": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "na": {
                            "value": "0",
                            "description": "Not applicable"
                        }
                    },
                    {
                        "dBm": {
                            "value": "1"
                        }
                    },
                    {
                        "ms": {
                            "value": "2"
                        }
                    },
                    {
                        "ps": {
                            "value": "3"
                        }
                    },
                    {
                        "ps/nm": {
                            "value": "4"
                        }
                    },
                    {
                        "dB": {
                            "value": "5"
                        }
                    },
                    {
                        "seconds": {
                            "value": "6"
                        }
                    },
                    {
                        "packets": {
                            "value": "7"
                        }
                    },
                    {
                        "events": {
                            "value": "8"
                        }
                    },
                    {
                        "octets": {
                            "value": "9"
                        }
                    },
                    {
                        "bits": {
                            "value": "10"
                        }
                    },
                    {
                        "blocks": {
                            "value": "11"
                        }
                    },
                    {
                        "times": {
                            "value": "12"
                        }
                    },
                    {
                        "percent": {
                            "value": "13"
                        }
                    },
                    {
                        "bit-ratio": {
                            "value": "14"
                        }
                    },
                    {
                        "C": {
                            "value": "15"
                        }
                    },
                    {
                        "frames": {
                            "value": "16"
                        }
                    },
                    {
                        "W": {
                            "value": "17"
                        }
                    },
                    {
                        "V": {
                            "value": "18"
                        }
                    },
                    {
                        "A": {
                            "value": "19"
                        }
                    },
                    {
                        "rpm": {
                            "value": "20"
                        }
                    },
                    {
                        "ps2": {
                            "value": "21"
                        }
                    },
                    {
                        "mA": {
                            "value": "22"
                        }
                    },
                    {
                        "words": {
                            "value": "23"
                        }
                    },
                    {
                        "cw": {
                            "value": "24"
                        }
                    },
                    {
                        "nm": {
                            "value": "25"
                        }
                    },
                    {
                        "bytes": {
                            "value": "26"
                        }
                    },
                    {
                        "errors": {
                            "value": "27"
                        }
                    },
                    {
                        "MHz": {
                            "value": "28"
                        }
                    }
                ],
                "description": "Units for this parameter.",
                "config": "false"
            },
            "type": {
                "yangType": "leaf",
                "type": "enumeration",
                "enum-value": [
                    {
                        "counter": {
                            "value": "1",
                            "description": "Counters are parameters that correspond to positive integer numbers, that\n                                         can only increment over time."
                        }
                    },
                    {
                        "gauge": {
                            "value": "2",
                            "description": "Gauges are analogic values that are measured; they are available as\n                                         instant, average, maximum and minimum values."
                        }
                    }
                ],
                "description": "Type of PM parameter, it can be either a counter or a gauge.",
                "config": "false"
            }
        }
    },
    "rpc": {
        "subscription-paths-hmo": {
            "definition": {
                "yangType": "list",
                "key": "subscription-path-id",
                "description": "List of single subscriptions paths keyed by\n                     subscription-path-id."
            },
            "input": {
                "subscription-path-id": {
                    "yangType": "leaf",
                    "type": "int32",
                    "mandatory": "true",
                    "description": "Identifier of the single subscription path in the subscription list."
                },
                "subscription-path": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..520",
                    "mandatory": "true",
                    "description": "Specifies a path in the data model path corresponding to\n                        the data in the message"
                },
                "subscription-path-origin": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..64",
                    "description": "Specifies the schema tree in order to disambiguate the path."
                },
                "exclude-filter": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Optional filter expression to be used in filtering data\n                        elements from the subtree specified by the corresponding\n                        path."
                },
                "subscription-path-mode": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "target-defined": {
                                "value": "1"
                            }
                        },
                        {
                            "on-change": {
                                "value": "2"
                            }
                        },
                        {
                            "sample": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "target-defined",
                    "description": "Specify how the device should return the values of the subscription-path"
                },
                "sample-interval": {
                    "yangType": "leaf",
                    "edit-condition": "not ((. < 2000) and (. != 0) and (../../transfer-mode = 'stream') and\n                                        (../subscription-path-mode = ('target-defined', 'sample' )))",
                    "type": "uint64",
                    "units": "milliseconds",
                    "default": "0",
                    "description": "Time in milliseconds between the device's sample of a\n                        telemetry data source. For example, setting this to 2000\n                        would require the local device to collect the telemetry\n                        data every 2000 milliseconds. There can be latency or jitter\n                        in transmitting the data, but the sample must occur at\n                        the specified interval.\n                        The timestamp must reflect the actual time when the data\n                        was sampled, not simply the previous sample timestamp +\n                        sample-interval.\n                        Set to 0 when optional."
                },
                "heartbeat-interval": {
                    "yangType": "leaf",
                    "edit-condition": "not ((. < 2000) and (. != 0 ) and (../../transfer-mode = 'stream'))",
                    "type": "uint64",
                    "units": "milliseconds",
                    "default": "0",
                    "description": "Maximum time interval in milliseconds that may pass\n                        between updates from a device to a telemetry collector.\n                        If this interval expires, but there is no updated data to\n                        send (such as if suppress_updates has been configured), the\n                        device must send a telemetry message to the collector.\n                        Set to 0 when optional."
                },
                "suppress-redundant": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "default": "true",
                    "description": "Boolean flag to control suppression of redundant\n                        telemetry updates to the collector platform. If this flag is\n                        set to TRUE, then the collector will only send an update at\n                        the configured interval if a subscribed data value has\n                        changed. Otherwise, the device will not send an update to\n                        the collector until expiration of the heartbeat interval."
                }
            }
        },
        "set-alarm-state": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/alarm",
                "yangType": "rpc",
                "description": "Change the operator state of an alarm.",
                "allow-in-lock": "true",
                "cli-hidden-mode": "candidate",
                "user-class": "-w:NA,NE,PR,TT"
            },
            "input": {
                "state": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "none": {
                                "value": "1",
                                "description": "The alarm is not being taken care of."
                            }
                        },
                        {
                            "ack": {
                                "value": "2",
                                "description": "The alarm is being taken care of. Corrective action not taken yet or has failed."
                            }
                        },
                        {
                            "closed": {
                                "value": "3",
                                "description": "Corrective action taken successfully."
                            }
                        }
                    ],
                    "description": "Alarm state.",
                    "mandatory": "true"
                },
                "target": {
                    "yangType": "choice",
                    "all-alarms": {
                        "yangType": "leaf",
                        "type": "empty",
                        "description": "Acknowledge all currently raised alarms."
                    },
                    "alarm-id-list": {
                        "yangType": "leaf-list",
                        "type": "leafref",
                        "path": "/alarms/current-alarms/alarm/alarm-id",
                        "min-elements": "1",
                        "max-elements": "10",
                        "description": "List of alarm-ids to change the state."
                    },
                    "mandatory": "true"
                },
                "acknowledge-text": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..256",
                    "description": "Optional text that will be stored in the alarm."
                }
            }
        },
        "get-pm": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/pm",
                "yangType": "rpc",
                "description": "Auxiliary RPC to retrieve PM data.\n                     No parameters are mandatory; each provided parameter will be handled as a filter.\n                     Data can be filtered by:\n                     - resource instance\n                     - resource type\n                     - PM time period (15min, 24h, etc)\n                     - PM data type (current, history, real-time)\n                     - PM parameter name\n                     Multiple fitlers can be provided (e.g. provide PM data for entity x and entity y)",
                "user-class": "-w:*",
                "cli-hidden": "true",
                "allow-in-lock": "true",
                "display": {
                    "exec": {
                        "value": "python3 /opt/infinera/thanos/local/bin/showPm.py --mode $1 --cols $2 --file"
                    },
                    "value": "script"
                }
            },
            "input": {
                "data-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "current": {
                                "value": "1"
                            }
                        },
                        {
                            "history": {
                                "value": "2"
                            }
                        },
                        {
                            "real-time": {
                                "value": "3"
                            }
                        }
                    ],
                    "description": "Type of PM data to retrieve.",
                    "default": "real-time"
                },
                "period": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PERIOD",
                    "description": "Time period for PM data.",
                    "when": "data-type != 'real-time'"
                },
                "number-of-records": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "default": "1000",
                    "description": "Maximum number of records that will be retrieved.",
                    "option": "n"
                },
                "skip-records": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "default": "0",
                    "description": "Allows user to specify a number of records that will be skipped, so that\n                            the total data can be fetched in multiple requests.\n                            Example:\n                            - system has 2300 PM records available\n                            - 1st get-pm with (number-of-records = 1000) and (skip-records = 0);    result has    0..1000 records\n                            - 2nd get-pm with (number-of-records = 1000) and (skip-records = 1000); result has 1001..2000 records\n                            - 3nd get-pm with (number-of-records = 1000) and (skip-records = 2000); result has 2001..2300 records",
                    "option": "s"
                },
                "start-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "If provided, defines the start timestamp that will be considered to filter the PM results.\n                         If not provided, the oldest data timestamp will be considered.",
                    "when": "data-type = 'history'",
                    "option": "st"
                },
                "end-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "If provided, defines the end timestamp that will be considered to filter the PM results.\n                         If not provided, the most recent data timestamp will be considered.",
                    "when": "data-type = 'history'",
                    "option": "et"
                },
                "start-bin": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "1..65535",
                    "description": "If provided, defines the start bin number that will be considered to filter the PM results.\n                         If not provided, the smallest bin number (most recent data) will be considered.",
                    "when": "data-type = 'history'",
                    "option": "sbin"
                },
                "end-bin": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "1..65535",
                    "description": "If provided, defines the end bin number that will be considered to filter the PM results.\n                         If not provided, the largest available bin number (oldest data) will be considered.",
                    "when": "data-type = 'history'",
                    "option": "ebin"
                },
                "filter": "list"
            },
            "output": {
                "number-of-result-records": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "description": "Counter of the number of pm-records included in this response."
                },
                "additional-records-available": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "default": "false",
                    "description": "If true, the system had more PM records than the ones that are being delivered.\n                             Result will contain only the configured number-of-records."
                },
                "retrieval-date-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Represents the time at which the corresponding PM data is retrieved and returned."
                },
                "pm-record": "list"
            }
        },
        "filter": {
            "definition": {
                "yangType": "list",
                "key": "filter-id",
                "description": "Set of parameters that create a filter for PM data.\n                             Multiple filters are considered with an AND logic.",
                "namespace": "http://infinera.com/yang/ioa/common"
            },
            "input": {
                "filter-id": {
                    "yangType": "leaf",
                    "type": "uint8",
                    "description": "Identifier for each filter, has no specific meaning."
                },
                "resource": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "description": "Existing system resource.",
                    "discover-values": "/pm/pm-control/pm-resource/resource"
                },
                "resource-type": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "RESOURCE-TYPE",
                    "description": "Type of resource.",
                    "discover-values": "/pm/pm-control/pm-resource/resource-type"
                },
                "AID": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..64",
                    "config": "false",
                    "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type.",
                    "discover-values": "/pm/pm-control/pm-resource/AID"
                },
                "parameter": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PARAMETER",
                    "description": "PM parameter identifier (can be a counter or a gauge)."
                },
                "direction": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "ingress": {
                                "value": "2"
                            }
                        },
                        {
                            "egress": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter direction."
                },
                "location": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "near-end": {
                                "value": "2"
                            }
                        },
                        {
                            "far-end": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter location."
                }
            }
        },
        "pm-record": {
            "definition": {
                "yangType": "list",
                "key": "resource parameter direction location period bin",
                "description": "Individual PM record, containing one parameter value for one specific combination of resource, period and bin.\n                             The bin key is only used for history; current and real-time always use 0.",
                "namespace": "http://infinera.com/yang/ioa/pm"
            },
            "input": {
                "period": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PERIOD",
                    "description": "Time period for PM data."
                },
                "monitoring-date-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Monitoring date and time that this data refers to.\n                         For real-time and current PM, it represents the start time of the PM data collection.\n                         For history PM, it represents the start time of the bin."
                },
                "resource": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "description": "Existing system resource."
                },
                "resource-type": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "RESOURCE-TYPE",
                    "description": "Type of resource."
                },
                "AID": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..64",
                    "config": "false",
                    "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
                },
                "parameter": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PARAMETER",
                    "description": "PM parameter identifier (can be a counter or a gauge)."
                },
                "direction": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "ingress": {
                                "value": "2"
                            }
                        },
                        {
                            "egress": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter direction."
                },
                "location": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "near-end": {
                                "value": "2"
                            }
                        },
                        {
                            "far-end": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter location."
                },
                "pm-value": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "uint64"
                        },
                        {
                            "type": "int64"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "2"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "4"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "7"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "18"
                        },
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "na": {
                                        "value": "0",
                                        "description": "Not applicable"
                                    }
                                },
                                {
                                    "not-supported": {
                                        "value": "1",
                                        "description": "Not supported; applicable for PM thresholds only."
                                    }
                                }
                            ]
                        }
                    ],
                    "default": "na",
                    "description": "PM parameter value. Provided for real-time PM and counters."
                },
                "pm-value-min": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "uint64"
                        },
                        {
                            "type": "int64"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "2"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "4"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "7"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "18"
                        },
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "na": {
                                        "value": "0",
                                        "description": "Not applicable"
                                    }
                                },
                                {
                                    "not-supported": {
                                        "value": "1",
                                        "description": "Not supported; applicable for PM thresholds only."
                                    }
                                }
                            ]
                        }
                    ],
                    "default": "na",
                    "description": "PM parameter minimum value. Provided for gauges."
                },
                "pm-value-max": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "uint64"
                        },
                        {
                            "type": "int64"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "2"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "4"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "7"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "18"
                        },
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "na": {
                                        "value": "0",
                                        "description": "Not applicable"
                                    }
                                },
                                {
                                    "not-supported": {
                                        "value": "1",
                                        "description": "Not supported; applicable for PM thresholds only."
                                    }
                                }
                            ]
                        }
                    ],
                    "default": "na",
                    "description": "PM parameter maximum value. Provided for gauges."
                },
                "pm-value-avg": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "uint64"
                        },
                        {
                            "type": "int64"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "2"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "4"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "7"
                        },
                        {
                            "type": "decimal64",
                            "fraction-digits": "18"
                        },
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "na": {
                                        "value": "0",
                                        "description": "Not applicable"
                                    }
                                },
                                {
                                    "not-supported": {
                                        "value": "1",
                                        "description": "Not supported; applicable for PM thresholds only."
                                    }
                                }
                            ]
                        }
                    ],
                    "default": "na",
                    "description": "PM parameter average value. Provided for gauges."
                },
                "pm-unit": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "na": {
                                "value": "0",
                                "description": "Not applicable"
                            }
                        },
                        {
                            "dBm": {
                                "value": "1"
                            }
                        },
                        {
                            "ms": {
                                "value": "2"
                            }
                        },
                        {
                            "ps": {
                                "value": "3"
                            }
                        },
                        {
                            "ps/nm": {
                                "value": "4"
                            }
                        },
                        {
                            "dB": {
                                "value": "5"
                            }
                        },
                        {
                            "seconds": {
                                "value": "6"
                            }
                        },
                        {
                            "packets": {
                                "value": "7"
                            }
                        },
                        {
                            "events": {
                                "value": "8"
                            }
                        },
                        {
                            "octets": {
                                "value": "9"
                            }
                        },
                        {
                            "bits": {
                                "value": "10"
                            }
                        },
                        {
                            "blocks": {
                                "value": "11"
                            }
                        },
                        {
                            "times": {
                                "value": "12"
                            }
                        },
                        {
                            "percent": {
                                "value": "13"
                            }
                        },
                        {
                            "bit-ratio": {
                                "value": "14"
                            }
                        },
                        {
                            "C": {
                                "value": "15"
                            }
                        },
                        {
                            "frames": {
                                "value": "16"
                            }
                        },
                        {
                            "W": {
                                "value": "17"
                            }
                        },
                        {
                            "V": {
                                "value": "18"
                            }
                        },
                        {
                            "A": {
                                "value": "19"
                            }
                        },
                        {
                            "rpm": {
                                "value": "20"
                            }
                        },
                        {
                            "ps2": {
                                "value": "21"
                            }
                        },
                        {
                            "mA": {
                                "value": "22"
                            }
                        },
                        {
                            "words": {
                                "value": "23"
                            }
                        },
                        {
                            "cw": {
                                "value": "24"
                            }
                        },
                        {
                            "nm": {
                                "value": "25"
                            }
                        },
                        {
                            "bytes": {
                                "value": "26"
                            }
                        },
                        {
                            "errors": {
                                "value": "27"
                            }
                        },
                        {
                            "MHz": {
                                "value": "28"
                            }
                        }
                    ],
                    "description": "Unit of the PM parameter value."
                },
                "validity": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "complete": {
                                "value": "1",
                                "description": "valid throughout an entire period interval"
                            }
                        },
                        {
                            "suspect": {
                                "value": "2",
                                "description": "either an error occurred during the period interval or the period\n                                                      interval in which measurements were taken is not the nominal one.\n                                                      (e.g. change of clock time, data-supervision being disabled)"
                            }
                        },
                        {
                            "partial": {
                                "value": "3",
                                "description": "indicates that PM collection is still occurring for this bin,\n                                                      the collection has been continuously been collected since the start\n                                                      of the bin, and there were no invalid readings in the bin"
                            }
                        }
                    ],
                    "description": "PM parameter validity."
                },
                "bin": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "description": "Bin number of history PM. Most recent bins have lowest numbers."
                }
            }
        },
        "clear-pm": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/pm",
                "yangType": "rpc",
                "description": "Allows to clear/reset PM data from the system.\n                     Data can be reset using filters:\n                     - by data type (real-time, current, history)\n                     - by period (15min/24h)\n                     - by direction (na/ingress/egress)\n                     - by location (na/near-end/far-end)\n                     - by resource\n                     - by resource type\n                     - by AID\n                     or a combination between them.\n                     An absense of a filter parameter means 'all'.\n                     This means triggering this RPC without any parameters clears all PM in the system.",
                "user-class": "-w:NA,NE",
                "allow-in-lock": "true",
                "requires-confirmation": "This operation will delete pm data depending of the given input. Are you sure? [y/n] ",
                "cli-hidden": "true"
            },
            "input": {
                "data-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "current": {
                                "value": "1"
                            }
                        },
                        {
                            "history": {
                                "value": "2"
                            }
                        },
                        {
                            "real-time": {
                                "value": "3"
                            }
                        }
                    ],
                    "description": "Type of PM data to clear.",
                    "mandatory": "true"
                },
                "period": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PERIOD",
                    "description": "Time period for PM data.",
                    "when": "data-type != 'real-time'"
                },
                "direction": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "ingress": {
                                "value": "2"
                            }
                        },
                        {
                            "egress": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter direction."
                },
                "location": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "all": {
                                "value": "0"
                            }
                        },
                        {
                            "na": {
                                "value": "1",
                                "description": "Not-applicable"
                            }
                        },
                        {
                            "near-end": {
                                "value": "2"
                            }
                        },
                        {
                            "far-end": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "all",
                    "description": "PM parameter location."
                },
                "resource": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "description": "Existing system resource.",
                    "discover-values": "/pm/pm-control/pm-resource/resource",
                    "edit-condition": {
                        "error-message": "Invalid resource, or resource has no PM data.",
                        "value": "autocomplete() or  deref(.) = /pm/pm-control/pm-resource/resource"
                    }
                },
                "resource-type": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "RESOURCE-TYPE",
                    "description": "Type of resource."
                },
                "AID": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..64",
                    "config": "false",
                    "description": "Resource Access Identifier (AID). Identifies an instance within a specific resource type."
                }
            }
        },
        "protection-switch": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/protection-group",
                "yangType": "rpc",
                "description": "Operating command for protection group switch",
                "user-class": "-w:NA",
                "cli-hidden-mode": "candidate",
                "requires-confirmation": "This command can have traffic impact! Are you sure? [y/n] "
            },
            "input": {
                "protection-group": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "The target of the switch command.",
                    "discover-values": "seq(//protection-group)",
                    "edit-condition": {
                        "error-message": "Only protection groups are allowed to be switched.",
                        "description": "Only protection groups are allowed to be switched.",
                        "value": "boolean(//protection-group[. = current()])"
                    }
                },
                "operation-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "force": {
                                "value": "1",
                                "description": "Forced switch to a target, e.g. working or protection."
                            }
                        },
                        {
                            "lockout": {
                                "value": "2",
                                "description": "Lockout of protection."
                            }
                        },
                        {
                            "manual": {
                                "value": "3",
                                "description": "Manual switch to a target, e.g. working or protection."
                            }
                        },
                        {
                            "clear": {
                                "value": "4",
                                "description": "clear current command."
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "The type of protection switch command"
                },
                "switch-target": {
                    "yangType": "leaf",
                    "when": "(../operation-type != 'lockout') and (../operation-type != 'clear')",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "working": {
                                "value": "1"
                            }
                        },
                        {
                            "protection": {
                                "value": "2"
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "The target of the switch command, which is not needed for release and lockout operation."
                }
            }
        },
        "no-op": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "No operation - used for session keep-alive.",
                "user-class": "-w:*",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            }
        },
        "default": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Assign default values to the specified attributes",
                "edit-condition": {
                    "error-message": "entity-id must be config true",
                    "value": "not(deref(entity-id)/@config = false())"
                },
                "user-class": "-w:*",
                "requires-confirmation": "Are you sure? [y/n] "
            },
            "input": {
                "entity-id": {
                    "yangType": "leaf-list",
                    "type": "instance-identifier",
                    "min-elements": "1",
                    "description": "Instances to be defaulted.",
                    "discover-values": "//*[@config = true()]"
                }
            }
        },
        "clear-file": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Clears file in the system.",
                "user-class": "-w:NA,NE",
                "cli-hidden": "true"
            },
            "input": {
                "filetype": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "database": {
                                "value": "1",
                                "description": "Database"
                            }
                        },
                        {
                            "swimage": {
                                "value": "2",
                                "description": "SW Image"
                            }
                        },
                        {
                            "krp": {
                                "value": "3",
                                "description": "Key replacement package (KRP)"
                            }
                        },
                        {
                            "script": {
                                "value": "5",
                                "description": " Scripts to download from the remote Server"
                            }
                        },
                        {
                            "debug-log": {
                                "value": "6",
                                "description": "Debug Logs"
                            }
                        },
                        {
                            "pm-logs": {
                                "value": "7",
                                "description": "PM Logs"
                            }
                        },
                        {
                            "local-certificate": {
                                "value": "8",
                                "description": "PKCS#12 bundle that contains x509v3 local certificate + password protected private key"
                            }
                        },
                        {
                            "trusted-certificate": {
                                "value": "9",
                                "description": "PKCS#7 bundle that contains x509v3 trusted certificate(Root or Intermediate CA)"
                            }
                        },
                        {
                            "fdr-log": {
                                "value": "10",
                                "description": "Flight Data Recorder(FDR) Logs"
                            }
                        },
                        {
                            "logs": {
                                "value": "11",
                                "description": "Specific logs"
                            }
                        },
                        {
                            "file": {
                                "value": "12",
                                "description": "Generic file"
                            }
                        },
                        {
                            "peer-certificate": {
                                "value": "13",
                                "description": "PKCS#12 bundle that contains x509v3 peer certificate + password protected private key"
                            }
                        }
                    ],
                    "description": "Predefined filetype available for clearing the file",
                    "mandatory": "true",
                    "user-class": "swimage:NA script:NA",
                    "edit-condition": {
                        "error-message": "filetype not supported",
                        "description": "List of supported file types that can be cleared.",
                        "value": ". = ('script', 'swimage', 'krp')"
                    }
                },
                "target-file": {
                    "yangType": "leaf",
                    "when": "../filetype != 'krp'",
                    "type": "string",
                    "mandatory": "true",
                    "description": "Filepath of the file to be deleted",
                    "discover-values": "$target-files",
                    "edit-condition": [
                        {
                            "error-message": {
                                "value": "target-file must match an existing $1 file."
                            },
                            "value": "autocomplete() or . = $target-files"
                        },
                        {
                            "error-message": "Cannot clear active manifest file",
                            "value": "if(../filetype = 'swimage') then (not(. = concat(string(/ne/system/sw-management/software-load[swload-state='active']/swload-label),'.','manifest'))\n                                                                        and not (. = concat(string(/ne/system/sw-management/software-load[swload-state='active']/swload-delta-label),'.','manifest'))\n                                                                            and not (. = $third-party-files))\n                                    else true()"
                        }
                    ]
                }
            },
            "output": {
                "clear-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the clear operation"
                }
            }
        },
        "clear-app": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows to clear 3rd party app.",
                "user-class": "-w:NA",
                "cli-hidden": "true",
                "requires-confirmation": "This operation will uninstall the app given at input. Are you sure? [y/n] "
            },
            "input": {
                "app-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:sw-management/ioa-ne:third-party-app/ioa-ne:app-name",
                    "mandatory": "true",
                    "description": "Third party app name."
                }
            }
        },
        "clear-database": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Sets NE to default by deleting the system database.\n                     This request will wipe the whole DB, and reboot the system.",
                "user-class": "-w:NA",
                "requires-confirmation": "This operation will reboot the system, delete the entire system configuration, including networking details, and may leave the system unreachable. \\nDo you want to proceed? [y/n] ",
                "cli-hidden": "true"
            },
            "input": {
                "clear-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "full": {
                                "value": "2",
                                "description": "Full wipe of DB contents; reset to factory defaults"
                            }
                        }
                    ],
                    "default": "full",
                    "description": "Defines the type of 'clear database' that the system must do."
                }
            }
        },
        "clear-certificate": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Deletes an already imported X509v3 trusted/local/peer certificate.",
                "user-class": "-w:SA",
                "cli-hidden": "true"
            },
            "input": {
                "type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "trusted": {
                                "value": "1",
                                "description": "Deletes a trusted certificate."
                            }
                        },
                        {
                            "peer": {
                                "value": "2",
                                "description": "Deletes a peer certificate."
                            }
                        },
                        {
                            "local": {
                                "value": "3",
                                "description": "Deletes a local certificate."
                            }
                        }
                    ],
                    "default": "local",
                    "description": "Defines the type of 'clear certificate' that the system must do."
                },
                "id": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..128",
                    "pattern": [
                        "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                    ],
                    "description": "Foreign Key pointing to the id of the certificate to delete.",
                    "mandatory": "true",
                    "discover-values": "/ne/system/security/certificates/trusted-certificate/id | /ne/system/security/certificates/local-certificate/id | /ne/system/security/certificates/peer-certificate/id",
                    "edit-condition": [
                        {
                            "error-message": "Cannot clear this certificate as it is currently in use.",
                            "value": "(../type = 'trusted') or\n                                    (../type = 'local' and (not(/ne/system/security/certificates/local-certificate[id=current()]/status = 'in-use'))) or\n                                    (../type = 'peer' and (not(/ne/system/security/certificates/peer-certificate[id=current()]/status = 'in-use')))"
                        },
                        {
                            "error-message": {
                                "value": "Certificate with id '$1' doesn't exist."
                            },
                            "value": "(../type = 'trusted' and boolean(/ne/system/security/certificates/trusted-certificate[id=current()])) or\n                                    (../type = 'local' and boolean(/ne/system/security/certificates/local-certificate[id=current()])) or\n                                    (../type = 'peer' and boolean(/ne/system/security/certificates/peer-certificate[id=current()]))"
                        }
                    ]
                }
            }
        },
        "ssh-keygen": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Regenerates existing public/private host key pair for the NE's SSH based applications.\n             NOTE: The on-going SSH sessions could be disconnected if the host key in use is regenerated.",
                "user-class": "-w:SA",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "key-length": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "2048": {
                                "value": "1"
                            }
                        },
                        {
                            "3072": {
                                "value": "2"
                            }
                        },
                        {
                            "4096": {
                                "value": "3"
                            }
                        },
                        {
                            "256": {
                                "value": "4"
                            }
                        },
                        {
                            "384": {
                                "value": "5"
                            }
                        },
                        {
                            "521": {
                                "value": "6"
                            }
                        }
                    ],
                    "default": "2048",
                    "description": "Strength of the key used for regenerating the private-public key pair",
                    "option": "b",
                    "edit-condition": [
                        {
                            "error-message": "RSA only supports key length of 2048, 3072 or 4096 bits",
                            "value": "if (../key-type = 'rsa' and $secure-mode-val=false()) then\n                         . = ('2048','3072','4096')\n                     else\n                         true()"
                        },
                        {
                            "error-message": "ECDSA only supports key length of 256, 384 or 521 bits",
                            "value": "if (../key-type = 'ecdsa' and $secure-mode-val=false()) then\n                         . = ('256','384','521')\n                     else\n                         true()"
                        },
                        {
                            "error-message": "Secure mode is ON. RSA only supports key length of 4096 bits.",
                            "value": "if ($secure-mode-val=true()\n                          and (not(newvalue(../key-type)) or newvalue(../key-type)='rsa')) then\n                         . = ('4096')\n                     else\n                         true()"
                        },
                        {
                            "error-message": "Secure mode is ON. In this mode, ECDSA only supports key length of 384 or 521 bits.",
                            "value": "if ($secure-mode-val=true()\n                          and newvalue(../key-type)='ecdsa') then\n                         . = ('384','521')\n                     else\n                         true()"
                        }
                    ]
                },
                "key-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "rsa": {
                                "value": "1"
                            }
                        },
                        {
                            "ecdsa": {
                                "value": "2"
                            }
                        }
                    ],
                    "description": "Type of key to generate",
                    "default": "rsa",
                    "option": "t"
                },
                "key-label": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..255",
                    "description": "Label associated with the key. If no value provided, label will be the value of ne-id",
                    "option": "l"
                }
            }
        },
        "cert-gen": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Generates a self-signed certificate.",
                "user-class": "-w:SA",
                "cli-hidden-mode": "candidate",
                "requires-confirmation": [
                    {
                        "when": "//local-certificate/id = current()/certificate-name",
                        "description": "Existing certificate with the specified certificate-name will be overwritten! Are you sure? [y/n] "
                    },
                    {
                        "when": "current()/auto-install = 'true'",
                        "description": "This certificate will be auto-assigned to any secure-application without an active certificate.\n                                       Self-signed certificates are not verified by any Certificate Authority and do not offer the same\n                                       security as certificates issued by a trusted CA.\n                                       Are you sure you want to continue? [y/n] "
                    }
                ],
                "edit-condition": {
                    "error-message": "Cannot have more than 100 certificates system-wide. Please delete unneeded certificates.",
                    "description": "Ensure that the maximum number of certificates is less than 100.",
                    "value": "//local-certificate/id = current()/certificate-name\n                            or\n                            (count(//local-certificate) + count(//trusted-certificate) + count (//peer-certificate)) < 100"
                }
            },
            "input": {
                "certificate-name": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..128",
                    "pattern": [
                        "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                    ],
                    "description": "Specifies the name of the certificate to be generated.",
                    "mandatory": "true"
                },
                "days": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "1..36525",
                    "default": "365",
                    "description": "Number of days a certificate is valid for."
                },
                "org-name": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..64",
                    "default": "Infinera",
                    "description": "Organization Name."
                },
                "common-name": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "1..64",
                    "default": "Infinera",
                    "description": "IP or hostname to identify the server."
                },
                "auto-install": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "default": "true",
                    "description": "Auto-assign certificate to any secure-application without active certificate."
                }
            },
            "output": {
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..256",
                    "description": "Output status of the self-sign process."
                }
            }
        },
        "diff": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Performs a diff between the candidate and current configurations.\n            Provides output as a list a differences. By using the table-view parameter, the output is displayed\n            in table format, for northbound protocols that support such visualization.",
                "user-class": "-w:*",
                "allow-in-lock": "true",
                "cli-hidden-mode": "normal",
                "display": "diff"
            },
            "input": {
                "candidate": {
                    "yangType": "leaf",
                    "if-feature": "candidate",
                    "type": "empty",
                    "mandatory": "true",
                    "description": "The candidate datastore configuration."
                }
            },
            "output": {
                "differences": {
                    "yangType": "anyxml",
                    "description": "\n                    List of differences between the rollback point and the current system configuration.\n                    Is composedsubset that matches the running datastore hierarchy, annotated with two metadata attributes:\n                    - old-value, which in case of attribute value changes, represents the old value of the attribute.\n                    - operation, which represent MO creation and deletion in the context of the diff\n                    Both old-value and operation are metadata annotations in accordance to RFC7952, and are qualified with the\n                    same namespace as the datastore they are related with.\n                    As such, these annotations will be encoded in XML/JSON in accordance to RFC7952."
                }
            }
        },
        "cli-command": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Runs one or more CLI commands via YANG RPC.\n                     Note: Execution is synchronous, so executing long scripts may take a while.\n                           Please consider than when selecting the timeout for this RPC.",
                "user-class": "-w:*",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "source": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "The source of the CLI commands to execute: a script, or an RPC input",
                    "script-file": {
                        "yangType": "leaf",
                        "type": "string",
                        "description": "The filepath of the previously downloaded CLI script"
                    },
                    "commands": {
                        "yangType": "leaf",
                        "type": "string",
                        "length": "1..2048",
                        "description": "CLI commands to execute; multiple commands can be provided, one per line"
                    }
                },
                "echo": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "on": {
                                "value": "1"
                            }
                        },
                        {
                            "off": {
                                "value": "2"
                            }
                        }
                    ],
                    "default": "on",
                    "description": "If echo on, result includes commands and their output;\n                              otherwise it will only include the commands output"
                },
                "error-option": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "stop-on-error": {
                                "value": "1",
                                "description": "The server will stop on errors."
                            }
                        },
                        {
                            "continue-on-error": {
                                "value": "2",
                                "description": "The server may continue on errors."
                            }
                        },
                        {
                            "rollback-on-error": {
                                "value": "3",
                                "description": "The server will roll back on errors (all-or-nothing behavior)"
                            }
                        }
                    ],
                    "default": "if (../replace = true()) then\n                                        'rollback-on-error'\n                                    else\n                                        'continue-on-error'",
                    "description": "How the command execution should behave when errors occur.",
                    "edit-condition": {
                        "error-message": "This error option is not allowed with the current replace value.",
                        "value": ". = seq($possible-error-option)"
                    }
                },
                "replace": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "default": "false",
                    "description": "If true, it tries to push the entire script/commands as a replace operation"
                }
            },
            "output": {
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Output of the CLI script"
                },
                "error-location": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "description": "Line number that locates the command that caused the error.\n                             If no error occurred, this output parameter is omitted.\n                             If multiple errors occur, show only the first command that caused the error."
                }
            }
        },
        "install-krp": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Install key replacement package (KRP)",
                "user-class": "-w:SA",
                "cli-hidden": "true"
            },
            "input": {
                "krp-name": {
                    "yangType": "leaf",
                    "type": "string",
                    "mandatory": "true",
                    "description": "Key replacement package name"
                }
            },
            "output": {
                "install-krp-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the install-krp operation"
                }
            }
        },
        "delete-isk": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Delete Image Signing Key (ISK) from the system",
                "user-class": "-w:SA",
                "requires-confirmation": "This operation will delete the selected Image Signing Key (ISK). Are you sure? [y/n] ",
                "cli-hidden": "true"
            },
            "input": {
                "key-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:security/ioa-ne:image-keys/ioa-ne:ISKs/ioa-ne:ISK/ioa-ne:key-name",
                    "mandatory": "true",
                    "description": "Image Signing Key (ISK) name",
                    "discover-values": "//ISK/key-name"
                }
            },
            "output": {
                "delete-isk-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the delete-isk operation"
                }
            }
        },
        "get-log": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Generic Log reader, that provides log content as a response.",
                "user-class": "-w:*",
                "allow-in-lock": "true",
                "cli-hidden": "true",
                "exec": {
                    "value": "/opt/infinera/thanos/local/bin/get_log.sh /tmp/get-log $1 $2 $3 -n $4 $5",
                    "exec-output": "log-entries"
                }
            },
            "input": {
                "log-file-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:syslog/ioa-ne:log-file/ioa-ne:name",
                    "mandatory": "true",
                    "description": "The log file to read; must match a currently configured log-file."
                },
                "start-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Returns log entries starting from this timestamp.\n                             If not provided, consider the oldest available logs."
                },
                "end-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Returns log entries ending at this timestamp.\n                             If not provided, consider all the logs until the most recent timestamp."
                },
                "number-of-entries": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "all": {
                                        "value": "1"
                                    }
                                },
                                {
                                    "all-since-last-reboot": {
                                        "value": "2"
                                    }
                                }
                            ]
                        },
                        {
                            "type": "uint32"
                        }
                    ],
                    "default": "500",
                    "description": "Describes the amount of log entries that are to be returned.",
                    "option": "n"
                },
                "pattern-match": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Allows to provide a regex that filters log entries."
                }
            },
            "output": {
                "log-entries": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "The resulting log entries."
                }
            }
        },
        "clear-log": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows to clear the content of a log file",
                "user-class": "-w:NA,NE",
                "requires-confirmation": {
                    "when": "boolean(//log-file[name=string(current()/log-file-name)])",
                    "description": "This operation will clear the entire log filename given at input. Are you sure? [y/n] "
                },
                "cli-hidden": "true"
            },
            "input": {
                "log-file-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:syslog/ioa-ne:log-file/ioa-ne:name",
                    "mandatory": "true",
                    "description": "The log file to clear; file will still exist, but with empty content."
                }
            }
        },
        "change-ztp-mode": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Enable/disable ztp-mode and optionally reset the configuration database to factory default.",
                "user-class": "-w:SA",
                "cli-hidden-mode": "candidate",
                "allow-in-lock": "true",
                "requires-confirmation": {
                    "when": "ztp-mode = 'enabled'",
                    "description": "This will reset the configuration database to factory default, potentially affecting services. Do you want to continue? [y/n] "
                }
            },
            "input": {
                "ztp-mode": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "disabled": {
                                "value": "0"
                            }
                        },
                        {
                            "enabled": {
                                "value": "1"
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "Selects new ztp mode.",
                    "notice": [
                        {
                            "when": ". = 'disabled' and /ne/system/ztp/ztp-state=('image-download-in-progress','configuration-apply-in-progress','ztp-disable-in-progress','custom-script-execution-in-progress')",
                            "description": "ZTP step ongoing, will only be aborted after step is finished.\\nPlease use 'show ztp' to check ztp status"
                        },
                        {
                            "when": ". = 'disabled' and /ne/system/ztp/ztp-state='image-install-in-progress'",
                            "description": "Image install is in progress which can't be aborted. Ztp will be disabled if image installation fails.\\nPlease use 'show ztp' command to check ztp status"
                        }
                    ]
                }
            }
        },
        "enable-led": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Enables a location led test in a chassis or a card.",
                "user-class": "-w:NA,NE",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "entity": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Targets a specific entity in the system for enabling its location led test.\n                             Can be a chassis or a card.",
                    "discover-values": "/ne/equipment/chassis | /ne/equipment/card",
                    "edit-condition": [
                        "if (deref(.) = /ne/equipment/card) then\n                                        /ne/system-capabilities/equipment-capabilities/supported-card[card-type=deref(current())/required-type]/location-led-support = 'true'\n                                    else\n                                        true()",
                        {
                            "error-message": "Invalid entity.",
                            "value": "deref(.) = /ne/equipment/chassis or deref(.) = /ne/equipment/card"
                        }
                    ]
                },
                "timeout": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "0..120",
                    "units": "seconds",
                    "default": "0",
                    "description": "Specify the timeout, in seconds, before enable-led terminates.\n                             0 means no timeout."
                },
                "led-mode": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "flash": {
                                "value": "0",
                                "description": "Led color flashing."
                            }
                        },
                        {
                            "solid": {
                                "value": "1",
                                "description": "Led color solid."
                            }
                        }
                    ],
                    "default": "flash",
                    "description": "Selects the led flash pattern."
                }
            }
        },
        "disable-led": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Disables any LED test that was initiated with the enable-led command.",
                "user-class": "-w:NA,NE",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "entity": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Targets a specific entity in the system for having its location led test disabled.\n                             Can be a chassis or a card.",
                    "discover-values": "/ne/equipment/chassis | /ne/equipment/card",
                    "edit-condition": [
                        "if (deref(.) = /ne/equipment/card) then\n                                        /ne/system-capabilities/equipment-capabilities/supported-card[card-type=deref(current())/required-type]/location-led-support = 'true'\n                                    else\n                                        true()",
                        {
                            "error-message": "Invalid entity.",
                            "value": "deref(.) = /ne/equipment/chassis or deref(.) = /ne/equipment/card"
                        }
                    ]
                }
            }
        },
        "simulate": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Generic command that triggers simulated events in the system (alarms, equipment, etc)",
                "edit-condition": [
                    {
                        "error-message": "Unknown equipment holder AID. Must be a slot or a TOM supporting port AID.",
                        "value": "if (trigger = ('plug-in-fru', 'plug-out-fru')) then\n                                   $is-card or $is-tom\n                                else true()"
                    },
                    {
                        "error-message": "No equipment using this slot or port.",
                        "value": "if (trigger = 'plug-out-fru') then\n                                   ($is-card and $is-slot-ocupied) or ($is-tom and $is-port-ocupied)\n                                else true() "
                    },
                    {
                        "error-message": "Equipment already using this slot or port.",
                        "value": "if (trigger = 'plug-in-fru') then\n                                   ($is-card and not($is-slot-ocupied)) or ($is-tom and not($is-port-ocupied))\n                                else true() "
                    }
                ],
                "user-class": "-w:NA,NE",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "trigger": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "plug-in-fru": {
                                "value": "3"
                            }
                        },
                        {
                            "plug-out-fru": {
                                "value": "4"
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "The alarm event trigger to simulate."
                },
                "simulation-type": {
                    "yangType": "choice",
                    "equipment": {
                        "yangType": "case",
                        "holder-AID": {
                            "yangType": "leaf",
                            "type": "string",
                            "length": "1..64",
                            "mandatory": "true",
                            "description": "AID of the equipment holder (slot or port) where the equipment will be simulated.",
                            "discover-values": "/ne/equipment/chassis/slot/AID | /ne/equipment/card/port[count(seq(supported-type)) > 0]/AID"
                        },
                        "type": {
                            "yangType": "leaf",
                            "type": "string",
                            "mandatory": "true",
                            "description": "The type of the equipment to be simulated.",
                            "when": "boolean(current()/../trigger = 'plug-in-fru')"
                        },
                        "subtype": {
                            "yangType": "leaf",
                            "type": "string",
                            "description": "The subtype of the equipment to be simulated.",
                            "when": "boolean(current()/../trigger = 'plug-in-fru')",
                            "discover-values": "seq(($simulate-subtypes))"
                        }
                    },
                    "mandatory": "true"
                }
            }
        },
        "restart": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Restarts a specific resource of the system.\n                     Supports restarting of:\n                     - card\n                     - card sub-component (e.g. DCO)\n                     - tom",
                "notice": {
                    "when": "$is-controller-card and $resource-value/controller-card/redundancy-status = 'active' and\n                        ($resource-value/../card[chassis-name = string($resource-value/chassis-name)]/controller-card[redundancy-status = 'standby' and redundancy-standby-status = 'ready-synchronized'])",
                    "description": "Controller will switchover and connection to the management interface will be temporarily lost."
                },
                "user-class": "-w:NA,NE",
                "requires-confirmation": [
                    {
                        "when": "boolean(/ne/system/sw-management/software-load\n                            [((swload-state = 'installable') and\n                                (swload-status =\n                                    ('validate-in-progress', 'apply-in-progress', 'activate-in-progress', 'cancel-in-progress')))])\n                        or boolean(resource = /ne/equipment/card[category = ('controller','line-card')] and\n                            (/ne/system/sw-management/software-location[location-id=deref(resource)/AID]/software-load\n                                [((swload-state = 'installable') and\n                                    (swload-status =\n                                        ('validate-in-progress', 'apply-in-progress', 'activate-in-progress', 'cancel-in-progress')))]))",
                        "description": "Warning: system is currently performing an upgrade procedure. Any reboot in this scenario might disrupt the upgrade. \\nAre you sure you want to proceed? [y/n]"
                    },
                    {
                        "description": "if ((if(boolean(newvalue(resource))) then\n                                        deref(resource)\n                                   else\n                                        /ne/equipment/card[chassis-name=/ne/node-controller-chassis-name]\n                                                       [category='controller']\n                                                       [controller-card/redundancy-status = 'active'] = /ne/equipment/card[category = 'controller']) and $resource-value/controller-card/redundancy-status = 'active' and\n                          ($resource-value/../card[chassis-name = string($resource-value/chassis-name)]/controller-card[redundancy-status = 'not-in-service' and redundancy-standby-status != ('ready-synchronized', 'card-not-present')]) and type != 'shutdown') then\n                          'Standby controller card is not ready to take over! Do you want to continue? [y/n]'\n                        else if ($is-controller-card and $resource-value/controller-card/redundancy-status = 'active' and\n                          ($resource-value/../card[chassis-name = string($resource-value/chassis-name)]/controller-card[redundancy-status = 'not-in-service' and redundancy-standby-status != ('ready-synchronized', 'card-not-present')]) and type = 'shutdown') then\n                          'Standby controller card is not ready to take over! System may enter in a non-controller situation. Do you want to continue? [y/n]'\n                        else if(($is-controller-card and $resource-value/controller-card/redundancy-status = 'active') or\n                            (not(newvalue(resource)))) then\n                            'System will reboot and will temporarily lose connectivity. Are you sure? [y/n] '\n                        else if(resource = /ne/equipment/card[category = ('line-card')]) then\n                            if(newvalue(sub-component)) then\n                                printf('Component %s will restart, which may have traffic impact. Are you sure? [y/n] ', ./sub-component)\n                            else\n                                if(type = 'warm') then 'Card will reboot and will be temporarily unreachable. Are you sure? [y/n] '\n                                else if(type = 'cold') then 'Card will do a cold start, which may have traffic impact. Are you sure? [y/n] '\n                                else 'Card will shutdown, which may have traffic impact. Are you sure? [y/n] '\n                        else if(resource = /ne/equipment/card/port/tom) then\n                                'TOM will restart, which may have traffic impact. Are you sure? [y/n] '\n                        else\n                            'Are you sure? [y/n] '"
                    }
                ],
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "resource": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "description": "Resource to restart.\n                             If not provided, by default restarts the node controller.",
                    "discover-values": "/ne/equipment/card[category = ('line-card', 'controller')] | /ne/equipment/card/port/tom",
                    "edit-condition": [
                        {
                            "error-message": "Invalid resource - invalid FRU or FRU not present.",
                            "value": "if ($is-card) then\n                                        boolean(/ne/equipment/chassis[name=deref(current())/chassis-name]/slot[name=deref(current())/slot-name]/inventory)\n                               else if ($is-tom) then\n                                        boolean(deref(.)/../inventory)\n                               else false()"
                        },
                        {
                            "error-message": "TOMs can not be restarted during firmware upgrade.",
                            "description": "Requests for TOM restart should be rejected if that TOM is in the middle of a firmware upgrade.",
                            "value": "if ($is-tom) then\n                                        not(. = /ne/equipment/card/port/tom[upgrade-status = ('in-progress')])\n                                    else\n                                        true()"
                        }
                    ]
                },
                "type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "warm": {
                                "value": "1",
                                "description": "Warm starts a FRU"
                            }
                        },
                        {
                            "cold": {
                                "value": "2",
                                "description": "Cold reboots a FRU."
                            }
                        },
                        {
                            "shutdown": {
                                "value": "3",
                                "description": "Shuts down a FRU for controlled removal."
                            }
                        }
                    ],
                    "default": "warm",
                    "description": "Restart type",
                    "edit-condition": [
                        {
                            "error-message": {
                                "value": "This card doesn't support $1 restart type."
                            },
                            "value": " if ($is-card and . = ('warm', 'shutdown')) then\n                                        deref(../resource)/category = ('controller', 'line-card')\n                                     else\n                                        true()"
                        },
                        {
                            "error-message": "TOMs only support cold start.",
                            "value": "if ($is-tom) then\n                                        . = 'cold'\n                                    else\n                                        true()"
                        }
                    ]
                },
                "sub-component": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Allows to target a card sub-component to restart.",
                    "discover-values": "seq(deref(../resource)/resources/supported-sub-components)",
                    "edit-condition": [
                        {
                            "error-message": {
                                "value": "Unknown sub-component $1 in $2."
                            },
                            "value": "string(.) = '' or string(.) = seq(deref(../resource)/resources/supported-sub-components)"
                        },
                        {
                            "error-message": "Sub-components only support warm or cold start.",
                            "value": "string(.) = '' or ../type = ('warm', 'cold')"
                        }
                    ]
                }
            }
        },
        "ping": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Sends an echo message to another TCP/IP node to determine if the node is visible on the network.",
                "user-class": "-w:NA,PR,TT",
                "allow-in-lock": "true"
            },
            "input": {
                "ping-count": {
                    "yangType": "leaf",
                    "type": "uint8",
                    "range": "1..100",
                    "default": "4",
                    "description": "Stops after sending 'count' ECHO_REQUEST packets.",
                    "option": "c"
                },
                "ping-timeout": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "1..20",
                    "units": "seconds",
                    "default": "2",
                    "description": "Specify the timeout, in seconds, before ping exits.",
                    "option": "w"
                },
                "ping-pktsize": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "units": "bytes",
                    "default": "56",
                    "description": "Specifies the number of bytes to be sent. Default is 56, exclusive of headers.",
                    "option": "s"
                },
                "ping-dest": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "string",
                            "pattern": [
                                "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                            ],
                            "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                        },
                        {
                            "type": "string",
                            "pattern": [
                                "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                                "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                            ],
                            "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                        },
                        {
                            "type": "string",
                            "length": "1..253",
                            "pattern": [
                                "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                            ],
                            "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                        }
                    ],
                    "mandatory": "true",
                    "description": "IP address or FQDN of the destination node."
                },
                "source": {
                    "yangType": "choice",
                    "ping-interface": {
                        "yangType": "leaf",
                        "type": "leafref",
                        "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:networking/ioa-ne:interface/ioa-ne:if-name",
                        "description": "Specify source interface name",
                        "option": "i"
                    },
                    "ping-vrf": {
                        "yangType": "leaf",
                        "type": "string",
                        "default": "MGMT",
                        "description": "VRF to use. If not provided, defaults to MGMT.",
                        "option": "v",
                        "discover-values": "$ping-vrf-val",
                        "edit-condition": {
                            "error-message": "Invalid VRF.",
                            "value": ". = $ping-vrf-val"
                        }
                    }
                }
            },
            "output": {
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of ping."
                }
            }
        },
        "traceroute": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Tracks the route packets take from an IP network on their way to a given host",
                "user-class": "-w:NA,PR,TT",
                "allow-in-lock": "true"
            },
            "input": {
                "tr-hopcnt": {
                    "yangType": "leaf",
                    "type": "uint8",
                    "range": "1..255",
                    "default": "30",
                    "description": "Specifies the maximum number of hops (max time-to-live value) traceroute will probe. The default is 10.",
                    "option": "m"
                },
                "tr-timeout": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "range": "1..10",
                    "units": "seconds",
                    "default": "2",
                    "description": "Specify the timeout, in seconds, before trace route exits.",
                    "option": "w"
                },
                "tr-dest": {
                    "yangType": "leaf",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "string",
                            "pattern": [
                                "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                            ],
                            "description": "The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format"
                        },
                        {
                            "type": "string",
                            "pattern": [
                                "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?",
                                "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                            ],
                            "description": "The ipv6-address type represents an IPv6 address in full,\n      mixed, shortened, and shortened-mixed notation.  The IPv6\n      address may include a zone index, separated by a % sign. \n\n      The zone index is used to disambiguate identical address\n      values.  For link-local addresses, the zone index will\n      typically be the interface index number or the name of an\n      interface.  If the zone index is not present, the default\n      zone of the device will be used.\n\n\n\n      The canonical format of IPv6 addresses uses the textual\n      representation defined in Section 4 of RFC 5952.  The\n      canonical format for the zone index is the numerical\n      format as described in Section 11.2 of RFC 4007."
                        },
                        {
                            "type": "string",
                            "length": "1..253",
                            "pattern": [
                                "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
                            ],
                            "description": "The domain-name type represents a DNS domain name.  The\n      name SHOULD be fully qualified whenever possible. \n\n      Internet domain names are only loosely specified.  Section\n      3.5 of RFC 1034 recommends a syntax (modified in Section\n      2.1 of RFC 1123).  The pattern above is intended to allow\n      for current practice in domain name use, and some possible\n      future expansion.  It is designed to hold various types of\n      domain names, including names used for A or AAAA records\n      (host names) and other records, such as SRV records.  Note\n      that Internet host names have a stricter syntax (described\n      in RFC 952) than the DNS recommendations in RFCs 1034 and\n      1123, and that systems that want to store host names in\n      schema nodes using the domain-name type are recommended to\n      adhere to this stricter standard to ensure interoperability.\n\n      The encoding of DNS names in the DNS protocol is limited\n      to 255 characters.  Since the encoding consists of labels\n      prefixed by a length bytes and there is a trailing NULL\n      byte, only 253 characters can appear in the textual dotted\n      notation.\n\n      The description clause of schema nodes using the domain-name\n      type MUST describe when and how these names are resolved to\n      IP addresses.  Note that the resolution of a domain-name value\n      may require to query multiple DNS records (e.g., A for IPv4\n      and AAAA for IPv6).  The order of the resolution process and\n      which DNS record takes precedence can either be defined\n      explicitly or may depend on the configuration of the\n      resolver.\n\n      Domain-name values use the US-ASCII encoding.  Their canonical\n      format uses lowercase US-ASCII characters.  Internationalized\n      domain names MUST be A-labels as per RFC 5890."
                        }
                    ],
                    "mandatory": "true",
                    "description": "IPv4/v6 address or FQDN of the destination node."
                },
                "tr-pktsize": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "units": "bytes",
                    "default": "60",
                    "description": "Specifies the total  size  of  the  probing packet (default 60 bytes for IPv4)."
                },
                "source": {
                    "yangType": "choice",
                    "tr-interface": {
                        "yangType": "leaf",
                        "type": "leafref",
                        "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:networking/ioa-ne:interface/ioa-ne:if-name",
                        "description": "Specify source interface name",
                        "option": "i"
                    },
                    "tr-vrf": {
                        "yangType": "leaf",
                        "type": "string",
                        "default": "MGMT",
                        "description": "VRF to use. If not provided, defaults to MGMT.",
                        "option": "v",
                        "discover-values": "$tr-vrf-val",
                        "edit-condition": {
                            "error-message": "Invalid VRF.",
                            "value": ". = $tr-vrf-val"
                        }
                    }
                }
            },
            "output": {
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of trace route."
                }
            }
        },
        "clear-ospf-instance": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "This RPC request restarts the OSPF instance.",
                "user-class": "-w:NA,PR,TT",
                "requires-confirmation": "This operation will clean the routing data of the given ospf. Are you sure? [y/n] ",
                "cli-hidden": "true"
            },
            "input": {
                "instance": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:networking/ioa-ne:routing/ioa-ne:ospf-instance/ioa-ne:instance-id",
                    "mandatory": "true",
                    "description": "OSPF protocol instance which need to be re-started.",
                    "discover-values": "//ospf-instance/instance-id"
                }
            }
        },
        "clear-topology": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows manual removal of existing topology neighbor information.",
                "user-class": "-w:NA,PR,TT",
                "requires-confirmation": "Selected target information will be removed. Are you sure? [y/n] ",
                "cli-hidden": "true"
            },
            "input": {
                "target": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Target instance to be cleared. May be a lldp-neighbor, a carrier-neighbor or a lldp-port-statistics instance.",
                    "discover-values": "/ne/topology/lldp/lldp-neighbor | /ne/topology/icdp/carrier-neighbor\n                                        | /ne/topology/lldp/lldp-port-statistics",
                    "edit-condition": {
                        "error-message": "Invalid neighbor id.",
                        "value": ". = /ne/topology/lldp/lldp-neighbor or\n                                    . = /ne/topology/icdp/carrier-neighbor or\n                                    . = /ne/topology/lldp/lldp-port-statistics"
                    }
                }
            }
        },
        "clear-system": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Wipes the system/specific instance and reset to the factory configurations.",
                "user-class": "-w:NA",
                "requires-confirmation": [
                    {
                        "when": "./type='factory-reset'",
                        "description": "This command will stop target traffic services and remove respective files and user configurations.\nThis may imply loss of connectivity.\nAre you sure you want to proceed? [y/n] "
                    },
                    {
                        "when": "./type='full-wipe'",
                        "description": "This command will stop all traffic services, remove all files, configurations and software from the system.\nThis operation implies loss of connectivity.\nA base software reinstall from ONIE is required to recover the system.\nAre you sure you want to proceed? [y/n] "
                    },
                    {
                        "when": "./type='inactive'",
                        "description": "This command will clear the inactive partition.\nAre you sure you want to proceed? [y/n] "
                    }
                ],
                "cli-hidden": "true"
            },
            "input": {
                "type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "factory-reset": {
                                "value": "1",
                                "description": "Reset the system or a particular equipment to factory configuration."
                            }
                        },
                        {
                            "full-wipe": {
                                "value": "2",
                                "description": "Clean the entire system and reinstall the SW on the controller and the line-cards."
                            }
                        },
                        {
                            "inactive": {
                                "value": "3",
                                "description": "Clear the inactive software partition."
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "Clear system type."
                },
                "target": {
                    "yangType": "leaf",
                    "when": "../type = 'factory-reset' or ../type = 'full-wipe'",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "enumeration",
                            "enum-value": [
                                {
                                    "system": {
                                        "value": "1",
                                        "description": "Clean the entire system."
                                    }
                                }
                            ]
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": "system",
                    "description": "Entire system or chassis/card AID.",
                    "discover-values": "seq((seq(/ne/equipment/chassis/AID),\n                                          seq(/ne/equipment/card[category=('controller', 'line-card')]/AID), 'system'))",
                    "edit-condition": [
                        {
                            "error-message": "Insert a valid controller/line-card AID.",
                            "value": ".='system' or boolean(/ne/equipment/chassis[AID=.]) or\n                                    boolean(/ne/equipment/card[category=('controller', 'line-card')][AID=.])"
                        },
                        {
                            "error-message": "On full-wipe mode, only system is allowed as a target.",
                            "value": ".='system' or ../type='factory-reset'"
                        }
                    ]
                },
                "restart-behavior": {
                    "yangType": "leaf",
                    "when": "../type='factory-reset'",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "restart": {
                                "value": "1",
                                "description": "Restart the system after the clean."
                            }
                        },
                        {
                            "shutdown": {
                                "value": "2",
                                "description": "Shutdown the system after the clean."
                            }
                        }
                    ],
                    "default": "restart",
                    "description": "Action to do after the clean operation."
                },
                "action": {
                    "yangType": "leaf",
                    "when": "../type='inactive'",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "delete": {
                                "value": "1",
                                "description": "delete the partition."
                            }
                        }
                    ],
                    "default": "delete",
                    "description": "Action to clean the partition."
                }
            },
            "output": {
                "clear-system-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the clear system operation"
                }
            }
        },
        "download": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Transfers a file from an external location to the NE",
                "requires-confirmation": {
                    "when": "filetype = 'database' and unattended = true()",
                    "description": "This command may have traffic impact! Are you sure? [y/n] "
                },
                "user-class": "-w:NA,SA,NE",
                "cli-hidden-mode": "candidate",
                "notice": {
                    "when": "filetype = 'swimage' and count(/ne/system/sw-management/downloads/manifest) > $totalManifestFiles",
                    "description": "Stale packages exist in system. Please delete stale packages to avoid disk space errors!"
                }
            },
            "input": {
                "filetype": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "database": {
                                "value": "1",
                                "description": "Database"
                            }
                        },
                        {
                            "swimage": {
                                "value": "2",
                                "description": "SW Image"
                            }
                        },
                        {
                            "krp": {
                                "value": "3",
                                "description": "Key replacement package (KRP)"
                            }
                        },
                        {
                            "script": {
                                "value": "5",
                                "description": " Scripts to download from the remote Server"
                            }
                        },
                        {
                            "debug-log": {
                                "value": "6",
                                "description": "Debug Logs"
                            }
                        },
                        {
                            "pm-logs": {
                                "value": "7",
                                "description": "PM Logs"
                            }
                        },
                        {
                            "local-certificate": {
                                "value": "8",
                                "description": "PKCS#12 bundle that contains x509v3 local certificate + password protected private key"
                            }
                        },
                        {
                            "trusted-certificate": {
                                "value": "9",
                                "description": "PKCS#7 bundle that contains x509v3 trusted certificate(Root or Intermediate CA)"
                            }
                        },
                        {
                            "fdr-log": {
                                "value": "10",
                                "description": "Flight Data Recorder(FDR) Logs"
                            }
                        },
                        {
                            "logs": {
                                "value": "11",
                                "description": "Specific logs"
                            }
                        },
                        {
                            "file": {
                                "value": "12",
                                "description": "Generic file"
                            }
                        },
                        {
                            "peer-certificate": {
                                "value": "13",
                                "description": "PKCS#12 bundle that contains x509v3 peer certificate + password protected private key"
                            }
                        }
                    ],
                    "description": "Predefined filetype available for download",
                    "mandatory": "true",
                    "user-class": "swimage:NA script:NA database:NA local-certificate:SA peer-certificate:SA trusted-certificate:SA krp:SA",
                    "edit-condition": [
                        {
                            "error-message": "This file type is not valid for download operation",
                            "value": ". = ('database', 'krp', 'local-certificate','peer-certificate','trusted-certificate','script','swimage','file')"
                        },
                        {
                            "error-message": "Software download denied (upgrade is in progress). Please cancel current upgrade before starting a new download.",
                            "value": "if ( . = 'swimage') then not(/ne/system/sw-management/software-load[swload-state = 'installable']/swload-status =\n                                        ('validate-in-progress', 'apply-in-progress', 'activate-in-progress', 'cancel-in-progress'))\n                                    else\n                                        true()"
                        },
                        {
                            "error-message": "Cannot have more than 100 certificates system-wide. Please delete unneeded certificates.",
                            "description": "Ensure that the maximum number of certificates is less than 100.",
                            "value": "if (. = ('local-certificate', 'trusted-certificate', 'peer-certificate')) then\n                                        (count(//local-certificate) + count(//trusted-certificate) + count (//peer-certificate) < 100)\n                                    else\n                                        true()"
                        }
                    ]
                },
                "target": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "Download target may be an explicit URL, or may just reference a pre-configured file-server\n                             together with a path.",
                    "source": {
                        "yangType": "leaf",
                        "type": "string",
                        "length": "1..1024",
                        "pattern": [
                            "((ftp|sftp|scp|http|https|file):/)?/[^\\s/$.?#].[^\\s]*"
                        ],
                        "mandatory": "true",
                        "description": "Source of the download ([sftp|scp|http|https|ftp]://[user@]hostname/directorypath/filename)",
                        "edit-condition": [
                            {
                                "error-message": "Download via HTTP/FTP is currently disabled due to security policy.",
                                "description": "HTTP/FTP download only possible if secure-mode is disabled.",
                                "value": "if (starts-with(current(), 'http:') or starts-with(current(), 'ftp:')) then\n                            /ne/system/security/security-policies/secure-mode = 'false'\n                        else\n                            true()"
                            },
                            {
                                "error-message": "Cannot download to this usb-path.",
                                "value": "not(starts-with(current(), 'file:/'))\n                                        or not($existing-usb-path)\n                                        or boolean($existing-usb-path[not(contains(current(), .))])\n                                        or boolean(//usb[usb-path=$existing-usb-path[contains(current(), .)]]/../oper-state='enabled')"
                            }
                        ]
                    },
                    "file-server-based": {
                        "yangType": "case",
                        "file-server": {
                            "yangType": "leaf",
                            "type": "leafref",
                            "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:file-servers/ioa-ne:file-server/ioa-ne:name",
                            "mandatory": "true",
                            "description": "The preconfigured file-server name."
                        },
                        "path": {
                            "yangType": "leaf",
                            "type": "string",
                            "length": "0..512",
                            "mandatory": "true",
                            "description": "Path (directory and filename) of the remote file."
                        }
                    }
                },
                "passphrase": {
                    "yangType": "leaf",
                    "when": "../filetype = 'local-certificate' or ../filetype = 'peer-certificate'",
                    "type": "string",
                    "length": "1..1024",
                    "mandatory": "true",
                    "description": "To decode encrypted input files.",
                    "interactive": "PASSPHRASE: ",
                    "password": "true"
                },
                "white-listed": {
                    "yangType": "leaf",
                    "when": "../filetype = 'peer-certificate'",
                    "type": "boolean",
                    "default": "false",
                    "description": "If true, peer-certificate does not have an associated trust-chain. Else, has an associated trust-chain.",
                    "option": "w"
                },
                "certificate-name": {
                    "yangType": "leaf",
                    "when": "../filetype = 'local-certificate' or ../filetype = 'trusted-certificate' or ../filetype = 'peer-certificate'",
                    "type": "string",
                    "length": "1..128",
                    "pattern": [
                        "([A-Za-z0-9_.,/@][A-Za-z0-9_\\-.,/@]*)"
                    ],
                    "description": "X509v3 local/trusted/peer certificate id.",
                    "mandatory": "true",
                    "edit-condition": [
                        {
                            "error-message": "Certificate name already in use.",
                            "value": "not(. = (//local-certificate/id, //trusted-certificate/id, //peer-certificate/id))"
                        },
                        {
                            "error-message": "IDevID prefix is reserved for internal certificates.",
                            "value": "not(starts-with(. , 'IDevID-'))"
                        }
                    ]
                },
                "unattended": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "Auto prepare and auto activate file after a successful download.\n                     Only some files support 'activation'; others just ignore this flag.",
                    "option": "u"
                },
                "async": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "Download asynchronously.",
                    "option": "a"
                },
                "skip-secure-verification": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "For HTTPS transfers, skip TLS verification. For SCP/SFTP transfers, skip ssh known host checking.\n                             If flag not set, verification is done according with current security-policy.",
                    "user-class": "-w:SA",
                    "option": "s"
                },
                "sanity-check-override": {
                    "yangType": "leaf",
                    "when": "../filetype = 'database'",
                    "type": "boolean",
                    "default": "false",
                    "description": "If true, skips the sanity check override when downloading a database snapshot."
                },
                "destination": {
                    "yangType": "leaf",
                    "when": "../filetype = 'file'",
                    "type": "string",
                    "description": "Allows user to provide the destination for the downloaded file, including directory and/or filename.\n                            This is only applicable when file-type is 'file', representing a generic file transfer.\n                            The parameter can be:\n                            - omitted: means file is downloaded to the default directory with the original file-name\n                            - a file-name only: uses default directory with the new file-name\n                            - a relative path: uses the default directory as starting path, plus relative path\n                            - an absolute path: Absolute path for the user accessible directories can be used\n                            It is necessary for the user to have write access to the destination path for the download to succeed.\n                            Tip: use 'show transfer' to see what is the default storage directory.\n                            For generic file transfer, no further activity occurs after download, so the 'unattended' flag will be ignored.",
                    "edit-condition": {
                        "error-message": {
                            "value": "User is not able to write into $1."
                        },
                        "value": "exec(printf('cd %s; if stat $(dirname %s ) &> /dev/null ;\n                                    then test -w $(dirname %s ) && echo ok; elif stat $(dirname %s ) &> /dev/null;\n                                    then test -w $(dirname %s ) && echo nok ; fi', $dest-dir, current(), current(), current(), current())) = 'ok'"
                    }
                },
                "password": {
                    "yangType": "leaf",
                    "when": "starts-with(../source,'scp') or starts-with(../source,'sftp') or starts-with(../source,'ftp')",
                    "type": "string",
                    "length": "1..255",
                    "mandatory": "true",
                    "description": "SFTP/SCP password",
                    "interactive": "PASSWORD: ",
                    "password": "true"
                },
                "db-passphrase": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "[0-9a-zA-Z.\\-:+=^!/*?&<>()\\[\\]{}@%$#]*"
                    ],
                    "description": "Passphrase used for encrypting and decrypting DB snapshots.\n                         For each command associated with DB snapshots (backup, restore, etc),\n                         this db-passphrase will be used, except when it is directly provided in each command.\n                         Automatic DB snapshots will not be enabled until this parameter is set.",
                    "length": "40..200",
                    "when": "filetype = 'database'",
                    "password": "true"
                }
            },
            "output": {
                "download-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the download operation"
                }
            }
        },
        "upload": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Uploads files to remote server",
                "user-class": "-w:NA,NE,TT",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "filetype": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "database": {
                                "value": "1",
                                "description": "Database"
                            }
                        },
                        {
                            "swimage": {
                                "value": "2",
                                "description": "SW Image"
                            }
                        },
                        {
                            "krp": {
                                "value": "3",
                                "description": "Key replacement package (KRP)"
                            }
                        },
                        {
                            "script": {
                                "value": "5",
                                "description": " Scripts to download from the remote Server"
                            }
                        },
                        {
                            "debug-log": {
                                "value": "6",
                                "description": "Debug Logs"
                            }
                        },
                        {
                            "pm-logs": {
                                "value": "7",
                                "description": "PM Logs"
                            }
                        },
                        {
                            "local-certificate": {
                                "value": "8",
                                "description": "PKCS#12 bundle that contains x509v3 local certificate + password protected private key"
                            }
                        },
                        {
                            "trusted-certificate": {
                                "value": "9",
                                "description": "PKCS#7 bundle that contains x509v3 trusted certificate(Root or Intermediate CA)"
                            }
                        },
                        {
                            "fdr-log": {
                                "value": "10",
                                "description": "Flight Data Recorder(FDR) Logs"
                            }
                        },
                        {
                            "logs": {
                                "value": "11",
                                "description": "Specific logs"
                            }
                        },
                        {
                            "file": {
                                "value": "12",
                                "description": "Generic file"
                            }
                        },
                        {
                            "peer-certificate": {
                                "value": "13",
                                "description": "PKCS#12 bundle that contains x509v3 peer certificate + password protected private key"
                            }
                        }
                    ],
                    "description": "Predefined filetype available for upload",
                    "mandatory": "true",
                    "user-class": "debug-log:NA,NE database:NA logs:NA,NE,TT pm-logs:NA,NE,TT",
                    "edit-condition": {
                        "error-message": "This file type is not valid for upload operation",
                        "value": ". = ('fdr-log', 'pm-logs', 'debug-log', 'database', 'logs')"
                    }
                },
                "target": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "Upload target may be an explicit URL, or may just reference a pre-configured file-server\n                             together with a path.",
                    "destination": {
                        "yangType": "leaf",
                        "type": "string",
                        "length": "1..1024",
                        "pattern": [
                            "((ftp|sftp|scp|file|https|http):/)?/[^\\s/$.?#].[^\\s]*"
                        ],
                        "mandatory": "true",
                        "description": "Destination of the upload ([sftp|scp|ftp|https|http]://[user@]hostname/directorypath/filename)",
                        "edit-condition": [
                            {
                                "error-message": "Upload via FTP is currently disabled due to security policy.",
                                "description": "FTP upload only possible if secure-mode is disabled.",
                                "value": "if (starts-with(current(), 'ftp:')) then\n                            /ne/system/security/security-policies/secure-mode = 'false'\n                        else\n                            true()"
                            },
                            {
                                "error-message": "Cannot upload to this usb-path.",
                                "value": "not(starts-with(current(), 'file:/'))\n                                        or not($existing-usb-path)\n                                        or boolean($existing-usb-path[not(contains(current(), .))])\n                                        or boolean(//usb[usb-path=$existing-usb-path[contains(current(), .)]]/../oper-state='enabled')"
                            }
                        ]
                    },
                    "file-server-based": {
                        "yangType": "case",
                        "file-server": {
                            "yangType": "leaf",
                            "type": "leafref",
                            "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:file-servers/ioa-ne:file-server/ioa-ne:name",
                            "mandatory": "true",
                            "description": "The preconfigured file-server name."
                        },
                        "path": {
                            "yangType": "leaf",
                            "type": "string",
                            "length": "0..512",
                            "description": "Path (directory and filename) to be used in the remote file-server.\n                                     If not provided, the file-server initial-path is used, with system defined filename.\n                                     If the path targets a directory (e.g. /path/ ), the filename is dynamically generated.\n                                     Otherwise, the user defined filename may use some placeholders %t and %m (representing\n                                     timestamp and ne-name respectively)."
                        }
                    }
                },
                "async": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "Uploads asynchronously.",
                    "option": "a"
                },
                "skip-secure-verification": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "For HTTPS transfers, skip TLS verification. For SCP/SFTP transfers, skip ssh known host checking.\n                             If flag not set, verification is done according with current security-policy.",
                    "user-class": "-w:SA",
                    "option": "s"
                },
                "debug-entity": {
                    "yangType": "leaf",
                    "when": "../filetype = 'debug-log' or ../filetype = 'fdr-log'",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Targets a specific entity in the system for having its Logs to be collected. Can be a chassis or a card",
                    "discover-values": "/ne/equipment/chassis | /ne/equipment/card[category = ('line-card', 'controller')]",
                    "edit-condition": {
                        "error-message": "Invalid debug-entity - invalid FRU or FRU not present.",
                        "value": "if ($is-chassis) then\n                                        boolean(deref(.)/inventory)\n                            else if ($is-card) then\n                                        boolean(/ne/equipment/chassis[name=deref(current())/chassis-name]/slot[name=deref(current())/slot-name]/inventory)\n                            else false()"
                    }
                },
                "password": {
                    "yangType": "leaf",
                    "when": "starts-with(../destination,'scp') or starts-with(../destination,'sftp') or starts-with(../destination,'ftp')",
                    "type": "string",
                    "length": "1..255",
                    "mandatory": "true",
                    "description": "SFTP/SCP/FTP password",
                    "interactive": "PASSWORD: ",
                    "password": "true"
                },
                "period": {
                    "yangType": "leaf",
                    "type": "identityref",
                    "base": "PM-PERIOD",
                    "description": "Time period for PM data.",
                    "when": "filetype = 'pm-logs'",
                    "edit-condition": {
                        "error-message": "Real-time PM upload logs not allowed.",
                        "value": ". != ('pm-real-time')"
                    }
                },
                "log-file-list": {
                    "yangType": "leaf-list",
                    "when": "../filetype = 'logs'",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:syslog/ioa-ne:log-file/ioa-ne:name",
                    "description": "List of log files to be uploaded. If empty all available logs are selected."
                },
                "start-time": {
                    "yangType": "leaf",
                    "when": "../filetype = 'logs' or ../filetype = 'pm-logs'",
                    "type": "union",
                    "union-value": [
                        {
                            "type": "string",
                            "pattern": [
                                "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                            ],
                            "description": "The date-and-time type is a profile of the ISO 8601\n      standard for representation of dates and times using the\n      Gregorian calendar.  The profile is defined by the\n      date-time production in Section 5.6 of RFC 3339.\n\n      The date-and-time type is compatible with the dateTime XML\n      schema type with the following notable exceptions:\n\n      (a) The date-and-time type does not allow negative years.\n\n      (b) The date-and-time time-offset -00:00 indicates an unknown\n          time zone (see RFC 3339) while -00:00 and +00:00 and Z\n          all represent the same time zone in dateTime.\n\n      (c) The canonical format (see below) of data-and-time values\n          differs from the canonical format used by the dateTime XML\n          schema type, which requires all times to be in UTC using\n          the time-offset 'Z'.\n\n      This type is not equivalent to the DateAndTime textual\n      convention of the SMIv2 since RFC 3339 uses a different\n      separator between full-date and full-time and provides\n      higher resolution of time-secfrac.\n\n      The canonical format for date-and-time values with a known time\n      zone uses a numeric time zone offset that is calculated using\n      the device's configured known offset to UTC time.  A change of\n      the device's offset to UTC time will cause date-and-time values\n      to change accordingly.  Such changes might happen periodically\n      in case a server follows automatically daylight saving time\n      (DST) time zone offset changes.  The canonical format for\n      date-and-time values with an unknown time zone (usually\n      referring to the notion of local time) uses the time-offset\n      -00:00."
                        },
                        {
                            "type": "string",
                            "length": "0..32",
                            "pattern": [
                                "(((1000)|(0*\\d{1,3}))w)? *(((1000)|(0*\\d{1,3}))d)? *(((1000)|(0*\\d{1,3}))h)? *(((1000)|(0*\\d{1,3}))m)? *(((1000)|(0*\\d{1,3}))s)?"
                            ],
                            "description": "Time interval using the following syntax:\n                        '[xw] [xd] [xh] [xm] [xs]'\n                     where:\n                        w(eeks), d(ays), h(ours), m(inutes), s(seconds).\n                     Examples:\n                        2w          - two weeks\n                        5d 12h      - 5 days and 12 hours\n                        1h 7m 30s   - 1 hour and 7 minutes and 30 seconds"
                        }
                    ],
                    "description": "Start time from where the logs should be collected. It can be a timestamp or\n                             a time interval from the actual time (now). If empty all log history is selected"
                },
                "db-instance": {
                    "yangType": "leaf",
                    "when": "../filetype = 'database'",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "active": {
                                "value": "1"
                            }
                        },
                        {
                            "onehour": {
                                "value": "2"
                            }
                        },
                        {
                            "oneday": {
                                "value": "3"
                            }
                        },
                        {
                            "oneweek": {
                                "value": "4"
                            }
                        },
                        {
                            "temp": {
                                "value": "5"
                            }
                        },
                        {
                            "manual": {
                                "value": "6"
                            }
                        },
                        {
                            "rollback": {
                                "value": "7"
                            }
                        }
                    ],
                    "default": "active",
                    "description": "Selected DB instance"
                },
                "db-passphrase": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "[0-9a-zA-Z.\\-:+=^!/*?&<>()\\[\\]{}@%$#]*"
                    ],
                    "description": "Passphrase used for encrypting and decrypting DB snapshots.\n                         For each command associated with DB snapshots (backup, restore, etc),\n                         this db-passphrase will be used, except when it is directly provided in each command.\n                         Automatic DB snapshots will not be enabled until this parameter is set.",
                    "length": "40..200",
                    "when": "filetype = 'database'",
                    "password": "true"
                }
            },
            "output": {
                "upload-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the upload operation"
                }
            }
        },
        "prepare-upgrade": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Prepares NE for upgrade",
                "edit-condition": {
                    "error-message": "prepare upgrade denied [Software download is in progress]",
                    "value": "not(/ne/system/transfer/transfer-status/filetype[name='swimage']/last-completion-status='in-progress')"
                },
                "user-class": "-w:NA",
                "cli-hidden-mode": "candidate",
                "requires-confirmation": {
                    "when": "boolean(/ne/system/sw-management/software-location/software-load\n                            [((swload-state = 'installable') and\n                                (swload-status =\n                                    ('validate-in-progress', 'apply-in-progress', 'activate-in-progress', 'cancel-in-progress')))])",
                    "description": "Warning: FRUs  are performing an upgrade procedure. Any prepare-upgrade in this scenario might delay the upgrade. \\nAre you sure you want to proceed? [y/n]"
                }
            },
            "input": {
                "option": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "validate": {
                                "value": "1",
                                "description": "Validate"
                            }
                        },
                        {
                            "apply": {
                                "value": "2",
                                "description": "Apply"
                            }
                        }
                    ],
                    "mandatory": "true",
                    "description": "Predefined options available for prepare-upgrade"
                },
                "manifest": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:sw-management/ioa-ne:downloads/ioa-ne:manifest/ioa-ne:manifest-file",
                    "mandatory": "true",
                    "description": "manifest to be prepared for upgrade"
                },
                "ignore-precheck-failures": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "default": "false",
                    "description": "Ignore validation failures.",
                    "option": "i"
                },
                "unattended": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "Auto activate software after prepare upgrade.",
                    "option": "u"
                }
            },
            "output": {
                "prepare-upgrade-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the prepare-upgrade operation"
                }
            }
        },
        "activate-file": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows to activate a downloaded database or software image",
                "notice": {
                    "when": "filetype = 'database'",
                    "description": "Restoring a Database snapshot also restores existing system passwords, including the Database Backup Passphrase.\n                            Please consider reconfiguration of this passphrase."
                },
                "user-class": "-w:NA",
                "cli-hidden": "true",
                "requires-confirmation": {
                    "description": "if (filetype = 'swimage' and db-action = 'empty-db' and boolean(/ne/system/sw-management/software-load[swload-state='installable']/swload-pkg-type='NOS')) then This operation will affect network connectivity.\n         Post installation, please do network configurations either via serial console or via ethernet CRAFT interface.\n         Are you sure? [y/n] \n                       else if(filetype = 'database') then concat('This command may have traffic impact!\n            ', $sanity-info,\n            $db-snapshot-info,\n            'Are you sure? [y/n] '\n        )\n                       else Are you sure? [y/n] "
                }
            },
            "input": {
                "filetype": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "database": {
                                "value": "1",
                                "description": "Database"
                            }
                        },
                        {
                            "swimage": {
                                "value": "2",
                                "description": "SW Image"
                            }
                        },
                        {
                            "krp": {
                                "value": "3",
                                "description": "Key replacement package (KRP)"
                            }
                        },
                        {
                            "script": {
                                "value": "5",
                                "description": " Scripts to download from the remote Server"
                            }
                        },
                        {
                            "debug-log": {
                                "value": "6",
                                "description": "Debug Logs"
                            }
                        },
                        {
                            "pm-logs": {
                                "value": "7",
                                "description": "PM Logs"
                            }
                        },
                        {
                            "local-certificate": {
                                "value": "8",
                                "description": "PKCS#12 bundle that contains x509v3 local certificate + password protected private key"
                            }
                        },
                        {
                            "trusted-certificate": {
                                "value": "9",
                                "description": "PKCS#7 bundle that contains x509v3 trusted certificate(Root or Intermediate CA)"
                            }
                        },
                        {
                            "fdr-log": {
                                "value": "10",
                                "description": "Flight Data Recorder(FDR) Logs"
                            }
                        },
                        {
                            "logs": {
                                "value": "11",
                                "description": "Specific logs"
                            }
                        },
                        {
                            "file": {
                                "value": "12",
                                "description": "Generic file"
                            }
                        },
                        {
                            "peer-certificate": {
                                "value": "13",
                                "description": "PKCS#12 bundle that contains x509v3 peer certificate + password protected private key"
                            }
                        }
                    ],
                    "description": "Predefined filetype available for upload",
                    "mandatory": "true",
                    "edit-condition": [
                        {
                            "error-message": "This file type is not valid for activate-file  operation",
                            "value": "if (. = ('database', 'swimage', 'krp')) then true() else false()"
                        },
                        {
                            "error-message": "Software activate denied due to ongoing swimage download.",
                            "value": "not(/ne/system/transfer/transfer-status/filetype[name='swimage']/last-completion-status='in-progress')"
                        },
                        {
                            "error-message": "Prepare-upgrade apply should be complete before activate",
                            "value": "if (. = 'swimage') then /ne/system/sw-management/software-load[swload-state='installable']/swload-prepared='true' else true()"
                        }
                    ]
                },
                "db-action": {
                    "yangType": "leaf",
                    "when": "../filetype = 'swimage'",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "empty-db": {
                                "value": "1",
                                "description": "Activate software image with empty database."
                            }
                        },
                        {
                            "upgrade-db": {
                                "value": "2",
                                "description": "Activate software image with upgrading the current database."
                            }
                        },
                        {
                            "auto": {
                                "value": "3",
                                "description": "Activate software image by processing database with system default behavior."
                            }
                        },
                        {
                            "rollback": {
                                "value": "4",
                                "description": "Rollback to previous active software image."
                            }
                        }
                    ],
                    "default": "if (/ne/system/sw-management/software-load[swload-state='installable']/swload-pkg-type='SERVICE') then\n                                'upgrade-db'\n                              else\n                                'auto'",
                    "description": "Specify the expected database operation during activating software image.",
                    "edit-condition": [
                        {
                            "error-message": "DB Action is not applicable for this package type.",
                            "description": "Delta pkg type supports upgrade db action.",
                            "value": "if( ../filetype = 'swimage' and /ne/system/sw-management/software-load[swload-state='installable']/swload-pkg-type='SERVICE') then\n                                        . = 'upgrade-db'\n                                     else\n                                        true()"
                        },
                        {
                            "error-message": "DB Action rollback denied. Please prepare-upgrade and activate the inactive load for rollback",
                            "value": "if ( . = 'rollback') then\n                                     //software-load[swload-state='installable']/swload-label = //software-load[swload-state='inactive']/swload-label\n                                    else\n                                        true()"
                        }
                    ]
                },
                "label": {
                    "yangType": "leaf",
                    "when": "../filetype = 'swimage'",
                    "type": "string",
                    "description": "Label to be activated",
                    "edit-condition": {
                        "error-message": "Activate swimage label should be applied before.",
                        "description": "Activate swimage label restriction: be null or prepare-upgrade applied swimage.",
                        "value": "(. = '') or (. =/ne/system/sw-management/software-load[swload-state='installable']/swload-manifest)"
                    }
                },
                "db-passphrase": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "[0-9a-zA-Z.\\-:+=^!/*?&<>()\\[\\]{}@%$#]*"
                    ],
                    "description": "Passphrase used for encrypting and decrypting DB snapshots.\n                         For each command associated with DB snapshots (backup, restore, etc),\n                         this db-passphrase will be used, except when it is directly provided in each command.\n                         Automatic DB snapshots will not be enabled until this parameter is set.",
                    "length": "40..200",
                    "when": "filetype = 'database'",
                    "password": "true"
                },
                "db-instance": {
                    "yangType": "leaf",
                    "when": "../filetype = 'database'",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "active": {
                                "value": "1"
                            }
                        },
                        {
                            "onehour": {
                                "value": "2"
                            }
                        },
                        {
                            "oneday": {
                                "value": "3"
                            }
                        },
                        {
                            "oneweek": {
                                "value": "4"
                            }
                        },
                        {
                            "temp": {
                                "value": "5"
                            }
                        },
                        {
                            "manual": {
                                "value": "6"
                            }
                        },
                        {
                            "rollback": {
                                "value": "7"
                            }
                        }
                    ],
                    "default": "temp",
                    "description": "Database instance name to activate.",
                    "edit-condition": [
                        {
                            "error-message": "the instance has been activated.",
                            "value": ". != 'active'"
                        },
                        {
                            "error-message": "the instance not found.",
                            "value": "/ne/system/database[database-type=.]/database-state = 'inactive'"
                        }
                    ]
                },
                "sanity-check-override": {
                    "yangType": "leaf",
                    "when": "../filetype = 'database'",
                    "type": "boolean",
                    "default": "false",
                    "description": "Allows user to skip the database sanity check."
                }
            },
            "output": {
                "activate-file-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the activate-file operation"
                }
            }
        },
        "cancel-upgrade": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Cancels any active upgrade.",
                "user-class": "-w:NA",
                "cli-hidden-mode": "candidate",
                "edit-condition": {
                    "error-message": "Cancel upgrade denied when apply/activation in progress.",
                    "value": "not(/ne/system/sw-management/software-location/software-load[((swload-state = 'installable') and (swload-status = ('apply-in-progress','activate-in-progress')))])"
                }
            },
            "output": {
                "cancel-upgrade-result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Result of the cancel-upgrade operation"
                }
            }
        },
        "set-time": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Sets system time. Only applicable when clock time-source is 'manual'.",
                "edit-condition": {
                    "error-message": "Cannot change time manually due to NTP being enabled.",
                    "value": "//clock/time-source = 'manual'"
                },
                "user-class": "-w:NA,NE,TT",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "new-time": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Time to set in the system",
                    "mandatory": "true"
                }
            }
        },
        "password": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows user to change his own password.",
                "edit-condition": [
                    {
                        "error-message": "New password cannot be the same as the old password.",
                        "value": "old-password != new-password"
                    },
                    {
                        "error-message": "New password and password confirmation should be equal.",
                        "value": "$session-type!='cli' or new-password=repeat-new-password"
                    }
                ],
                "user-class": "-w:*",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "old-password": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..200",
                    "pattern": [
                        "[ -~]*"
                    ],
                    "description": "The current password.",
                    "mandatory": "true",
                    "password": "true",
                    "interactive": "Please provide the old password: "
                },
                "new-password": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..200",
                    "pattern": [
                        "[ -~]*"
                    ],
                    "description": "The new password.",
                    "mandatory": "true",
                    "password": "true",
                    "edit-condition": [
                        {
                            "error-message": "Password minimum length is 8 characters.",
                            "value": "not($pass-rules-enabled) or re-match(., '.{8}.*')"
                        },
                        {
                            "error-message": "Empty passwords are not supported.",
                            "value": ". != ''"
                        },
                        {
                            "error-message": "Password requires as least one lower case character.",
                            "value": "not($pass-rules-enabled) or re-match(., '.*[a-z].*')"
                        },
                        {
                            "error-message": "Password requires as least one upper case character.",
                            "value": "not($pass-rules-enabled) or re-match(., '.*[A-Z].*')"
                        },
                        {
                            "error-message": "Password requires as least one numeric character.",
                            "value": "not($pass-rules-enabled) or re-match(., '.*[0-9].*')"
                        },
                        {
                            "error-message": "Password requires as least one symbol.",
                            "value": "not($pass-rules-enabled) or re-match(., '.*[!-/[-`{-~:-@].*')"
                        },
                        {
                            "error-message": "Password cannot contain user-name in it.",
                            "value": "not($pass-rules-enabled) or not(re-match(., printf('.*%s.*', $target-user)))"
                        }
                    ],
                    "interactive": "Please provide the new password: "
                }
            }
        },
        "clear-recover-mode": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Clears the recover mode flag.\n                     This request will clear the recover mode flag, implicitly accepting the current configuration and\n                     returning to normal system operation.",
                "user-class": "-w:SA",
                "cli-hidden-mode": "candidate",
                "cli-hidden": "true",
                "edit-condition": {
                    "error-message": "Unexpected error: chassis EEPROM information not yet available!",
                    "value": "boolean(/ne/equipment/chassis[is-node-controller='true']/inventory)"
                },
                "requires-confirmation": "This action will clear the current recover-mode state of the NE, confirming the current configuration as is, re-enabling\ncommunication with the line cards and potentially reconfiguring the traffic settings. As such, this may have traffic impact.\nAre you sure you want to proceed? [y/n] "
            }
        },
        "run-task": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Forces the execution of a previously configured scheduled task.",
                "user-class": "-w:NA,NE,TT",
                "cli-hidden": "true"
            },
            "input": {
                "task-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:scheduled-tasks/ioa-ne:task/ioa-ne:name",
                    "mandatory": "true",
                    "description": "The task name to be executed."
                }
            }
        },
        "take-snapshot": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Stores the current state of the Configuration database into one of the available backup slots.",
                "user-class": "-w:NA",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "db-instance": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "active": {
                                "value": "1"
                            }
                        },
                        {
                            "onehour": {
                                "value": "2"
                            }
                        },
                        {
                            "oneday": {
                                "value": "3"
                            }
                        },
                        {
                            "oneweek": {
                                "value": "4"
                            }
                        },
                        {
                            "temp": {
                                "value": "5"
                            }
                        },
                        {
                            "manual": {
                                "value": "6"
                            }
                        },
                        {
                            "rollback": {
                                "value": "7"
                            }
                        }
                    ],
                    "default": "temp",
                    "description": "Target db-instance name which will hold the DB snapshot.",
                    "edit-condition": {
                        "error-message": "Only 'manual' or 'temp' snapshots are supported.",
                        "value": ". = ('manual', 'temp')"
                    }
                },
                "db-passphrase": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "[0-9a-zA-Z.\\-:+=^!/*?&<>()\\[\\]{}@%$#]*"
                    ],
                    "description": "Passphrase used for encrypting and decrypting DB snapshots.\n                         For each command associated with DB snapshots (backup, restore, etc),\n                         this db-passphrase will be used, except when it is directly provided in each command.\n                         Automatic DB snapshots will not be enabled until this parameter is set.",
                    "length": "40..200",
                    "password": "true"
                },
                "description": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..128",
                    "description": "Optional description for this DB snapshot."
                }
            }
        },
        "get-script": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Returns the existing scripts or shows existing script's content.",
                "user-class": "-w:*",
                "cli-hidden": "true"
            },
            "input": {
                "option": {
                    "yangType": "choice",
                    "list-scripts": {
                        "yangType": "leaf",
                        "type": "empty",
                        "description": "List all existing scripts."
                    },
                    "script-name": {
                        "yangType": "leaf",
                        "type": "string",
                        "description": "Get the content of an existing script. The script name is a relative path to the script directory."
                    },
                    "default": "list-scripts"
                }
            },
            "output": {
                "script-list": "list",
                "script-content": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Script content."
                }
            }
        },
        "script-list": {
            "definition": {
                "yangType": "list",
                "key": "script",
                "_description": "List with the existing scripts."
            },
            "input": {
                "description": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Script description defined on the begining of the file."
                },
                "script": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Script name."
                },
                "script-type": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Script type."
                },
                "file-size": {
                    "yangType": "leaf",
                    "type": "uint16",
                    "units": "kb",
                    "description": "Fize size."
                },
                "created": {
                    "yangType": "leaf",
                    "type": "string",
                    "pattern": [
                        "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})"
                    ],
                    "description": "Creation date."
                }
            }
        },
        "run-script": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Runs a previously installed script.",
                "user-class": "-w:*",
                "cli-hidden": "true",
                "display": "custom-message"
            },
            "input": {
                "script-name": {
                    "yangType": "leaf",
                    "type": "string",
                    "mandatory": "true",
                    "description": "Script absolute or relative path from the script directory.",
                    "discover-values": "seq(list-dir(/ne/system/protocols/cli/script-dir)[re-match(. , '.*.([cC][lL][iI]|[pP][yY])')])",
                    "edit-condition": {
                        "error-message": "Invalid script name.",
                        "value": ". = list-dir(/ne/system/protocols/cli/script-dir)[re-match(. , '.*.([cC][lL][iI]|[pP][yY])')]"
                    },
                    "cli-name": "filename"
                },
                "arguments": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Optional arguments to the script."
                }
            },
            "output": {
                "success": {
                    "yangType": "leaf",
                    "type": "boolean",
                    "description": "Script was executed with success."
                },
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "Returns the output of the script."
                }
            }
        },
        "manual-switchover": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Hide manual-switchover rpc. Command is not supported.",
                "cli-hidden": "true",
                "user-class": "-w:NA,NE",
                "cli-hidden-mode": "candidate",
                "requires-confirmation": {
                    "when": "boolean($card-name-corresponds-to-active-controller-card) and boolean($standby-is-ready-synchronized)",
                    "description": "Controller will switchover and connection to the management interface will be lost. Do you want to continue? [y/n] "
                }
            },
            "input": {
                "resource": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Active controller card to switchover.",
                    "discover-values": "/ne/equipment/card[controller-card/redundancy-status = 'active']",
                    "edit-condition": [
                        {
                            "error-message": "Operation not allowed, invalid resource!",
                            "value": "/ne/equipment/card[name = string(deref(current())/name)]/controller-card/redundancy-status = 'active'"
                        },
                        {
                            "error-message": "Operation not allowed, standby controller not ready!",
                            "value": "autocomplete() or boolean($standby-is-ready-synchronized)"
                        },
                        {
                            "error-message": "Operation not allowed, standby card oper-state is not enabled!",
                            "value": "autocomplete() or boolean($standby-card-oper-state-enabled) or not($standby-is-ready-synchronized)"
                        },
                        {
                            "error-message": "Operation not allowed, standby card oper-state is not unlock or maintenance!",
                            "value": "autocomplete() or boolean($standby-card-admin-state-ok) or not($standby-is-ready-synchronized)"
                        },
                        {
                            "error-message": "Operation not allowed, no-switchover is not set to disabled!",
                            "value": "/ne/equipment/chassis[name = string(deref(current())/chassis-name)]/no-switchover = 'disabled'"
                        },
                        {
                            "error-message": "Operation not allowed, controller card software-load versions are not aligned!",
                            "value": "boolean($active-controller-swload-label) and (string($active-controller-swload-label) = string($standby-controller-swload-label))"
                        }
                    ]
                }
            }
        },
        "file-operation": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Command for basic file and directory operations.",
                "user-class": "-w:NA,NE,TT",
                "cli-name": "file",
                "cli-hidden-mode": "candidate",
                "exec": {
                    "value": "su $1 -c '$2' 2>&1",
                    "exec-output": "result"
                }
            },
            "input": {
                "operation": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "rename": {
                                "value": "1",
                                "description": "Renames a file or directory."
                            }
                        },
                        {
                            "delete": {
                                "value": "2",
                                "description": "Deletes a file."
                            }
                        },
                        {
                            "view": {
                                "value": "3",
                                "description": "Does listing for a file or directory."
                            }
                        }
                    ],
                    "description": "File operations to do."
                },
                "file-path": {
                    "yangType": "leaf",
                    "type": "string",
                    "mandatory": "true",
                    "description": "Current file path."
                },
                "new-file-path": {
                    "yangType": "leaf",
                    "when": "../operation = 'rename'",
                    "type": "string",
                    "pattern": [
                        "[A-Za-z0-9_\\-/\\.]*"
                    ],
                    "mandatory": "true",
                    "description": "New file path."
                }
            },
            "output": {
                "result": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "The file operation result."
                }
            }
        },
        "call-home": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Manual connection trigger to a configured dial-out-server.",
                "user-class": "-w:NA,NE",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "dial-out-server-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:protocols/ioa-ne:dial-out-server/ioa-ne:name",
                    "mandatory": "true",
                    "description": "The dial-out-server to connect to.",
                    "discover-values": "/ne//dial-out-server[connection-state != 'connected']/name",
                    "edit-condition": {
                        "error-message": "Cannot do a call home request on a currently connected dial-out-server.",
                        "value": "deref(.)/../connection-state != 'connected'"
                    }
                }
            }
        },
        "activate-fw": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Allows to activate a 3rd party firmware",
                "user-class": "-w:NA",
                "cli-hidden": "true",
                "traffic-affecting": {
                    "when": "not(check-if-seq-version-string-contains-version(string(//third-party-fw[fw-name = string(current()/fw-image-name)]/nsa-upgrade-version), string(deref(resource)/../inventory/current-fw/fw-version)))"
                }
            },
            "input": {
                "fw-image-name": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:sw-management/ioa-ne:third-party-fw/ioa-ne:fw-name",
                    "mandatory": "true",
                    "description": "FW file name",
                    "notice": {
                        "value": "string($filtered-resource-var)",
                        "when": "count($filtered-resource-var) > 0",
                        "description": "Activating FW in: $1"
                    }
                },
                "resource": {
                    "yangType": "leaf-list",
                    "type": "instance-identifier",
                    "min-elements": "1",
                    "description": "List of equipment to be activated.",
                    "discover-values": "/ne/equipment/card/port/inventory[vendor=$applicable-vendor]/current-fw/../../tom",
                    "edit-condition": [
                        {
                            "error-message": "Third party fw file-status is not set to valid.",
                            "description": "Activate fw command should be rejected in case file-status is not valid.",
                            "value": "$applicable-file-status = 'valid'"
                        },
                        {
                            "error-message": "No applicable TOMs found for activation.",
                            "description": "Activate fw command should fail in case no applicable tom is found.",
                            "value": "boolean(count($filtered-resource-var))"
                        }
                    ]
                }
            }
        },
        "re-key": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "On-demand re-keying of a data path encryption secure entity, IKEv2 peer or an IPSec Child security association (Security Policy Database entry).",
                "edit-condition": {
                    "error-message": "Either ikev2-peer or secure-entity needs to be provided.",
                    "value": "newvalue(secure-entity) or newvalue(ikev2-peer)"
                },
                "user-class": "-w:EA"
            },
            "input": {
                "re-key-type": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "The input choice for re-key",
                    "ipsec-security-association": {
                        "yangType": "leaf",
                        "type": "leafref",
                        "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:security/ioa-ne:ikev2/ioa-ne:ikev2-local-instance/ioa-ne:peer-authorization-database/ioa-ne:ikev2-peer/ioa-ne:security-policy-database/ioa-ne:ipsec-spd-entry/ioa-ne:name",
                        "description": "Points to IPsec SPD entry object (Child SA)."
                    },
                    "ikev2-peer": {
                        "yangType": "leaf",
                        "type": "instance-identifier",
                        "description": "A reference to the IKE peer object (IKE SA).",
                        "discover-values": "//ikev2-peer"
                    },
                    "secure-entity": {
                        "yangType": "leaf",
                        "type": "instance-identifier",
                        "description": "Points to secure entity object (Child SA).",
                        "discover-values": "//secure-entity"
                    }
                }
            }
        },
        "re-auth": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "On-demand re-authentication of IKEv2 security associations.",
                "user-class": "-w:EA"
            },
            "input": {
                "ikev2-peer": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "A reference to the IKE peer object (IKE SA).",
                    "discover-values": "//ikev2-peer"
                }
            }
        },
        "clear-diagnostics": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Command to perform maintenance and diagnostic counter clear.",
                "user-class": "-w:NA,NE",
                "cli-hidden": "true"
            },
            "input": {
                "entity-id": {
                    "yangType": "leaf",
                    "type": "instance-identifier",
                    "mandatory": "true",
                    "description": "Target entity for the command. Must exist.",
                    "discover-values": "$entities-with-diag",
                    "edit-condition": {
                        "error-message": "Invalid entity for clearing diagnostics.",
                        "value": "deref(.) = $entities-with-diag"
                    }
                },
                "test-signal-direction": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "ingress": {
                                "value": "1"
                            }
                        },
                        {
                            "egress": {
                                "value": "2"
                            }
                        },
                        {
                            "auto": {
                                "value": "3"
                            }
                        }
                    ],
                    "default": "auto",
                    "description": "The test signal direction. If not specified, the counter for the enabled direction would be cleared."
                }
            }
        },
        "create-xcon": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/services",
                "yangType": "rpc",
                "description": "Command for automatic creation of xcon and associated facilities.",
                "cli-hidden-mode": "normal",
                "user-class": "-w:NA,PR"
            },
            "input": {
                "source-facility": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "src-existing-facility": {
                        "yangType": "case",
                        "description": "To be used in case this end point refers to an existing facility.",
                        "source": {
                            "yangType": "leaf",
                            "type": "instance-identifier",
                            "mandatory": "true",
                            "description": "Source end-point of the xcon. Must be an existing facility that can be used \n                                     as a XCON end-point."
                        }
                    },
                    "src-non-existing-facility": {
                        "yangType": "case",
                        "description": "To be used in case this end point needs to be automatically created implicitly. \n                                 Applies to the automatic creation of low order ODUs for XCON end-points.",
                        "src-parent-odu": {
                            "yangType": "leaf",
                            "type": "string",
                            "mandatory": "true",
                            "description": "Name of the High Order parent ODU where to audst-create this ODU end-point."
                        },
                        "src-time-slots": {
                            "yangType": "leaf",
                            "type": "string",
                            "length": "0..255",
                            "pattern": [
                                "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                            ],
                            "description": "List of time-slots to allocate to the automatically created LO-ODU.\n                                     Value can be:\n                                     - omitted/empty - in which case system will audst-allocate time-slots based on the src-instance-id,\n                                                       which becomes mandatory (this is only supported for non ODUflex scenarios.)\n                                     - starting time-slot - system automatically allocates the rest of the time-slots sequentially \n                                                            from this starting point; will fail if those time-slots are not available\n                                     - time-slot list - full list of time-slots, using a comma separated list, with 'x..y' representing \n                                                        ranges; the total number of time-slots need to match the associated payload-type\n                                                        (e.g. 80 time-slots for 100G payload, 320 time-slots for 400G payload, etc)"
                        },
                        "src-instance-id": {
                            "yangType": "leaf",
                            "type": "uint8",
                            "range": "1..255",
                            "description": "Optional parameter on LO-ODU creation, identifies the ODU within the parent/high-order ODU.\n                             If not provided, it is automatically derived.\n                             Max value depends on capacity of the HO-ODU and of the odu-type.\n                             (ex: for creating an ODU4 in a HO ODUC8, instance can be between 1 and 8)\n                             Note: instance-id becomes mandatory if time-slots are not provided."
                        }
                    }
                },
                "destination-facility": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "dst-existing-facility": {
                        "yangType": "case",
                        "description": "To be used in case this end point refers to an existing facility.",
                        "destination": {
                            "yangType": "leaf",
                            "type": "instance-identifier",
                            "mandatory": "true",
                            "description": "Destination end-point of the xcon. Must be an existing facility that can be used \n                                     as a XCON end-point."
                        }
                    },
                    "dst-non-existing-facility": {
                        "yangType": "case",
                        "description": "To be used in case this end point needs to be automatically created implicitly. \n                                 Applies to the automatic creation of low order ODUs for XCON end-points.",
                        "dst-parent-odu": {
                            "yangType": "leaf",
                            "type": "string",
                            "mandatory": "true",
                            "description": "Name of the High Order parent ODU where to audst-create this ODU end-point."
                        },
                        "dst-time-slots": {
                            "yangType": "leaf",
                            "type": "string",
                            "length": "0..255",
                            "pattern": [
                                "(([0-9]+(\\.\\.[0-9]+)?)(,([0-9]+(\\.\\.[0-9]+)?))*)?"
                            ],
                            "description": "List of time-slots to allocate to the automatically created LO-ODU.\n                                     Value can be:\n                                     - omitted/empty - in which case system will audst-allocate time-slots based on the dst-instance-id,\n                                                       which becomes mandatory (this is only supported for non ODUflex scenarios.)\n                                     - starting time-slot - system automatically allocates the rest of the time-slots sequentially \n                                                            from this starting point; will fail if those time-slots are not available\n                                     - time-slot list - full list of time-slots, using a comma separated list, with 'x..y' representing \n                                                        ranges; the total number of time-slots need to match the associated payload-type\n                                                        (e.g. 80 time-slots for 100G payload, 320 time-slots for 400G payload, etc)"
                        },
                        "dst-instance-id": {
                            "yangType": "leaf",
                            "type": "uint8",
                            "range": "1..255",
                            "description": "Optional parameter on LO-ODU creation, identifies the ODU within the parent/high-order ODU.\n                             If not provided, it is automatically derived.\n                             Max value depends on capacity of the HO-ODU and of the odu-type.\n                             (ex: for creating an ODU4 in a HO ODUC8, instance can be between 1 and 8)\n                             Note: instance-id becomes mandatory if time-slots are not provided."
                        }
                    }
                },
                "payload-type": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "100GBE": {
                                "value": "10",
                                "description": "A generic payload type for all 100GBASE-X Ethernet clients when provisioning a digital XCON."
                            }
                        },
                        {
                            "400GBE": {
                                "value": "20",
                                "description": "A generic payload type for all 400GBASE-X Ethernet clients when provisioning a digital XCON."
                            }
                        },
                        {
                            "OTU4": {
                                "value": "30",
                                "description": "A generic payload type for OTU4 Transport w/o FEC service."
                            }
                        },
                        {
                            "100G": {
                                "value": "40",
                                "description": "A generic payload type for ODU4 switching services."
                            }
                        },
                        {
                            "ODU2": {
                                "value": "50",
                                "description": "A generic payload type for ODU2 switching services."
                            }
                        },
                        {
                            "ODU2e": {
                                "value": "60",
                                "description": "A generic payload type for ODU2e switching services."
                            }
                        },
                        {
                            "10GBE": {
                                "value": "70"
                            }
                        },
                        {
                            "OC192": {
                                "value": "80"
                            }
                        },
                        {
                            "STM64": {
                                "value": "90"
                            }
                        },
                        {
                            "10G": {
                                "value": "100"
                            }
                        },
                        {
                            "empty": {
                                "value": "110",
                                "description": "Not applicable for 2-step XCON approach."
                            }
                        }
                    ],
                    "description": "Indicates a generic, high-level source (from) client payload type of the digital XCON."
                },
                "direction": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "two-way": {
                                "value": "2"
                            }
                        }
                    ],
                    "default": "two-way",
                    "description": "Indicates whether the digital XCON is uni-directional (1-WAY) or bi-directional (2-WAY)."
                },
                "label": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..256",
                    "description": "User label."
                },
                "circuit-id-suffix": {
                    "yangType": "leaf",
                    "type": "string",
                    "length": "0..48",
                    "description": "User configured circuit ID suffix."
                }
            }
        },
        "get-config": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "Retrieve all or part of a specified configuration.",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "source": "container",
                "filter": {
                    "yangType": "anyxml",
                    "description": "Subtree or XPath filter to use.",
                    "nc:get-filter-element-attributes": "true"
                }
            },
            "output": {
                "data": {
                    "yangType": "anyxml",
                    "description": "Copy of the source datastore subset that matched\n           the filter criteria (if any).  An empty data container\n           indicates that the request did not produce any results."
                }
            }
        },
        "edit-config": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "The <edit-config> operation loads all or part of a specified\n       configuration to the specified target configuration.",
                "cli-hidden": "true"
            },
            "input": {
                "target": "container",
                "default-operation": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "merge": {
                                "description": "The default operation is merge."
                            }
                        },
                        {
                            "replace": {
                                "description": "The default operation is replace."
                            }
                        },
                        {
                            "none": {
                                "description": "There is no default operation."
                            }
                        }
                    ],
                    "default": "merge",
                    "description": "The default operation to use."
                },
                "test-option": {
                    "yangType": "leaf",
                    "if-feature": "validate",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "test-then-set": {
                                "description": "The server will test and then set if no errors."
                            }
                        },
                        {
                            "set": {
                                "description": "The server will set without a test first."
                            }
                        },
                        {
                            "test-only": {
                                "description": "The server will only test and not set, even\n               if there are no errors."
                            }
                        }
                    ],
                    "default": "test-then-set",
                    "description": "The test option to use."
                },
                "error-option": {
                    "yangType": "leaf",
                    "type": "enumeration",
                    "enum-value": [
                        {
                            "stop-on-error": {
                                "description": "The server will stop on errors."
                            }
                        },
                        {
                            "continue-on-error": {
                                "description": "The server may continue on errors."
                            }
                        },
                        {
                            "rollback-on-error": {
                                "description": "The server will roll back on errors. \n               This value can only be used if the 'rollback-on-error'\n               feature is supported."
                            }
                        }
                    ],
                    "default": "stop-on-error",
                    "description": "The error option to use."
                },
                "edit-content": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "The content for the edit operation.",
                    "config": {
                        "yangType": "anyxml",
                        "description": "Inline Config content."
                    },
                    "url": {
                        "yangType": "leaf",
                        "if-feature": "url",
                        "type": "string",
                        "description": "URL-based config content."
                    }
                }
            }
        },
        "copy-config": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "Create or replace an entire configuration datastore with the\n       contents of another complete configuration datastore.",
                "cli-hidden": "true"
            },
            "input": {
                "target": "container",
                "source": "container"
            }
        },
        "rpc.target": {
            "definition": {
                "yangType": "container",
                "description": "Particular configuration to unlock."
            },
            "input": {
                "config-target": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "The configuration target to unlock.",
                    "candidate": {
                        "yangType": "leaf",
                        "if-feature": "candidate",
                        "type": "empty",
                        "description": "The candidate configuration is the config target."
                    },
                    "running": {
                        "yangType": "leaf",
                        "type": "empty",
                        "description": "The running configuration is the config target."
                    },
                    "startup": {
                        "yangType": "leaf",
                        "if-feature": "startup",
                        "type": "empty",
                        "description": "The startup configuration is the config target."
                    }
                }
            }
        },
        "rpc.source": {
            "definition": {
                "yangType": "container",
                "description": "Particular configuration to validate."
            },
            "input": {
                "config-source": {
                    "yangType": "choice",
                    "mandatory": "true",
                    "description": "The configuration source to validate.",
                    "candidate": {
                        "yangType": "leaf",
                        "if-feature": "candidate",
                        "type": "empty",
                        "description": "The candidate configuration is the config source."
                    },
                    "running": {
                        "yangType": "leaf",
                        "type": "empty",
                        "description": "The running configuration is the config source."
                    },
                    "startup": {
                        "yangType": "leaf",
                        "if-feature": "startup",
                        "type": "empty",
                        "description": "The startup configuration is the config source."
                    },
                    "url": {
                        "yangType": "leaf",
                        "if-feature": "url",
                        "type": "string",
                        "description": "The URL-based configuration is the config source."
                    },
                    "config": {
                        "yangType": "anyxml",
                        "description": "Inline Config content: <config> element.  Represents\n               an entire configuration datastore, not\n               a subset of the running datastore."
                    }
                }
            }
        },
        "delete-config": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "nacm:default-deny-all": "true",
                "description": "Delete a configuration datastore.",
                "cli-hidden": "true"
            },
            "input": {
                "target": "container"
            }
        },
        "lock": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "The lock operation allows the client to lock the configuration\n       system of a device.",
                "user-class": "-w:SA,NA,EA,NE,TT,PR",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "target": "container"
            }
        },
        "unlock": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "The unlock operation is used to release a configuration lock,\n       previously obtained with the 'lock' operation.",
                "user-class": "-w:SA,NA,EA,NE,TT,PR",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "target": "container"
            }
        },
        "get": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "Retrieve running configuration and device state information.",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            },
            "input": {
                "filter": {
                    "yangType": "anyxml",
                    "description": "This parameter specifies the portion of the system\n           configuration and state data to retrieve.",
                    "nc:get-filter-element-attributes": "true"
                }
            },
            "output": {
                "data": {
                    "yangType": "anyxml",
                    "description": "Copy of the running datastore subset and/or state\n           data that matched the filter criteria (if any). \n           An empty data container indicates that the request did not\n           produce any results."
                }
            }
        },
        "close-session": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "description": "Request graceful termination of a NETCONF session.",
                "cli-hidden": "true",
                "allow-in-lock": "true"
            }
        },
        "ioa-rpc.kill-session": {
            "definition": {
                "namespace": "http://infinera.com/yang/ioa/rpc",
                "yangType": "rpc",
                "description": "Forces the termination of any established session.\n                     Can target an session, independently on the type of management protocol.\n                     A user cannot use this command to kill its own session.",
                "user-class": "-w:SA",
                "allow-in-lock": "true",
                "cli-hidden-mode": "candidate"
            },
            "input": {
                "session-id": {
                    "yangType": "leaf",
                    "type": "leafref",
                    "path": "/ioa-ne:ne/ioa-ne:system/ioa-ne:security/ioa-ne:session/ioa-ne:session-id",
                    "mandatory": "true",
                    "description": "Identifier of the session that will be killed.",
                    "edit-condition": {
                        "error-message": "The kill-session command cannot be used to close the current session.",
                        "value": "current-session()/session-id != ."
                    }
                }
            }
        },
        "ietf-netconf.kill-session": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "nacm:default-deny-all": "true",
                "description": "Force the termination of a NETCONF session."
            },
            "input": {
                "session-id": {
                    "yangType": "leaf",
                    "type": "uint32",
                    "range": "1..4294967295",
                    "description": "Particular session to kill.",
                    "mandatory": "true"
                }
            }
        },
        "commit": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "if-feature": "candidate",
                "description": "Commit the candidate configuration as the device's new\n       current configuration.",
                "user-class": "-w:*",
                "cli-hidden": "true"
            },
            "input": {
                "confirmed": {
                    "yangType": "leaf",
                    "if-feature": "confirmed-commit",
                    "type": "empty",
                    "description": "Requests a confirmed commit."
                },
                "confirm-timeout": {
                    "yangType": "leaf",
                    "if-feature": "confirmed-commit",
                    "type": "uint32",
                    "range": "1..4294967295",
                    "units": "seconds",
                    "default": "600",
                    "description": "The timeout interval for a confirmed commit."
                },
                "persist": {
                    "yangType": "leaf",
                    "if-feature": "confirmed-commit",
                    "type": "string",
                    "description": "This parameter is used to make a confirmed commit\n           persistent.  A persistent confirmed commit is not aborted\n           if the NETCONF session terminates.  The only way to abort\n           a persistent confirmed commit is to let the timer expire,\n           or to use the <cancel-commit> operation. \n\n           The value of this parameter is a token that must be given\n           in the 'persist-id' parameter of <commit> or\n           <cancel-commit> operations in order to confirm or cancel\n           the persistent confirmed commit.\n\n           The token should be a random string."
                },
                "persist-id": {
                    "yangType": "leaf",
                    "if-feature": "confirmed-commit",
                    "type": "string",
                    "description": "This parameter is given in order to commit a persistent\n           confirmed commit.  The value must be equal to the value\n           given in the 'persist' parameter to the <commit> operation.\n           If it does not match, the operation fails with an\n          'invalid-value' error."
                }
            }
        },
        "discard-changes": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "if-feature": "candidate",
                "description": "Revert the candidate configuration to the current\n       running configuration.",
                "user-class": "-w:*",
                "cli-hidden": "true"
            }
        },
        "cancel-commit": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "if-feature": "confirmed-commit",
                "description": "This operation is used to cancel an ongoing confirmed commit. \n       If the confirmed commit is persistent, the parameter\n       'persist-id' must be given, and it must match the value of the\n       'persist' parameter."
            },
            "input": {
                "persist-id": {
                    "yangType": "leaf",
                    "type": "string",
                    "description": "This parameter is given in order to cancel a persistent\n           confirmed commit.  The value must be equal to the value\n           given in the 'persist' parameter to the <commit> operation. \n           If it does not match, the operation fails with an\n          'invalid-value' error."
                }
            }
        },
        "validate": {
            "definition": {
                "namespace": "urn:ietf:params:xml:ns:netconf:base:1.0",
                "yangType": "rpc",
                "if-feature": "validate",
                "description": "Validates the contents of the specified configuration.",
                "user-class": "-w:*",
                "cli-hidden": "true"
            },
            "input": {
                "source": "container"
            }
        }
    },
    "namespace": {
        "cli": "http://infinera.com/yang/cos/cli",
        "cli-ext": "http://infinera.com/yang/cos/cli/extensions",
        "ext": "http://infinera.com/yang/cos/common/extensions",
        "meta": "http://infinera.com/yang/cos/common/meta-extensions",
        "hmo-aug": "http://infinera.com/yang/os/hmo/augment",
        "dbop": "http://infinera.com/yang/cos/hmo/db-operations",
        "hmo-ks": "http://infinera.com/yang/os/hmo/keystore",
        "hmo-rpc": "http://infinera.com/yang/cos/hmo/rpc",
        "hmo-sys": "http://infinera.com/yang/cos/hmo-system-info",
        "hmo-tlm": "http://infinera.com/yang/cos/hmo/telemetry",
        "mo-meta": "http://infinera.com/yang/cos/hmo/mo-metadata",
        "ioa-ietf": "http://infinera.com/yang/ioa/common/ioa-ietf",
        "gx": "http://infinera.com/yang/gx",
        "ioa-acl": "http://infinera.com/yang/ioa-acl",
        "ioa-alarm": "http://infinera.com/yang/ioa/alarm",
        "ioa-cap": "http://infinera.com/yang/ioa/capabilities",
        "ioa-carrier-types": "http://infinera.com/yang/ioa/carrier-types",
        "ioa-cert": "http://infinera.com/yang/ioa/certificate",
        "ioa-cc": "http://infinera.com/yang/ioa/comm-channel",
        "ioa-common": "http://infinera.com/yang/ioa/common",
        "ioa-dp-encr": "http://infinera.com/yang/ioa/data-path-encryption",
        "ioa-eqm": "http://infinera.com/yang/ioa/equipment",
        "ioa-eth-zr": "http://infinera.com/yang/ioa/eth-zr",
        "ioa-eth": "http://infinera.com/yang/ioa/ethernet",
        "ioa-fac-common": "http://infinera.com/yang/ioa/facilities-common",
        "ioa-fac": "http://infinera.com/yang/ioa/facilities",
        "ioa-flexo-group": "http://infinera.com/yang/ioa/flexo-group",
        "ioa-flexo": "http://infinera.com/yang/ioa/flexo",
        "ioa-ike": "http://infinera.com/yang/ioa/ikev2",
        "ioa-image-key": "http://infinera.com/yang/ioa/keys",
        "ioa-ipsec": "http://infinera.com/yang/ioa/ipsec",
        "ioa-line-ptp": "http://infinera.com/yang/ioa/line-ptp",
        "ioa-mgmt": "http://infinera.com/yang/ioa/mgmt-protocols",
        "ioa-ne": "http://infinera.com/yang/ioa/ne",
        "networking": "http://infinera.com/yang/ioa/networking",
        "ioa-odu": "http://infinera.com/yang/ioa/odu",
        "ioa-carrier": "http://infinera.com/yang/ioa/optical-carrier",
        "ioa-och": "http://infinera.com/yang/ioa/optical-channel",
        "ioa-opt": "http://infinera.com/yang/ioa/optical-common",
        "ospf": "http://infinera.com/yang/ioa/networking/ospf",
        "ioa-otn": "http://infinera.com/yang/ioa/otn-common",
        "ioa-otu": "http://infinera.com/yang/ioa/otu",
        "ioa-pm": "http://infinera.com/yang/ioa/pm",
        "ioa-protection": "http://infinera.com/yang/ioa/protection-group",
        "ioa-rt": "http://infinera.com/yang/ioa/networking/routing",
        "ioa-rpc": "http://infinera.com/yang/ioa/rpc",
        "ioa-scg": "http://infinera.com/yang/ioa/scg",
        "ioa-sch": "http://infinera.com/yang/ioa/sch",
        "ioa-sec": "http://infinera.com/yang/ioa/security",
        "ioa-services": "http://infinera.com/yang/ioa/services",
        "ioa-swm": "http://infinera.com/yang/ioa/swm",
        "ioa-sw-svc": "http://infinera.com/yang/ioa/sw-services",
        "ioa-syslog": "http://infinera.com/yang/ioa/syslog",
        "ioa-tdm": "http://infinera.com/yang/ioa/tdm",
        "ioa-tlm": "http://infinera.com/yang/ioa/telemetry",
        "ioa-time": "http://infinera.com/yang/ioa/time",
        "ioa-top": "http://infinera.com/yang/ioa/topology",
        "ioa-transfer": "http://infinera.com/yang/ioa/transfer",
        "ioa-trib": "http://infinera.com/yang/ioa/trib-ptp",
        "ioa-ztp": "http://infinera.com/yang/ioa/ztp",
        "ianaaf": "urn:ietf:params:xml:ns:yang:iana-afn-safi",
        "inet": "urn:ietf:params:xml:ns:yang:ietf-inet-types",
        "nacm": "urn:ietf:params:xml:ns:yang:ietf-netconf-acm",
        "ncn": "urn:ietf:params:xml:ns:yang:ietf-netconf-notifications",
        "ncwd": "urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults",
        "nc": "urn:ietf:params:xml:ns:netconf:base:1.0",
        "rc": "urn:ietf:params:xml:ns:yang:ietf-restconf",
        "md": "urn:ietf:params:xml:ns:yang:ietf-yang-metadata",
        "yang": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
        "chm1r-ext": "http://infinera.com/yang/gx/chm1r/ext",
        "g3x-cap-ext": "http://infinera.com/yang/gx/g3x/capabilities/ext",
        "g3x-ext": "http://infinera.com/yang/gx/g3x/ext",
        "g3x-l1service-ext": "http://infinera.com/yang/ioa/g3x/l1service/ext",
        "g3x-net-ext": "http://infinera.com/yang/g3x/networking/ext",
        "g3x-alarm-ext": "http://infinera.com/yang/g3x/alarm/ext",
        "g3x-pm-ext": "http://infinera.com/yang/g3x/pm/ext",
        "utm2-ext": "http://infinera.com/yang/gx/utm2/ext",
        "alarm-ext": "http://infinera.com/yang/ioa/alarm/ext",
        "auth-ext": "http://infinera.com/yang/ioa/auth/ext",
        "data-path-encryption-ext": "http://infinera.com/yang/ioa/data-path-encryption/ext",
        "eqm-pc-ext": "http://infinera.com/yang/ioa/equipment/power-control/ext",
        "eqm-ext": "http://infinera.com/yang/ioa/equipment/ext",
        "ioa-fac-ext": "http://infinera.com/yang/ioa/facilities/ext",
        "mgmt-ext": "http://infinera.com/yang/ioa/mgmt-protocols/ext",
        "ne-ext": "http://infinera.com/yang/ioa/ne/ext",
        "net-ext": "http://infinera.com/yang/ioa/networking/ext",
        "pm-ext": "http://infinera.com/yang/ioa/pm/ext",
        "prot-ext": "http://infinera.com/yang/ioa/protection/ext",
        "ioa-rpc-ext": "http://infinera.com/yang/ioa/rpc/ext",
        "sec-ext": "http://infinera.com/yang/ioa/security/ext",
        "swm-ext": "http://infinera.com/yang/ioa/swm/ext",
        "sws-ext": "http://infinera.com/yang/ioa/sw-services/ext",
        "syslog-ext": "http://infinera.com/yang/ioa/syslog/ext",
        "tlm-ext": "http://infinera.com/yang/ioa/telemetry/ext",
        "time-ext": "http://infinera.com/yang/ioa/time/ext",
        "top-ext": "http://infinera.com/yang/ioa/topology/ext",
        "transfer-ext": "http://infinera.com/yang/ioa/transfer/ext",
        "ztp-ext": "http://infinera.com/yang/ioa/ztp/ext"
    }
}